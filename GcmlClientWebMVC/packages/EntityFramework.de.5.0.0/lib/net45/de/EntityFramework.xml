<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>EntityFramework</name>
  </assembly>
  <members>
    <member name="T:System.Data.Entity.CreateDatabaseIfNotExists`1">
      <summary>Eine Implementierung von <see cref="T:System.Data.Entity.IDatabaseInitializer`1" />, die nur dann die Datenbank neu erstellt und optional erneut Startwerte für die Datenbank festlegt, wenn die Datenbank nicht vorhanden ist. Zum Seeding der Datenbank erstellen Sie eine abgeleitete Klasse und überschreiben die Seed-Methode. </summary>
      <typeparam name="TContext">Der Typ des Kontexts.</typeparam>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.InitializeDatabase(`0)">
      <summary>Führt die Strategie zum Initialisieren der Datenbank für den angegebenen Kontext aus. </summary>
      <param name="context">Der Kontext.</param>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.Seed(`0)">
      <summary>Fügt beim Überschreiben dem Kontext Daten für das Seeding hinzu.  Bei der Standardimplementierung wird keine Aktion ausgeführt. </summary>
      <param name="context">Der Kontext für das Seeding.</param>
    </member>
    <member name="T:System.Data.Entity.Database">
      <summary>Eine Instanz dieser Klasse wird aus einem <see cref="T:System.Data.Entity.DbContext" />-Objekt abgerufen und kann zum Verwalten der Datenbank verwendet werden, die einen <see cref="T:System.Data.Entity.DbContext" /> oder eine Verbindung unterstützt. Dies schließt das Erstellen, Löschen und Überprüfen auf Vorhandensein einer Datenbank ein. Das Löschen und Überprüfen auf Vorhandensein einer Datenbank kann mit lediglich einer Verbindung (ohne vollständigen Kontext) erfolgen, indem die statischen Methoden dieser Klasse verwendet werden. </summary>
    </member>
    <member name="M:System.Data.Entity.Database.CompatibleWithModel(System.Boolean)">
      <summary>Diese Methode gibt true zurück, wenn der Kontext und die Datenbank übereinstimmende Modellhashs aufweisen.  Dies bedeutet, dass das zum Erstellen der Datenbank verwendete Modell und das aktuelle Modell identisch sind und daher diese beiden Modelle gemeinsam verwendet werden können. </summary>
      <returns>TRUE, wenn der Modellhash im Kontext und der Modellhash in der Datenbank übereinstimmen, andernfalls FALSE. </returns>
      <param name="throwIfNoMetadata">Wenn der Wert auf TRUE festgelegt ist und weder im Modell, das dem Kontext zugeordnet ist, noch in der Datenbank selbst Modellmetadaten gefunden werden, wird eine Ausnahme ausgelöst.  Wenn der Wert auf FALSE festgelegt ist und keine Metadaten gefunden werden, gibt diese Methode true zurück.</param>
    </member>
    <member name="P:System.Data.Entity.Database.Connection">
      <summary>Gibt die Verbindung zurück, die von diesem Kontext verwendet wird.  Dies verursacht möglicherweise das Initialisieren des Kontexts und das Erstellen der Verbindung, wenn sie nicht bereits vorhanden ist. </summary>
      <returns>Die von diesem Kontext verwendete Verbindung.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Create">
      <summary>Erstellt eine neue Datenbank auf dem Datenbankserver für das im Unterstützungskontext definierte Modell. Beachten Sie, dass das Ausführen dieser Strategie deaktiviert wird, wenn diese Methode aufgerufen wird, bevor die Datenbankinitialisierungsstrategie ausgeführt wurde. </summary>
    </member>
    <member name="M:System.Data.Entity.Database.CreateIfNotExists">
      <summary>Erstellt eine neue Datenbank auf dem Datenbankserver für das im Unterstützungskontext definierte Modell, jedoch nur, wenn auf dem Server nicht bereits eine Datenbank mit dem gleichen Namen vorhanden ist. </summary>
      <returns>TRUE, wenn die Datenbank nicht vorhanden war und erstellt wurde, andernfalls FALSE.</returns>
    </member>
    <member name="P:System.Data.Entity.Database.DefaultConnectionFactory">
      <summary>Die Verbindungsfactory, die beim Erstellen einer <see cref="T:System.Data.Common.DbConnection" /> aus lediglich einem Datenbanknamen oder einer Verbindungszeichenfolge verwendet werden soll. </summary>
      <returns>Die zu verwendende Verbindungsfactory.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Delete">
      <summary>Löscht die Datenbank auf dem Datenbankserver, wenn sie vorhanden ist, und führt andernfalls keine Aktion aus. </summary>
      <returns>TRUE, wenn die Datenbank vorhanden war und gelöscht wurde, andernfalls FALSE.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Delete(System.Data.Common.DbConnection)">
      <summary>Löscht die Datenbank auf dem Datenbankserver, wenn sie vorhanden ist, und führt andernfalls keine Aktion aus. </summary>
      <returns>TRUE, wenn die Datenbank vorhanden war und gelöscht wurde, andernfalls FALSE.</returns>
      <param name="existingConnection">Eine vorhandene Verbindung mit der Datenbank.</param>
    </member>
    <member name="M:System.Data.Entity.Database.Delete(System.String)">
      <summary>Löscht die Datenbank auf dem Datenbankserver, wenn sie vorhanden ist, und führt andernfalls keine Aktion aus. Die Verbindung mit der Datenbank wird wie in der Dokumentation für die <see cref="T:System.Data.Entity.DbContext" />-Klasse beschrieben mit dem angegebenen Datenbanknamen oder der angegebenen Verbindungszeichenfolge erstellt. </summary>
      <returns>TRUE, wenn die Datenbank vorhanden war und gelöscht wurde, andernfalls FALSE.</returns>
      <param name="nameOrConnectionString">Der Datenbankname oder eine Verbindungszeichenfolge für die Datenbank.</param>
    </member>
    <member name="M:System.Data.Entity.Database.Equals(System.Object)">
      <summary>Gibt zurück, ob die angegebene Datenbank und die aktuelle Datenbank gleich sind.</summary>
      <returns>TRUE, wenn die angegebene Datenbank und die aktuelle Datenbank gleich sind, andernfalls FALSE.</returns>
      <param name="obj">Die Datenbank, die mit dem aktuellen Objekt verglichen werden soll. </param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommand(System.String,System.Object[])">
      <summary>Führt den angegebenen DDL-/DML-Befehl für die Datenbank aus. </summary>
      <returns>Das nach Ausführen des Befehls von der Datenbank zurückgegebene Ergebnis.</returns>
      <param name="sql">Die Befehlszeichenfolge.</param>
      <param name="parameters">Die Parameter, die auf die Befehlszeichenfolge angewendet werden sollen.</param>
    </member>
    <member name="M:System.Data.Entity.Database.Exists">
      <summary>Überprüft, ob die Datenbank auf dem Server vorhanden ist. </summary>
      <returns>TRUE, wenn die Datenbank vorhanden ist, andernfalls FALSE.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Exists(System.Data.Common.DbConnection)">
      <summary>Überprüft, ob die Datenbank auf dem Server vorhanden ist. </summary>
      <returns>TRUE, wenn die Datenbank vorhanden ist, andernfalls FALSE.</returns>
      <param name="existingConnection">Eine vorhandene Verbindung mit der Datenbank.</param>
    </member>
    <member name="M:System.Data.Entity.Database.Exists(System.String)">
      <summary>Überprüft, ob die Datenbank auf dem Server vorhanden ist. Die Verbindung mit der Datenbank wird wie in der Dokumentation für die <see cref="T:System.Data.Entity.DbContext" />-Klasse beschrieben mit dem angegebenen Datenbanknamen oder der angegebenen Verbindungszeichenfolge erstellt. </summary>
      <returns>TRUE, wenn die Datenbank vorhanden ist, andernfalls FALSE.</returns>
      <param name="nameOrConnectionString">Der Datenbankname oder eine Verbindungszeichenfolge für die Datenbank.</param>
    </member>
    <member name="M:System.Data.Entity.Database.GetHashCode">
      <summary>Gibt die Hashfunktion für die angegebene Datenbank zurück.</summary>
      <returns>Die Hashfunktion für die angegebene Datenbank.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.GetType">
      <summary>Ruft den Typ für die aktuelle Datenbank ab.</summary>
      <returns>Der Typ für die aktuelle Datenbank.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Initialize(System.Boolean)">
      <summary>Führt den registrierten <see cref="T:System.Data.Entity.IDatabaseInitializer`1" /> für diesen Kontext aus.  Wenn der Parameter <paramref name="force" /> auf TRUE festgelegt ist, wird der Initialisierer unabhängig davon ausgeführt, ob er zuvor ausgeführt wurde.  Dies kann hilfreich sein, wenn eine Datenbank gelöscht wird, während eine Anwendung ausgeführt wird, und neu initialisiert werden muss. </summary>
      <param name="force">Wenn auf TRUE festgelegt, wird der Initialisierer ausgeführt, auch wenn er bereits ausgeführt wurde.</param>
    </member>
    <member name="M:System.Data.Entity.Database.SetInitializer``1(System.Data.Entity.IDatabaseInitializer{``0})">
      <summary>Ruft die Datenbankinitialisierungsstrategie ab oder legt sie fest Die Datenbankinitialisierungsstrategie wird aufgerufen, wenn die <see cref="T:System.Data.Entity.DbContext" />-Instanz anhand eines <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" /> initialisiert wird.  </summary>
      <param name="strategy">Die Strategie.</param>
      <typeparam name="TContext">Der Typ des Kontexts.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Database.SqlQuery``1(System.String,System.Object[])">
      <summary>Erstellt eine unformatierte SQL-Abfrage, die Elemente des angegebenen generischen Typs zurückgibt. Der Typ kann jeder Typ sein, der Eigenschaften aufweist, die mit den Namen der von der Abfrage zurückgegebenen Spalten übereinstimmen, oder es kann ein einfacher primitiver Typ sein. </summary>
      <returns>Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />-Objekt, das die Abfrage ausführt, wenn es aufgelistet wird.</returns>
      <param name="sql">Die SQL-Abfragezeichenfolge.</param>
      <param name="parameters">Die Parameter, die auf die SQL-Abfragezeichenfolge angewendet werden sollen.</param>
      <typeparam name="TElement">Der Typ des von der Abfrage zurückgegebenen Objekts.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Database.SqlQuery(System.Type,System.String,System.Object[])">
      <summary>Erstellt eine unformatierte SQL-Abfrage, die Elemente des angegebenen Typs zurückgibt. Der Typ kann jeder Typ sein, der Eigenschaften aufweist, die mit den Namen der von der Abfrage zurückgegebenen Spalten übereinstimmen, oder es kann ein einfacher primitiver Typ sein. </summary>
      <returns>Ein <see cref="T:System.Collections.IEnumerable" />-Objekt, das die Abfrage ausführt, wenn es aufgelistet wird.</returns>
      <param name="elementType">Der Typ des von der Abfrage zurückgegebenen Objekts.</param>
      <param name="sql">Die SQL-Abfragezeichenfolge.</param>
      <param name="parameters">Die Parameter, die auf die SQL-Abfragezeichenfolge angewendet werden sollen.</param>
    </member>
    <member name="M:System.Data.Entity.Database.ToString">
      <summary>Gibt eine Zeichenfolgendarstellung der Datenbank zurück.</summary>
      <returns>Eine Zeichenfolgendarstellung der Datenbank.</returns>
    </member>
    <member name="T:System.Data.Entity.DbContext">
      <summary>Stellt Funktionen bereit, mit denen Entitätsdaten abgefragt und als Objekte bearbeitet werden können.</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor">
      <summary>Erstellt eine neue Kontextinstanz mit Konventionen zum Erstellen des Namens der Datenbank, mit der eine Verbindung hergestellt wird.  Konventionsgemäß ist der Name der vollständige Name (Namespacename + Klassenname) der abgeleiteten Kontextklasse. Weitere Informationen darüber, wie auf diese Weise eine Verbindung erstellt wird, finden Sie im Hinweisabschnitt für <see cref="T:System.Data.Entity.DbContext" />. </summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Common.DbConnection,System.Boolean)">
      <summary>Erstellt eine neue Kontextinstanz mithilfe der vorhandenen Verbindung zum Herstellen einer Verbindung mit einer Datenbank. Die Verbindung wird nicht verworfen, wenn der Kontext verworfen wird. </summary>
      <param name="existingConnection">Eine vorhandene Verbindung, die für den neuen Kontext verwendet werden soll.</param>
      <param name="contextOwnsConnection">Mit TRUE wird die Verbindung verworfen, wenn der Kontext verworfen wird, andernfalls muss der Aufrufer die Verbindung verwerfen.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.DbCompiledModel,System.Boolean)">
      <summary>Erstellt mithilfe der vorhandenen Verbindung zum Herstellen einer Verbindung mit einer Datenbank eine neue Kontextinstanz und initialisiert sie anhand des angegebenen Modells. Die Verbindung wird nicht verworfen, wenn der Kontext verworfen wird. </summary>
      <param name="existingConnection">Eine vorhandene Verbindung, die für den neuen Kontext verwendet werden soll.</param>
      <param name="model">Das Modell, das diesen Kontext unterstützt.</param>
      <param name="contextOwnsConnection">Mit TRUE wird die Verbindung verworfen, wenn der Kontext verworfen wird, andernfalls muss der Aufrufer die Verbindung verwerfen.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Entity.Infrastructure.DbCompiledModel)">
      <summary>Erstellt mit Konventionen zum Erstellen des Namens der Datenbank, mit der eine Verbindung hergestellt wird, eine neue Kontextinstanz und initialisiert sie anhand des angegebenen Modells. Konventionsgemäß ist der Name der vollständige Name (Namespacename + Klassenname) der abgeleiteten Kontextklasse. Weitere Informationen darüber, wie auf diese Weise eine Verbindung erstellt wird, finden Sie im Hinweisabschnitt für <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <param name="model">Das Modell, das diesen Kontext unterstützt.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Objects.ObjectContext,System.Boolean)">
      <summary>Erstellt eine neue Kontextinstanz um einen vorhandenen <see cref="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext" />.  </summary>
      <param name="objectContext">Ein vorhandener <see cref="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext" /> zum Umschließen des neuen Kontexts.</param>
      <param name="dbContextOwnsObjectContext">Wenn auf TRUE festgelegt, wird der <see cref="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext" /> verworfen, wenn der <see cref="T:System.Data.Entity.DbContext" /> verworfen wird. Andernfalls muss der Aufrufer die Verbindung verwerfen.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.String)">
      <summary>Erstellt eine neue Kontextinstanz mit der angegebenen Zeichenfolge als Name oder Verbindungszeichenfolge für die Datenbank, mit der eine Verbindung hergestellt wird. Weitere Informationen darüber, wie auf diese Weise eine Verbindung erstellt wird, finden Sie im Hinweisabschnitt für <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <param name="nameOrConnectionString">Entweder der Datenbankname oder eine Verbindungszeichenfolge.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.String,System.Data.Entity.Infrastructure.DbCompiledModel)">
      <summary>Erstellt mit der angegebenen Zeichenfolge als Name oder Verbindungszeichenfolge für die Datenbank, mit der eine Verbindung hergestellt wird, eine neue Kontextinstanz und initialisiert sie anhand des angegebenen Modells. Weitere Informationen darüber, wie auf diese Weise eine Verbindung erstellt wird, finden Sie im Hinweisabschnitt für <see cref="T:System.Data.Entity.DbContext" />. </summary>
      <param name="nameOrConnectionString">Entweder der Datenbankname oder eine Verbindungszeichenfolge.</param>
      <param name="model">Das Modell, das diesen Kontext unterstützt.</param>
    </member>
    <member name="P:System.Data.Entity.DbContext.ChangeTracker">
      <summary>Bietet Zugriff auf Funktionen des Kontexts, die Änderungsnachverfolgung von Entitäten behandeln. </summary>
      <returns>Ein Objekt für den Zugriff auf Funktionen, die Änderungsnachverfolgung behandeln.</returns>
    </member>
    <member name="P:System.Data.Entity.DbContext.Configuration">
      <summary>Bietet Zugriff auf Konfigurationsoptionen für den Kontext. </summary>
      <returns>Ein Objekt, das für den Zugriff auf Konfigurationsoptionen verwendet wird.</returns>
    </member>
    <member name="P:System.Data.Entity.DbContext.Database">
      <summary>Erstellt eine Datenbankinstanz für diesen Kontext und ermöglicht es Ihnen, für die zugrunde liegende Datenbank Überprüfungen auf Erstellung, Löschen oder Vorhandensein auszuführen. </summary>
      <returns>Die erstellte Datenbank.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.Dispose">
      <summary>Ruft die geschützte Dispose-Methode auf. </summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.Dispose(System.Boolean)">
      <summary>Verwirft den Kontext. Der zugrunde liegende <see cref="T:System.Data.Objects.ObjectContext" /> wird auch verworfen, wenn er von diesem Kontext erstellt wurde oder wenn der Besitz beim Erstellen dieses Kontexts an diesen Kontext übergeben wurde. Die Verbindung mit der Datenbank (<see cref="T:System.Data.Common.DbConnection" />-Objekt) wird auch verworfen, wenn sie von diesem Kontext erstellt wurde oder wenn der Besitz beim Erstellen dieses Kontexts an diesen Kontext übergeben wurde. </summary>
      <param name="disposing">true, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben, false, um nur nicht verwaltete Ressourcen freizugeben.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.Entry(System.Object)">
      <summary>Ruft ein <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />-Objekt für die angegebene Entität ab, um Zugriff auf Informationen zur Entität und die Fähigkeit zum Ausführen von Aktionen für die Entität bereitzustellen. </summary>
      <returns>Ein Eintrag für die Entität.</returns>
      <param name="entity">Die Entität.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.Entry``1(``0)">
      <summary>Ruft ein <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />-Objekt für die angegebene Entität ab, um Zugriff auf Informationen zur Entität und die Fähigkeit zum Ausführen von Aktionen für die Entität bereitzustellen. </summary>
      <returns>Ein Eintrag für die Entität.</returns>
      <param name="entity">Die Entität.</param>
      <typeparam name="TEntity">Der Typ der Entität.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbContext.Equals(System.Object)">
      <summary>Gibt zurück, ob der angegebene Kontext und der aktuelle Kontext gleich sind.</summary>
      <returns>TRUE, wenn der angegebene Kontext und der aktuelle Kontext gleich sind, andernfalls FALSE.</returns>
      <param name="obj">Der Kontext, der mit dem aktuellen Objekt verglichen werden soll. </param>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetHashCode">
      <summary>Gibt die Hashfunktion für den angegebenen Kontext zurück.</summary>
      <returns>Die Hashfunktion für den angegebenen Kontext.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetType">
      <summary>Ruft den Typ für den aktuellen Kontext ab.</summary>
      <returns>Der Typ für den aktuellen Kontext.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetValidationErrors">
      <summary>Überprüft nachverfolgte Entitäten und gibt eine Auflistung von <see cref="T:System.Data.Entity.Validation.DbEntityValidationResult" /> zurück, die Validierungsergebnisse enthält. </summary>
      <returns>Eine Auflistung von Validierungsergebnissen für ungültige Entitäten. Die Auflistung ist nie NULL, und sie darf keine NULL-Werte oder Ergebnisse für gültige Entitäten enthalten. </returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
      <summary>Diese Methode wird aufgerufen, wenn das Modell für einen abgeleiteten Kontext initialisiert wurde, jedoch bevor das Modell gesperrt und zum Initialisieren des Kontexts verwendet wurde.  Die Standardimplementierung dieser Methode führt keine Aktion aus. Sie kann jedoch in einer abgeleiteten Klasse überschrieben werden, damit das Modell weiter konfiguriert werden kann, bevor es gesperrt wird. </summary>
      <param name="modelBuilder">Der Generator, der das Modell für den zu erstellenden Kontext definiert.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.SaveChanges">
      <summary>Speichert alle in diesem Kontext vorgenommenen Änderungen in der zugrunde liegenden Datenbank. </summary>
      <returns>Die Anzahl der Objekte, die in die zugrunde liegende Datenbank geschrieben werden.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.Set``1">
      <summary>Gibt ein <see cref="T:System.Data.Entity.DbSet" /> für den angegebenen Typ zurück. CRUD-Vorgänge können so für die angegebene Entität im Kontext ausgeführt werden. </summary>
      <returns>Eine <see cref="T:System.Data.Entity.DbSet" />-Instanz für den angegebenen Entitätstyp.</returns>
      <typeparam name="TEntity">Der Entitätstyp, für den eine Menge zurückgegeben werden soll.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbContext.Set(System.Type)">
      <summary>Gibt ein <see cref="T:System.Data.Entity.DbSet" /> für den angegebenen Typ zurück. CRUD-Vorgänge können so für die angegebene Entität im Kontext ausgeführt werden. </summary>
      <returns>Ein <see cref="T:System.Data.Entity.DbSet" /> für den angegebenen Entitätstyp.</returns>
      <param name="entityType">Der Entitätstyp, für den eine Menge zurückgegeben werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.ShouldValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry)">
      <summary>Erweiterungspunkt, der es dem Benutzer ermöglicht, das Standardverhalten, mit dem nur Entitäten mit dem Status Added und Modified überprüft werden, zu überschreiben. </summary>
      <returns>TRUE, um die Validierung fortzusetzen, andernfalls FALSE.</returns>
      <param name="entityEntry">
        <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />-Instanz, die überprüft werden soll.</param>
    </member>
    <member name="P:System.Data.Entity.DbContext.System#Data#Entity#Infrastructure#IObjectContextAdapter#ObjectContext">
      <summary>Gibt den Entity Framework-<see cref="T:System.Data.Objects.ObjectContext" /> zurück, der diesem Kontext zugrunde liegt.</summary>
      <returns>Gibt <see cref="T:System.Data.Objects.ObjectContext" /> zurück.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.ToString">
      <summary>Gibt eine Zeichenfolgendarstellung des Kontexts zurück.</summary>
      <returns>Eine Zeichenfolgendarstellung des Kontexts.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})">
      <summary>Erweiterungspunkt, der es dem Benutzer ermöglicht, die Validierung einer Entität anzupassen oder Validierungsergebnisse herauszufiltern. Wird von <see cref="M:System.Data.Entity.DbContext.GetValidationErrors" /> aufgerufen. </summary>
      <returns>Ergebnis der Entitätsvalidierung. Möglicherweise NULL, wenn überschrieben.</returns>
      <param name="entityEntry">DbEntityEntry-Instanz, die überprüft werden soll.</param>
      <param name="items">Benutzerdefiniertes Wörterbuch mit zusätzlichen Informationen für die benutzerdefinierte Validierung. Es wird an <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" /> übergeben und als <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.Items" /> verfügbar gemacht. Dieser Parameter ist optional und kann NULL sein.</param>
    </member>
    <member name="T:System.Data.Entity.DbExtensions">
      <summary>Enthält einen Satz von Erweiterungsmethoden für häufige Aufgaben.</summary>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.AsNoTracking(System.Linq.IQueryable)">
      <summary>Gibt eine neue Abfrage zurück, wobei die zurückgegebenen Entitäten nicht im <see cref="T:System.Data.Entity.DbContext" /> oder <see cref="T:System.Data.Objects.ObjectContext" /> zwischengespeichert werden. </summary>
      <returns>Eine neue Abfrage mit angewendetem NoTracking oder die Quellabfrage, wenn NoTracking nicht unterstützt wird.</returns>
      <param name="source">Die Quellabfrage.</param>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.AsNoTracking``1(System.Linq.IQueryable{``0})">
      <summary>Gibt eine neue Abfrage zurück, wobei die zurückgegebenen Entitäten nicht im <see cref="T:System.Data.Entity.DbContext" /> oder <see cref="T:System.Data.Objects.ObjectContext" /> zwischengespeichert werden. </summary>
      <returns>Eine neue Abfrage mit angewendetem NoTracking oder die Quellabfrage, wenn NoTracking nicht unterstützt wird.</returns>
      <param name="source">Die Quellabfrage.</param>
      <typeparam name="T">Der Elementtyp.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.Include(System.Linq.IQueryable,System.String)">
      <summary>Gibt die verbundenen Objekte an, die in die Abfrageergebnisse eingeschlossen werden sollen.</summary>
      <returns>Ein neues IQueryable mit dem definierten Abfragepfad.</returns>
      <param name="source">Das Quell-IQueryable, für das Include aufgerufen werden soll.</param>
      <param name="path">Die durch Punkte getrennte Liste verbundener Objekte, die in den Abfrageergebnissen zurückgegeben werden sollen.</param>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Gibt die verbundenen Objekte an, die in die Abfrageergebnisse eingeschlossen werden sollen.</summary>
      <returns>Ein neues IQueryable von T mit dem definierten Abfragepfad.</returns>
      <param name="source">Das Quell-IQueryable, für das Include aufgerufen werden soll.</param>
      <param name="path">Ein Lambdaausdruck, der den einzuschließenden Pfad darstellt.</param>
      <typeparam name="T">Der Typ der abgefragten Entität.</typeparam>
      <typeparam name="TProperty">Der Typ der Navigationseigenschaft, die eingeschlossen wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.Include``1(System.Linq.IQueryable{``0},System.String)">
      <summary>Gibt die verbundenen Objekte an, die in die Abfrageergebnisse eingeschlossen werden sollen.</summary>
      <returns>Ein neues IQueryable von T mit dem definierten Abfragepfad.</returns>
      <param name="source">Das Quell-IQueryable, für das Include aufgerufen werden soll.</param>
      <param name="path">Die durch Punkte getrennte Liste verbundener Objekte, die in den Abfrageergebnissen zurückgegeben werden sollen.</param>
      <typeparam name="T">Der Typ der abgefragten Entität.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.Load(System.Linq.IQueryable)">
      <summary>Eine Erweiterungsmethode für IQueryable, die die Ergebnisse der Abfrage auflistet. Dies entspricht dem Aufruf von ToList ohne Erstellen der Liste. </summary>
      <param name="source">Die Quellabfrage.</param>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.ToBindingList``1(System.Collections.ObjectModel.ObservableCollection{``0})">
      <summary> Gibt eine <see cref="T:System.ComponentModel.BindingList`1" />-Implementierung zurück, die mit der angegebenen <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> synchron bleibt. </summary>
      <returns>Die Bindungsliste.</returns>
      <param name="source">Die Auflistung, mit der die Bindungsliste synchron bleibt.</param>
      <typeparam name="T">Der Elementtyp.</typeparam>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilder">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" /> wird verwendet, um einem Datenbankschema CLR-Klassen zuzuordnen. Dieser codezentrierte Ansatz zum Erstellen eines Entity Data Model (EDM) wird als Code First bezeichnet. </summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.DbModelBuilder" />-Klasse. Zum Ermitteln des ursprünglichen Modells wird der Satz der Konventionen in der letzten Version des Entity Framework verwendet, die auf dem Computer installiert ist.  </summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.#ctor(System.Data.Entity.DbModelBuilderVersion)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.DbModelBuilder" />-Klasse, die einen bestimmten Satz von Konventionen verwendet, um das ursprüngliche Modell zu ermitteln. </summary>
      <param name="modelBuilderVersion">Die Version von Konventionen, die verwendet werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Build(System.Data.Common.DbConnection)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Infrastructure.DbModel" /> auf Grundlage der Konfiguration, die mit diesem Generator ausgeführt wurde. Die Verbindung wird verwendet, um den verwendeten Datenbankanbieter zu bestimmen, da sich dies auf die Datenbankebene des generierten Modells auswirkt. </summary>
      <returns>Das Modell, das erstellt wurde.</returns>
      <param name="providerConnection">Die Verbindung, die zum Bestimmen der Anbieterinformationen verwendet werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Build(System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Infrastructure.DbModel" /> auf Grundlage der Konfiguration, die mit diesem Generator ausgeführt wurde. Anbieterinformationen müssen angegeben werden, da sich dies auf die Datenbankebene des generierten Modells auswirkt. Für SqlClient lautet der invariante Name 'System.Data.SqlClient', und das Manifesttoken ist das Versionsjahr (z. B. '2005' oder '2008'). </summary>
      <returns>Das Modell, das erstellt wurde.</returns>
      <param name="providerInfo">Der Datenbankanbieter, für den das Modell verwendet wird.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.ComplexType``1">
      <summary>Registriert einen Typ als komplexen Typ im Modell und gibt ein Objekt zurück, das zum Konfigurieren des komplexen Typs verwendet werden kann. Diese Methode kann mehrmals für den gleichen Typ aufgerufen werden, um mehrere Zeilen der Konfiguration auszuführen. </summary>
      <returns>Das Konfigurationsobjekt für den angegebenen komplexen Typ.</returns>
      <typeparam name="TComplexType">Der Typ, der registriert oder konfiguriert werden soll.</typeparam>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilder.Configurations">
      <summary>Ruft den <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar" /> für diesen <see cref="T:System.Data.Entity.DbModelBuilder" /> ab.  Die Registrierungsstelle ermöglicht das Registrieren von abgeleiteten Konfigurationen für Entitäten und komplexe Typen bei dem Generator. </summary>
      <returns>Die Konfiguration für den <see cref="T:System.Data.Entity.DbModelBuilder" />.</returns>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilder.Conventions">
      <summary>Bietet Zugriff auf die Einstellungen des <see cref="T:System.Data.Entity.DbModelBuilder" />, die Konventionen behandeln. </summary>
      <returns>Der Zugriff auf die Einstellung.</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Entity``1">
      <summary>Registriert einen Entitätstyp als Teil des Modells und gibt ein Objekt zurück, das zum Konfigurieren der Entität verwendet werden kann. Diese Methode kann mehrmals für die gleiche Entität aufgerufen werden, um mehrere Zeilen der Konfiguration auszuführen. </summary>
      <returns>Das Konfigurationsobjekt für den angegebenen Entitätstyp.</returns>
      <typeparam name="TEntityType">Der Typ, der registriert oder konfiguriert werden soll.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Equals(System.Object)">
      <summary>Gibt zurück, ob der angegebene Modell-Generator und der aktuelle Modell-Generator gleich sind.</summary>
      <returns>TRUE, wenn der angegebene Modell-Generator und der aktuelle Modell-Generator gleich sind, andernfalls FALSE.</returns>
      <param name="obj">Der Modell-Generator, der mit dem aktuellen Objekt verglichen werden soll. </param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.GetHashCode">
      <summary>Gibt die Hashfunktion für den angegebenen Modell-Generator zurück.</summary>
      <returns>Die Hashfunktion für den angegebenen Modell-Generator.</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.GetType">
      <summary>Ruft den Typ für den aktuellen Modell-Generator ab.</summary>
      <returns>Der Typ für den aktuellen Modell-Generator.</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Ignore``1">
      <summary>Schließt einen Typ aus dem Modell aus. Wird verwendet, um Typen aus dem Modell zu entfernen, die während der Ermittlung des ursprünglichen Modells konventionsgemäß hinzugefügt wurden. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.DbModelBuilder" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <typeparam name="T">Der auszuschließende Typ.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Ignore(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>Schließt einen oder mehrere Typen aus dem Modell aus. Wird verwendet, um Typen aus dem Modell zu entfernen, die während der Ermittlung des ursprünglichen Modells konventionsgemäß hinzugefügt wurden. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.DbModelBuilder" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="types">Die Typen, die aus dem Modell ausgeschlossen werden sollen.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.ToString">
      <summary>Gibt eine Zeichenfolgendarstellung des Modell-Generators zurück.</summary>
      <returns>Eine Zeichenfolgendarstellung des Modell-Generators.</returns>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilderVersion">
      <summary>Ein Wert aus dieser Enumeration kann direkt für die <see cref="T:System.Data.Entity.DbModelBuilder" />-Klasse bereitgestellt werden oder im <see cref="T:System.Data.Entity.DbModelBuilderVersionAttribute" /> verwendet werden, das auf eine von <see cref="T:System.Data.Entity.DbContext" /> abgeleitete Klasse angewendet wird. Der verwendete Wert legt fest, welche Version der <see cref="T:System.Data.Entity.DbContext" />-Konvention und der <see cref="T:System.Data.Entity.DbModelBuilder" />-Konvention beim Erstellen eines Modells aus Code verwendet werden soll. </summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.Latest">
      <summary>Gibt an, dass die neueste Version der <see cref="T:System.Data.Entity.DbModelBuilder" />-Konvention und der <see cref="T:System.Data.Entity.DbContext" />-Konvention verwendet werden soll. </summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V4_1">
      <summary>Gibt an, dass die mit Entity Framework 4.1 gelieferte Version der <see cref="T:System.Data.Entity.DbModelBuilder" />-Konvention und der <see cref="T:System.Data.Entity.DbContext" />-Konvention verwendet werden soll. </summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V5_0_Net4">
      <summary>Gibt an, dass die mit Entity Framework 5.0 gelieferte Version der <see cref="T:System.Data.Entity.DbModelBuilder" />-Konvention und der <see cref="T:System.Data.Entity.DbContext" />-Konvention verwendet werden soll, wenn .NET Framework 4 als Zielversion verwendet wird. </summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V5_0">
      <summary>Gibt an, dass die mit Entity Framework 5.0 gelieferte Version der <see cref="T:System.Data.Entity.DbModelBuilder" />-Konvention und der <see cref="T:System.Data.Entity.DbContext" />-Konvention verwendet werden soll. </summary>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilderVersionAttribute">
      <summary>Dieses Attribut kann auf eine von <see cref="T:System.Data.Entity.DbContext" /> abgeleitete Klasse angewendet werden, um festzulegen, welche Version der <see cref="T:System.Data.Entity.DbContext" />-Konvention und der <see cref="T:System.Data.Entity.DbModelBuilder" /> Konvention beim Erstellen eines Modells aus Code verwendet werden soll. Ausführliche Informationen über <see cref="T:System.Data.Entity.DbModelBuilder" />-Versionen finden Sie in den Ausführungen zur <see cref="T:System.Data.Entity.DbModelBuilderVersion" />-Enumeration. </summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilderVersionAttribute.#ctor(System.Data.Entity.DbModelBuilderVersion)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.DbModelBuilderVersionAttribute" />-Klasse. </summary>
      <param name="version">Die Version der <see cref="T:System.Data.Entity.DbModelBuilder" />-Konventionen, die verwendet werden soll.</param>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilderVersionAttribute.Version">
      <summary>Ruft die Version der <see cref="T:System.Data.Entity.DbModelBuilder" />-Konventionen ab. </summary>
      <returns>Die Version der <see cref="T:System.Data.Entity.DbModelBuilder" />-Konventionen.</returns>
    </member>
    <member name="T:System.Data.Entity.DbSet">
      <summary>Stellt eine Entitätenmenge dar, die für Erstellungs-, Lese-, Update- und Löschvorgänge verwendet wird. Eine nicht generische Version von <see cref="T:System.Data.Entity.DbSet`1" />, die verwendet werden kann, wenn der Typ der Entität zur Erstellungszeit nicht bekannt ist. </summary>
    </member>
    <member name="M:System.Data.Entity.DbSet.Add(System.Object)">
      <summary>Fügt die angegebene Entität dem Kontext im <see cref="F:System.Data.EntityState.Added" />-Zustand hinzu. Wenn die Änderungen gespeichert werden, werden die Entitäten mit dem Zustand Added in die Datenbank eingefügt. Nachdem die Änderungen gespeichert wurden, wird der Objektzustand in <see cref="F:System.Data.EntityState.Unchanged" /> geändert.</summary>
      <returns>Die Entität.</returns>
      <param name="entity">Die Entität, die hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Attach(System.Object)">
      <summary>Fügt die angegebene Entität an den Kontext in <see cref="F:System.Data.EntityState.Unchanged" /> an.</summary>
      <returns>Die Entität.</returns>
      <param name="entity">Die Entität, die angefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Cast``1">
      <summary>Gibt das entsprechende generische <see cref="T:System.Data.Entity.DbSet`1" />-Objekt zurück. </summary>
      <returns>Das generische Mengenobjekt.</returns>
      <typeparam name="TEntity">Der Basistyp des Objekts, das in das generische Mengenobjekt umgewandelt werden soll.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbSet.Create">
      <summary>Erstellt eine neue Instanz einer Entität für den Typ dieser Menge. Diese Instanz wird der Menge nicht hinzugefügt und nicht an sie angefügt. Die zurückgegebene Instanz ist ein Proxy, wenn der zugrunde liegende Kontext zum Erstellen von Proxys konfiguriert ist und der Entitätstyp die Anforderungen zum Erstellen eines Proxys erfüllt. </summary>
      <returns>Die Entitätsinstanz, die möglicherweise ein Proxy ist.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.Create(System.Type)">
      <summary>Erstellt für den Typ dieser Menge oder für einen vom Typ dieser Menge abgeleiteten Typ eine neue Instanz einer Entität. Diese Instanz wird der Menge nicht hinzugefügt und nicht an sie angefügt. Die zurückgegebene Instanz ist ein Proxy, wenn der zugrunde liegende Kontext zum Erstellen von Proxys konfiguriert ist und der Entitätstyp die Anforderungen zum Erstellen eines Proxys erfüllt. </summary>
      <returns>Die Entitätsinstanz, die möglicherweise ein Proxy ist. </returns>
      <param name="derivedEntityType">Der abgeleitete Entitätstyp.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Equals(System.Object)">
      <summary>Gibt zurück, ob die angegebene Menge gleich der aktuelle Menge ist.</summary>
      <returns>TRUE, wenn das angegebene Objekt gleich der aktuellen Menge ist, andernfalls FALSE.</returns>
      <param name="obj">Die mit dem aktuellen Objekt zu vergleichende Menge. </param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Find(System.Object[])">
      <summary>Verwendet den Primärschlüsselwert, um eine vom Kontext nachverfolgte Entität zu suchen. Wenn die Entität nicht im Kontext enthalten ist, wird eine Abfrage ausgeführt und anhand der Daten in der Datenquelle ausgewertet. Wenn die Entität im Kontext oder in der Datenquelle nicht gefunden wird, wird NULL zurückgegeben. Durch den Suchvorgang werden auch Entitäten zurückgegeben, die dem Kontext zwar hinzugefügt, aber noch nicht in der Datenbank gespeichert wurden.</summary>
      <returns>Die gefundene Entität oder NULL.</returns>
      <param name="keyValues">Die Werte des Primärschlüssels für die gesuchte Entität.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.GetHashCode">
      <summary>Gibt die Hashfunktion für die angegebene Menge zurück.</summary>
      <returns>Die Hashfunktion für die angegebene Menge.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.GetType">
      <summary>Ruft den Typ für die aktuelle Menge ab.</summary>
      <returns>Der Typ für die aktuelle Menge.</returns>
    </member>
    <member name="P:System.Data.Entity.DbSet.Local">
      <summary>Gibt <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> zurück, die Entitäten aus der Menge darstellt, die derzeit vom Kontext nachverfolgt werden und nicht als Deleted gekennzeichnet sind. Der Zugriff auf die Local-Eigenschaft führt in keinem Fall dazu, dass eine Abfrage an die Datenbank gesendet wird. Diese Eigenschaft wird normalerweise nach dem Ausführen einer Abfrage verwendet.</summary>
      <returns>Die lokale Ansicht.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.Remove(System.Object)">
      <summary>Kennzeichnet die angegebene Entität als <see cref="F:System.Data.EntityState.Deleted" />. Nachdem die Änderungen gespeichert wurden, wird die Entität aus der Datenbank gelöscht. Vor dem Aufruf dieser Methode muss die Entität in einem anderen Zustand im Kontext vorhanden sein. </summary>
      <returns>Die Entität.</returns>
      <param name="entity">Die Entität, die entfernt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.SqlQuery(System.String,System.Object[])">
      <summary>Erstellt eine unformatierte SQL-Abfrage, die Entitäten in dieser Menge zurückgibt. Standardmäßig werden die zurückgegebenen Entitäten vom Kontext nachverfolgt. Diese Einstellung kann durch Aufruf von AsNoTracking für die von dieser Methode zurückgegebene <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> geändert werden. </summary>
      <returns>Ein <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery" />-Objekt, das die Abfrage ausführt, wenn es aufgelistet wird.</returns>
      <param name="sql">Die SQL-Abfragezeichenfolge.</param>
      <param name="parameters">Die Parameter, die auf die SQL-Abfragezeichenfolge angewendet werden sollen.</param>
    </member>
    <member name="T:System.Data.Entity.DbSet`1">
      <summary>Stellt eine typisierte Entitätenmenge dar, die für Erstellungs-, Lese-, Update- und Löschvorgänge verwendet wird. DbSet ist nicht öffentlich konstruierbar und kann nur von einer <see cref="T:System.Data.Entity.DbContext" />-Instanz aus erstellt werden. </summary>
      <typeparam name="TEntity">Der Typ, der die Menge definiert. Der Typ kann sowohl einem abgeleiteten als auch einem Basistyp entsprechen.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Add(`0)">
      <summary>Fügt die angegebene Entität dem Kontext im <see cref="F:System.Data.EntityState.Added" />-Zustand hinzu. Wenn die Änderungen gespeichert werden, werden die Entitäten mit dem Zustand Added in die Datenbank eingefügt. Nachdem die Änderungen gespeichert wurden, wird der Objektzustand in <see cref="F:System.Data.EntityState.Unchanged" /> geändert.</summary>
      <returns>Gibt <see cref="{0}" /> zurück.</returns>
      <param name="entity">Die Entität, die hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Attach(`0)">
      <summary>Fügt die angegebene Entität an den Kontext in <see cref="F:System.Data.EntityState.Unchanged" /> an.</summary>
      <returns>Gibt <see cref="{0}" /> zurück.</returns>
      <param name="entity">Die Entität, die angefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Create``1">
      <summary>Erstellt für den Typ dieser Menge oder für einen vom Typ dieser Menge abgeleiteten Typ eine neue Instanz einer Entität. Diese Instanz wird der Menge nicht hinzugefügt und nicht an sie angefügt. Die zurückgegebene Instanz ist ein Proxy, wenn der zugrunde liegende Kontext zum Erstellen von Proxys konfiguriert ist und der Entitätstyp die Anforderungen zum Erstellen eines Proxys erfüllt. </summary>
      <returns>Gibt <see cref="{0}" /> zurück.</returns>
      <typeparam name="TDerivedEntity">Der Typ, der die Menge definiert.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Create">
      <summary>Erstellt eine neue Instanz einer Entität für den Typ dieser Menge. Diese Instanz wird der Menge nicht hinzugefügt und nicht an sie angefügt. Die zurückgegebene Instanz ist ein Proxy, wenn der zugrunde liegende Kontext zum Erstellen von Proxys konfiguriert ist und der Entitätstyp die Anforderungen zum Erstellen eines Proxys erfüllt. </summary>
      <returns>Gibt <see cref="{0}" /> zurück.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Equals(System.Object)">
      <summary>Gibt zurück, ob das angegebene Objekt gleich der aktuellen Menge ist.</summary>
      <returns>TRUE, wenn die angegebene Menge gleich der aktuellen Menge ist, andernfalls FALSE.</returns>
      <param name="obj">Die mit dem aktuellen Objekt zu vergleichende Menge. </param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Find(System.Object[])">
      <summary>Verwendet den Primärschlüsselwert, um eine vom Kontext nachverfolgte Entität zu suchen. Wenn die Entität nicht im Kontext enthalten ist, wird eine Abfrage ausgeführt und anhand der Daten in der Datenquelle ausgewertet. Wenn die Entität im Kontext oder in der Datenquelle nicht gefunden wird, wird NULL zurückgegeben. Durch den Suchvorgang werden auch Entitäten zurückgegeben, die dem Kontext zwar hinzugefügt, aber noch nicht in der Datenbank gespeichert wurden.</summary>
      <returns>Gibt <see cref="T:System.Boolean" /> zurück.</returns>
      <param name="keyValues">Die Werte des Primärschlüssels für die gesuchte Entität.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.GetHashCode">
      <summary>Gibt die Hashfunktion für die angegebene Menge zurück.</summary>
      <returns>Die Hashfunktion für die angegebene Menge.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.GetType">
      <summary>Ruft den Typ für die aktuelle Menge ab.</summary>
      <returns>Der Typ für die aktuelle Menge.</returns>
    </member>
    <member name="P:System.Data.Entity.DbSet`1.Local">
      <summary>Gibt <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> zurück, die Entitäten aus der Menge darstellt, die derzeit vom Kontext nachverfolgt werden und nicht als Deleted gekennzeichnet sind. Der Zugriff auf die Local-Eigenschaft führt in keinem Fall dazu, dass eine Abfrage an die Datenbank gesendet wird. Diese Eigenschaft wird normalerweise nach dem Ausführen einer Abfrage verwendet.</summary>
      <returns>Die lokale Ansicht.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.op_Implicit(System.Data.Entity.DbSet{`0})~System.Data.Entity.DbSet">
      <summary>Gibt das entsprechende nicht generische <see cref="T:System.Data.Entity.DbSet" /> zurück.</summary>
      <returns>Gibt das nicht generische Mengenobjekt <see cref="T:System.Data.Entity.DbSet" /> zurück.</returns>
      <param name="entry">Der Eintrag, für den das entsprechende nicht generische <see cref="T:System.Data.Entity.DbSet" /> zurückgegeben werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Remove(`0)">
      <summary>Kennzeichnet die angegebene Entität als <see cref="F:System.Data.EntityState.Deleted" />. Nachdem die Änderungen gespeichert wurden, wird die Entität aus der Datenbank gelöscht. Vor dem Aufruf dieser Methode muss die Entität in einem anderen Zustand im Kontext vorhanden sein. </summary>
      <returns>Gibt <see cref="T:System.Data.Entity.DbSet" /> zurück.</returns>
      <param name="entity">Die Entität, die entfernt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])">
      <summary>Erstellt eine unformatierte SQL-Abfrage, die Entitäten in dieser Menge zurückgibt. Standardmäßig werden die zurückgegebenen Entitäten vom Kontext nachverfolgt. Diese Einstellung kann durch Aufruf von AsNoTracking für die von dieser Methode zurückgegebene <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> geändert werden. </summary>
      <returns>Ein <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" />-Objekt, das die Abfrage ausführt, wenn es aufgelistet wird.</returns>
      <param name="sql">Die SQL-Abfragezeichenfolge.</param>
      <param name="parameters">Die zurückgegebenen Entitäten weisen immer den Typ dieser Menge auf und nie einen abgeleiteten Typ. Wenn die abgefragten Tabellen möglicherweise Daten für andere Entitätstypen enthalten, muss die SQL-Abfrage entsprechend geschrieben werden, um sicherzustellen, dass nur Entitäten des richtigen Typs zurückgegeben werden.Die Parameter, die auf die SQL-Abfragezeichenfolge angewendet werden sollen.</param>
    </member>
    <member name="T:System.Data.Entity.DropCreateDatabaseAlways`1">
      <summary>Eine Implementierung von <see cref="T:System.Data.Entity.IDatabaseInitializer`1" />, die immer die Datenbank neu erstellt und optional neu mit Startwerten versieht, wenn ein Kontext zum ersten Mal in der Anwendungsdomäne verwendet wird. Zum Seeding der Datenbank erstellen Sie eine abgeleitete Klasse und überschreiben die Seed-Methode. </summary>
      <typeparam name="TContext">Der Typ des Kontexts.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.DropCreateDatabaseAlways`1" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.InitializeDatabase(`0)">
      <summary>Führt die Strategie zum Initialisieren der Datenbank für den angegebenen Kontext aus. </summary>
      <param name="context">Der Kontext.</param>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.Seed(`0)">
      <summary>Fügt beim Überschreiben dem Kontext Daten für das Seeding hinzu.  Bei der Standardimplementierung wird keine Aktion ausgeführt. </summary>
      <param name="context">Der Kontext für das Seeding.</param>
    </member>
    <member name="T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1">
      <summary>Eine Implementierung von <see cref="T:System.Data.Entity.IDatabaseInitializer`1" />, mit der die Datenbank nur dann gelöscht, neu erstellt und optional neu mit Startwerten versehen wird, wenn sich das Modell seit dem Erstellen der Datenbank geändert hat.  Dies erfolgt, indem beim Erstellen der Datenbank ein Hash des Speichermodells in die Datenbank geschrieben wird und dieser dann mit einem aus dem aktuellen Modell generierten Hash verglichen wird. Zum Seeding der Datenbank erstellen Sie eine abgeleitete Klasse und überschreiben die Seed-Methode. </summary>
      <typeparam name="TContext">Der Typ des Kontexts.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.InitializeDatabase(`0)">
      <summary>Führt die Strategie zum Initialisieren der Datenbank für den angegebenen Kontext aus. </summary>
      <param name="context">Der Kontext.</param>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.Seed(`0)">
      <summary>Eine Methode, die überschrieben werden soll, um dem Kontext tatsächlich Daten für das Seeding hinzuzufügen.  Bei der Standardimplementierung wird keine Aktion ausgeführt. </summary>
      <param name="context">Der Kontext für das Seeding.</param>
    </member>
    <member name="T:System.Data.Entity.IDatabaseInitializer`1">
      <summary>Definiert eine Methode für den Datenbankinitialisierer.</summary>
      <typeparam name="TContext">Der Typ des Kontexts.Dieser Typparameter ist kontravariant. Das heißt, es kann entweder der angegebene Typ oder ein weniger abgeleiteter Typ verwendet werden. Weitere Informationen zu Kovarianz und Kontravarianz finden Sie unter .</typeparam>
    </member>
    <member name="M:System.Data.Entity.IDatabaseInitializer`1.InitializeDatabase(`0)">
      <summary>Führt die Strategie zum Initialisieren der Datenbank für den angegebenen Kontext aus. </summary>
      <param name="context">Der Kontext.</param>
    </member>
    <member name="T:System.Data.Entity.IDbSet`1">
      <summary>Stellt die Auflistung aller Entitäten eines bestimmten Typs dar, die im Kontext vorhanden sind oder von der Datenbank abgefragt werden können. <see cref="T:System.Data.Entity.DbSet" /> ist eine konkrete Implementierung von <see cref="T:System.Data.Entity.IDbSet`1" />. </summary>
      <typeparam name="TEntity">Der Typ, der die Menge definiert.</typeparam>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Add(`0)">
      <summary>Fügt die angegebene Entität dem Kontext im <see cref="F:System.Data.EntityState.Added" />-Zustand hinzu. Wenn die Änderungen gespeichert werden, werden die Entitäten mit dem Zustand Added in die Datenbank eingefügt. Nachdem die Änderungen gespeichert wurden, wird der Objektzustand in <see cref="F:System.Data.EntityState.Unchanged" /> geändert.</summary>
      <returns>Gibt die Entität zurück.</returns>
      <param name="entity">Die Entität, die hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Attach(`0)">
      <summary>Fügt die angegebene Entität an den Kontext in <see cref="F:System.Data.EntityState.Unchanged" /> an.</summary>
      <returns>Gibt die Entität zurück.</returns>
      <param name="entity">Die Entität, die angefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Create">
      <summary>Erstellt eine neue Instanz einer Entität für den Typ dieser Menge. Diese Instanz wird der Menge nicht hinzugefügt und nicht an sie angefügt. Die zurückgegebene Instanz ist ein Proxy, wenn der zugrunde liegende Kontext zum Erstellen von Proxys konfiguriert ist und der Entitätstyp die Anforderungen zum Erstellen eines Proxys erfüllt. </summary>
      <returns>Gibt die Entitätsinstanz zurück, die möglicherweise ein Proxy ist. </returns>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Create``1">
      <summary>Erstellt für den Typ dieser Menge oder für einen vom Typ dieser Menge abgeleiteten Typ eine neue Instanz einer Entität. Diese Instanz wird der Menge nicht hinzugefügt und nicht an sie angefügt. Die zurückgegebene Instanz ist ein Proxy, wenn der zugrunde liegende Kontext zum Erstellen von Proxys konfiguriert ist und der Entitätstyp die Anforderungen zum Erstellen eines Proxys erfüllt. </summary>
      <returns>Gibt die Entitätsinstanz zurück, die möglicherweise ein Proxy ist.</returns>
      <typeparam name="TDerivedEntity">Der Typ der zu erstellenden Entität.</typeparam>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Find(System.Object[])">
      <summary>Verwendet den Primärschlüsselwert, um eine vom Kontext nachverfolgte Entität zu suchen. Wenn die Entität nicht im Kontext enthalten ist, wird eine Abfrage ausgeführt und anhand der Daten in der Datenquelle ausgewertet. Wenn die Entität im Kontext oder in der Datenquelle nicht gefunden wird, wird NULL zurückgegeben. Durch den Suchvorgang werden auch Entitäten zurückgegeben, die dem Kontext zwar hinzugefügt, aber noch nicht in der Datenbank gespeichert wurden.</summary>
      <returns>Gibt die gefundene Entität oder NULL zurück.</returns>
      <param name="keyValues">Die Werte des Primärschlüssels für die gesuchte Entität.</param>
    </member>
    <member name="P:System.Data.Entity.IDbSet`1.Local">
      <summary>Gibt <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> zurück, die Entitäten aus der Menge darstellt, die derzeit vom Kontext nachverfolgt werden und nicht als Deleted gekennzeichnet sind. Der Zugriff auf die Local-Eigenschaft führt in keinem Fall dazu, dass eine Abfrage an die Datenbank gesendet wird. Diese Eigenschaft wird normalerweise nach dem Ausführen einer Abfrage verwendet.</summary>
      <returns>Die lokale Ansicht.</returns>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Remove(`0)">
      <summary>Kennzeichnet die angegebene Entität als <see cref="F:System.Data.EntityState.Deleted" />. Nachdem die Änderungen gespeichert wurden, wird die Entität aus der Datenbank gelöscht. Vor dem Aufruf dieser Methode muss die Entität in einem anderen Zustand im Kontext vorhanden sein. </summary>
      <returns>Gibt die Entität zurück.</returns>
      <param name="entity">Die Entität, die entfernt werden soll.</param>
    </member>
    <member name="T:System.Data.Entity.MigrateDatabaseToLatestVersion`2">
      <summary>Eine IDatabaseInitializer-Implementierung, die Code First-Migrationen verwendet, um die Datenbank auf die neueste Migration zu aktualisieren.</summary>
      <typeparam name="TContext"></typeparam>
      <typeparam name="TMigrationsConfiguration"></typeparam>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor">
      <summary> Initialisiert eine neue Instanz der MigrateDatabaseToLatestVersion-Klasse.  </summary>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor(System.String)">
      <summary> Initialisiert eine neue Instanz der MigrateDatabaseToLatestVersion-Klasse, die eine bestimmte Verbindungszeichenfolge aus der Konfigurationsdatei verwendet, um zum Zweck der Migration eine Verbindung mit der Datenbank herzustellen. </summary>
      <param name="connectionStringName">Der Name der für die Migration zu verwendenden Verbindungszeichenfolge.</param>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.InitializeDatabase(`0)">
      <summary>Führt die Strategie zum Initialisieren der Datenbank für den angegebenen Kontext aus.</summary>
      <param name="context">Der Kontext.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbChangeTracker">
      <summary>Wird von der ChangeTracker-Methode von <see cref="T:System.Data.Entity.DbContext" /> zurückgegeben, um Zugriff auf Funktionen des Kontexts zu bieten, die mit der Änderungsnachverfolgung von Entitäten zusammenhängen. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.DetectChanges">
      <summary>Erkennt Änderungen, die an den Eigenschaften und Beziehungen von POCO-Entitäten vorgenommen wurden.  Beachten Sie, dass einige Typen von Entitäten (z. B. Änderungsnachverfolgungsproxys und von <see cref="T:System.Data.Objects.DataClasses.EntityObject" /> abgeleitete Entitäten) Änderungen automatisch melden und diese Methode normalerweise nicht für diese Typen von Entitäten aufgerufen werden muss. Beachten Sie außerdem, dass diese Methode normalerweise von vielen Methoden von <see cref="T:System.Data.Entity.DbContext" /> und den zugehörigen Klassen automatisch aufgerufen wird, sodass es selten erforderlich ist, diese Methode explizit aufzurufen. Jedoch empfiehlt es sich ggf., in der Regel aus Leistungsgründen, mit dem AutoDetectChangesEnabled-Flag von <see cref="P:System.Data.Entity.DbContext.Configuration" /> den automatischen Aufruf dieser Methode zu deaktivieren. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Entries">
      <summary>Ruft <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />-Objekte für alle von diesem Kontext nachverfolgten Entitäten ab. </summary>
      <returns>Die Einträge.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Entries``1">
      <summary>Ruft <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />-Objekte für alle Entitäten des angegebenen Typs ab, die von diesem Kontext nachverfolgt werden. </summary>
      <returns>Die Einträge.</returns>
      <typeparam name="TEntity">Der Typ der Entität.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Equals(System.Object)">
      <summary>Gibt zurück, ob die angegebene Nachverfolgung gleich der aktuellen Nachverfolgung ist.</summary>
      <returns>TRUE, wenn die angegebene Nachverfolgung und die aktuelle Nachverfolgung gleich sind, andernfalls FALSE.</returns>
      <param name="obj">Die Nachverfolgung, die mit dem aktuellen Objekt verglichen werden soll. </param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.GetHashCode">
      <summary>Gibt die Hashfunktion für die angegebene Nachverfolgung zurück.</summary>
      <returns>Die Hashfunktion für die angegebene Nachverfolgung.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.GetType">
      <summary>Ruft den Typ für die aktuelle Nachverfolgung ab.</summary>
      <returns>Der Typ für die aktuelle Nachverfolgung.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.ToString">
      <summary>Gibt eine Zeichenfolgendarstellung der Nachverfolgung zurück.</summary>
      <returns>Eine Zeichenfolgendarstellung der Nachverfolgung.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCollectionEntry">
      <summary>Eine nicht generische Version der <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" />-Klasse. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Cast``2">
      <summary>Gibt das entsprechende generische <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" />-Objekt zurück. </summary>
      <returns>Das entsprechende generische Objekt.</returns>
      <typeparam name="TEntity">Der Entitätstyp, für den der Member deklariert ist.</typeparam>
      <typeparam name="TElement">Der Typ des Auflistungselements.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.CurrentValue">
      <summary>Ruft den aktuellen Wert der Navigationseigenschaft ab oder legt ihn fest.  Der aktuelle Wert ist die Entität, auf die die Navigationseigenschaft verweist. </summary>
      <returns>Der aktuelle Wert.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.EntityEntry">
      <summary>Der <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />, zu dem diese Navigationseigenschaft gehört. </summary>
      <returns>Ein Eintrag für die Entität, die Besitzer dieser Navigationseigenschaft ist.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.IsLoaded">
      <summary>Ruft einen Wert ab, der angibt, ob die Auflistung von Entitäten aus der Datenbank geladen wurde. </summary>
      <returns>true, wenn die Auflistung geladen wurde, andernfalls false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Load">
      <summary>Lädt die Auflistung von Entitäten aus der Datenbank. Beachten Sie, dass Entitäten, die bereits im Kontext vorhanden sind, nicht mit Werten aus der Datenbank überschrieben werden. </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.Name">
      <summary>Ruft den Eigenschaftennamen ab. </summary>
      <returns>Der Eigenschaftenname.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Query">
      <summary>Gibt die Abfrage zurück, die zum Laden dieser Auflistung aus der Datenbank verwendet wird. Die zurückgegebene Abfrage kann mit LINQ geändert werden, um Daten zu filtern oder Vorgänge in der Datenbank auszuführen, z. B. die Anzahl von Entitäten der Auflistung in der Datenbank zu zählen, ohne sie zu laden. </summary>
      <returns>Eine Abfrage für die Auflistung.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2">
      <summary>Instanzen dieser Klasse werden von der <see cref="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection(System.String)" />-Methode von <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> zurückgegeben und ermöglichen das Ausführen von Vorgängen, z. B. das Laden, für die Auflistungsnavigationseigenschaften der Entität. </summary>
      <typeparam name="TEntity">Der Typ der Entität, zu der diese Eigenschaft gehört.</typeparam>
      <typeparam name="TElement">Der Typ des Elements in der Auflistung von Entitäten.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.CurrentValue">
      <summary>Ruft den aktuellen Wert der Navigationseigenschaft ab oder legt ihn fest.  Der aktuelle Wert ist die Entität, auf die die Navigationseigenschaft verweist. </summary>
      <returns>Der aktuelle Wert.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.EntityEntry">
      <summary>Der <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />, zu dem diese Navigationseigenschaft gehört. </summary>
      <returns>Ein Eintrag für die Entität, die Besitzer dieser Navigationseigenschaft ist.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.IsLoaded">
      <summary>Ruft einen Wert ab, der angibt, ob die Auflistung von Entitäten aus der Datenbank geladen wurde. </summary>
      <returns>true, wenn die Auflistung geladen wurde, andernfalls false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Load">
      <summary>Lädt die Auflistung von Entitäten aus der Datenbank. Beachten Sie, dass Entitäten, die bereits im Kontext vorhanden sind, nicht mit Werten aus der Datenbank überschrieben werden. </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Name">
      <summary>Ruft den Eigenschaftennamen ab. </summary>
      <returns>Der Eigenschaftenname.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbCollectionEntry{`0,`1})~System.Data.Entity.Infrastructure.DbCollectionEntry">
      <summary>Gibt eine neue Instanz der nicht generischen <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />-Klasse für die durch dieses Objekt dargestellte Navigationseigenschaft zurück. </summary>
      <returns>Gibt <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" /> zurück.</returns>
      <param name="entry">Der Eintrag.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Query">
      <summary>Gibt die Abfrage zurück, die zum Laden dieser Auflistung aus der Datenbank verwendet wird. Die zurückgegebene Abfrage kann mit LINQ geändert werden, um Daten zu filtern oder Vorgänge in der Datenbank auszuführen, z. B. die Anzahl von Entitäten der Auflistung in der Datenbank zu zählen, ohne sie zu laden. </summary>
      <returns>Eine Abfrage für die Auflistung.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCompiledModel">
      <summary>Eine unveränderliche Darstellung eines Entity Data Model (EDM), die zum Erstellen eines <see cref="T:System.Data.Objects.ObjectContext" /> verwendet oder an den Konstruktor eines <see cref="T:System.Data.Entity.DbContext" /> übergeben werden kann.  Für eine höhere Leistung sollten Instanzen dieses Typs zwischengespeichert und zum Erstellen von Kontexten wiederverwendet werden.  </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCompiledModel.CreateObjectContext``1(System.Data.Common.DbConnection)">
      <summary>Erstellt eine Instanz von <see cref="T:System.Data.Objects.ObjectContext" /> oder einer von ObjectContext abgeleiteten Klasse. Beachten Sie, dass stattdessen mit dem entsprechenden DbContext-Konstruktor eine Instanz von DbContext erstellt werden kann. Wenn ein abgeleiteter ObjectContext verwendet wird, muss er über einen öffentlichen Konstruktor mit einem einzelnen EntityConnection-Parameter verfügen. Die übergebene Verbindung wird vom ObjectContext verwendet, der Kontext ist jedoch nicht der Besitzer der Verbindung.  Der Aufrufer muss die Verbindung verwerfen, sobald der Kontext verworfen wurde. </summary>
      <returns>Gibt den Kontext zurück.</returns>
      <param name="existingConnection">Eine vorhandene Verbindung mit einer Datenbank für die Verwendung durch den Kontext.</param>
      <typeparam name="TContext">Der Typ des zu erstellenden Kontexts.</typeparam>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry">
      <summary>Eine nicht generische Version der <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" />-Klasse. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.Cast``2">
      <summary>Gibt das entsprechende generische <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" />-Objekt zurück. </summary>
      <returns>Das entsprechende generische Objekt.</returns>
      <typeparam name="TEntity">Der Entitätstyp, für den der Member deklariert ist.</typeparam>
      <typeparam name="TComplexProperty">Der Typ der komplexen Eigenschaft.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.ComplexProperty(System.String)">
      <summary>Ruft ein Objekt ab, das eine geschachtelte komplexe Eigenschaft dieser Eigenschaft darstellt. </summary>
      <returns>Ein Objekt, das die geschachtelte Eigenschaft darstellt.</returns>
      <param name="propertyName">Der Name der geschachtelten Eigenschaft.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.Property(System.String)">
      <summary>Ruft ein Objekt ab, das eine geschachtelte Eigenschaft dieser Eigenschaft darstellt. Diese Methode kann für skalare und komplexe Eigenschaften verwendet werden. </summary>
      <returns>Ein Objekt, das die geschachtelte Eigenschaft darstellt.</returns>
      <param name="propertyName">Der Name der geschachtelten Eigenschaft.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2">
      <summary>Instanzen dieser Klasse werden von der ComplexProperty-Methode von <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> zurückgegeben und erlauben den Zugriff auf den Zustand einer komplexen Eigenschaft. </summary>
      <typeparam name="TEntity">Der Typ der Entität, zu der diese Eigenschaft gehört.</typeparam>
      <typeparam name="TComplexProperty">Der Typ der Entität, zu der diese Eigenschaft gehört.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
      <summary>Ruft ein Objekt ab, das eine geschachtelte komplexe Eigenschaft dieser Eigenschaft darstellt. </summary>
      <returns>Ein Objekt, das die geschachtelte Eigenschaft darstellt.</returns>
      <param name="property">Ein Ausdruck, der die geschachtelte Eigenschaft darstellt.</param>
      <typeparam name="TNestedComplexProperty">Der Typ der geschachtelten Eigenschaft.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty(System.String)">
      <summary>Ruft ein Objekt ab, das eine geschachtelte komplexe Eigenschaft dieser Eigenschaft darstellt. </summary>
      <returns>Ein Objekt, das die geschachtelte Eigenschaft darstellt.</returns>
      <param name="propertyName">Der Name der geschachtelten Eigenschaft.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty``1(System.String)">
      <summary>Ruft ein Objekt ab, das eine geschachtelte komplexe Eigenschaft dieser Eigenschaft darstellt. </summary>
      <returns>Ein Objekt, das die geschachtelte Eigenschaft darstellt.</returns>
      <param name="propertyName">Der Name der geschachtelten Eigenschaft.</param>
      <typeparam name="TNestedComplexProperty">Der Typ der geschachtelten Eigenschaft.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbComplexPropertyEntry{`0,`1})~System.Data.Entity.Infrastructure.DbComplexPropertyEntry">
      <summary>Gibt eine neue Instanz der nicht generischen <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" />-Klasse für die durch dieses Objekt dargestellte Eigenschaft zurück.</summary>
      <returns>Gibt <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" /> zurück.</returns>
      <param name="entry">Der Eintrag.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
      <summary>Ruft ein Objekt ab, das eine geschachtelte Eigenschaft dieser Eigenschaft darstellt. Diese Methode kann für skalare und komplexe Eigenschaften verwendet werden. </summary>
      <returns>Ein Objekt, das die geschachtelte Eigenschaft darstellt.</returns>
      <param name="property">Ein Ausdruck, der die geschachtelte Eigenschaft darstellt.</param>
      <typeparam name="TNestedProperty">Der Typ der geschachtelten Eigenschaft.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property``1(System.String)">
      <summary>Ruft ein Objekt ab, das eine geschachtelte Eigenschaft dieser Eigenschaft darstellt. Diese Methode kann für skalare und komplexe Eigenschaften verwendet werden. </summary>
      <returns>Ein Objekt, das die geschachtelte Eigenschaft darstellt.</returns>
      <param name="propertyName">Der Name der geschachtelten Eigenschaft.</param>
      <typeparam name="TNestedProperty">Der Typ der geschachtelten Eigenschaft.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property(System.String)">
      <summary>Ruft ein Objekt ab, das eine geschachtelte Eigenschaft dieser Eigenschaft darstellt. Diese Methode kann für skalare und komplexe Eigenschaften verwendet werden. </summary>
      <returns>Ein Objekt, das die geschachtelte Eigenschaft darstellt.</returns>
      <param name="propertyName">Der Name der geschachtelten Eigenschaft.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbConnectionInfo">
      <summary>Stellt Informationen zu einer Datenbankverbindung dar.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.#ctor(System.String)">
      <summary>Erstellt eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" />-Klasse, die eine in der Anwendungskonfigurationsdatei angegebene Verbindung darstellt.</summary>
      <param name="connectionName">Der Name der Verbindungszeichenfolge in der Anwendungskonfiguration.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.#ctor(System.String,System.String)">
      <summary>Erstellt eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" />-Klasse auf der Grundlage einer Verbindungszeichenfolge.</summary>
      <param name="connectionString">Die für die Verbindung zu verwendende Verbindungszeichenfolge.</param>
      <param name="providerInvariantName">Der Name des für die Verbindung zu verwendenden Anbieters. Verwenden Sie "System.Data.SqlClient" für SQL Server.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.Equals(System.Object)">
      <summary>Gibt an, ob das angegebene Objekt mit dem aktuellen Objekt identisch ist.</summary>
      <returns>true, wenn das angegebene Objekt gleich dem aktuellen Objekt ist, andernfalls false.</returns>
      <param name="obj">Das Objekt, das mit dem aktuellen Objekt verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.GetHashCode">
      <summary>Gibt den Hashcode für diese Instanz zurück.</summary>
      <returns>Der Hashcode für diese Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.GetType">
      <summary>Ruft den Typ der aktuellen Instanz ab.</summary>
      <returns>Der Typ der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbConnectionStringOrigin">
      <summary>Beschreibt den Ursprung der Datenbankverbindungszeichenfolge, die einem <see cref="T:System.Data.Entity.DbContext" />-Objekt zugeordnet ist.</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.Convention">
      <summary>Die Verbindungszeichenfolge wurde durch eine Konvention erstellt.</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.Configuration">
      <summary>Die Verbindungszeichenfolge wurde aus einer externen Konfiguration gelesen.</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.UserCode">
      <summary>Die Verbindungszeichenfolge wurde explizit zur Laufzeit festgelegt.</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.DbContextInfo">
      <summary>     Die Verbindungszeichenfolge wurde durch Verbindungsinformationen überschrieben, die für DbContextInfo bereitgestellt wurden.  </summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbContextConfiguration">
      <summary>Wird von der Configuration-Methode von <see cref="T:System.Data.Entity.DbContext" /> zurückgegeben, um Zugriff auf Konfigurationsoptionen für den Kontext zu bieten. </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.AutoDetectChangesEnabled">
      <summary>Ruft ab oder legt fest, ob die automatische Erkennung von Änderungen in der Konfiguration aktiviert ist.</summary>
      <returns>TRUE, wenn die automatische Erkennung von Änderungen in der Konfiguration aktiviert ist, andernfalls FALSE.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.Equals(System.Object)">
      <summary>Gibt zurück, ob die angegebene Konfiguration gleich der aktuellen Konfiguration ist.</summary>
      <returns>TRUE, wenn die angegebene Konfiguration und die aktuelle Konfiguration gleich sind, andernfalls FALSE.</returns>
      <param name="obj">Die Konfiguration, die mit dem aktuellen Objekt verglichen werden soll. </param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.GetHashCode">
      <summary>Gibt die Hashfunktion für die angegebene Konfiguration zurück.</summary>
      <returns>Die Hashfunktion für die angegebene Konfiguration.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.GetType">
      <summary>Ruft den Typ für die aktuelle Konfiguration ab.</summary>
      <returns>Der Typ für die aktuelle Konfiguration.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.LazyLoadingEnabled">
      <summary>Ruft einen Wert ab, der angibt, ob Lazy Loading von als Navigationseigenschaften verfügbar gemachten Beziehungen aktiviert ist, oder legt ihn fest.  Lazy Loading ist standardmäßig aktiviert. </summary>
      <returns>TRUE, wenn Lazy Loading aktiviert ist, andernfalls FALSE.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.ProxyCreationEnabled">
      <summary>Ruft einen Wert ab, der angibt, ob das Framework immer Instanzen dynamisch generierter Proxyklassen erstellt, wenn es eine Instanz eines Entitätstyps erstellt, oder legt ihn fest. Beachten Sie, dass bei Aktivierung der Proxyerstellung mit diesem Flag Proxyinstanzen nur für Entitätstypen erstellt werden, die die Anforderungen für die Proxyerstellung erfüllen. Die Proxyerstellung ist standardmäßig aktiviert. </summary>
      <returns>TRUE, wenn die Proxyerstellung aktiviert ist, andernfalls FALSE.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.ToString">
      <summary>Gibt eine Zeichenfolgendarstellung der Konfiguration zurück.</summary>
      <returns>Eine Zeichenfolgendarstellung der Konfiguration.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.ValidateOnSaveEnabled">
      <summary>Ruft einen Wert ab, der angibt, ob bei Aufruf von <see cref="M:System.Data.Entity.DbContext.SaveChanges" /> nachverfolgte Entitäten automatisch überprüft werden sollen, oder legt ihn fest. Der Standardwert ist true. </summary>
      <returns>TRUE, wenn die nachverfolgten Entitäten automatisch überprüft werden sollen, andernfalls FALSE.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbContextInfo">
      <summary>Stellt Laufzeitinformationen über einen bestimmten <see cref="T:System.Data.Entity.DbContext" />-Typ bereit.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type)">
      <summary>Initialisiert eine neue Instanz, die einen bestimmten <see cref="T:System.Data.Entity.DbContext" />-Typ darstellt.</summary>
      <param name="contextType">Der von <see cref="T:System.Data.Entity.DbContext" /> abgeleitete Typ.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.Configuration)">
      <summary>Initialisiert eine neue Instanz, die einen bestimmten <see cref="T:System.Data.Entity.DbContext" />-Typ darstellt. Sie können ein externes CONFIG-Objekt (z. B. app.config oder web.config) bereitstellen, das während der Auflösung von Verbindungszeichenfolgen verwendet wird. Dies schließt die Suche nach Verbindungszeichenfolgen und DefaultConnectionFactory-Einträgen ein. </summary>
      <param name="contextType">Der von <see cref="T:System.Data.Entity.DbContext" /> abgeleitete Typ.</param>
      <param name="config">Ein Objekt, das die CONFIG-Datei darstellt.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.Configuration,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>Initialisiert eine neue Instanz, die einen bestimmten <see cref="T:System.Data.Entity.DbContext" /> darstellt, der eine bestimmte Datenbank als Ziel hat.     Sie können ein externes CONFIG-Objekt (z. B. app.config oder web.config) bereitstellen, das während der Auflösung von Verbindungszeichenfolgen verwendet wird. Dies schließt die Suche nach Verbindungszeichenfolgen und DefaultConnectionFactory-Einträgen ein. </summary>
      <param name="contextType">Der von <see cref="T:System.Data.Entity.DbContext" /> abgeleitete Typ.</param>
      <param name="config">Ein Objekt, das die CONFIG-Datei darstellt.</param>
      <param name="connectionInfo">Die für die Datenbank zu verwendenden Verbindungsinformationen.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.ConnectionStringSettingsCollection)">
      <summary>Initialisiert eine neue Instanz, die einen bestimmten <see cref="T:System.Data.Entity.DbContext" />-Typ darstellt. Sie können eine externe Liste von Verbindungszeichenfolgen bereitstellen, die während der Auflösung von Verbindungszeichenfolgen anstelle der in externen Konfigurationsdateien angegebenen Verbindungszeichenfolgen verwendet wird.</summary>
      <param name="contextType">Der von <see cref="T:System.Data.Entity.DbContext" /> abgeleitete Typ.</param>
      <param name="connectionStringSettings">Eine Auflistung von Verbindungszeichenfolgen.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>Initialisiert eine neue Instanz, die einen bestimmten <see cref="T:System.Data.Entity.DbContext" /> darstellt, der eine bestimmte Datenbank als Ziel hat. </summary>
      <param name="contextType">Der von <see cref="T:System.Data.Entity.DbContext" /> abgeleitete Typ.</param>
      <param name="connectionInfo">Die für die Datenbank zu verwendenden Verbindungsinformationen.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>Initialisiert eine neue Instanz, die einen bestimmten <see cref="T:System.Data.Entity.DbContext" />-Typ darstellt. Ein <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" />-Objekt kann bereitgestellt werden, um den standardmäßig ermittelten Anbieter zu überschreiben, der bei der Erstellung des zugrunde liegenden EDM-Modells verwendet wird.</summary>
      <param name="contextType">Der von <see cref="T:System.Data.Entity.DbContext" /> abgeleitete Typ.</param>
      <param name="modelProviderInfo">Ein <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" />-Objekt, das den als Ziel verwendeten, zugrunde liegenden ADO.NET-Anbieter angibt.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionProviderName">
      <summary>Ruft den Namen des ADO.NET-Anbieters der Verbindung ab, der vom zugrunde liegenden <see cref="T:System.Data.Entity.DbContext" />-Typ verwendet wird, oder legt ihn fest.</summary>
      <returns>Der Name des ADO.NET-Anbieters der Verbindung, der vom zugrunde liegenden Typ verwendet wird.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionString">
      <summary>Ruft die vom zugrunde liegenden <see cref="T:System.Data.Entity.DbContext" />-Typ verwendete Verbindungszeichenfolge ab oder legt sie fest.</summary>
      <returns>Die vom zugrunde liegenden <see cref="T:System.Data.Entity.DbContext" />-Typ verwendete Verbindungszeichenfolge.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionStringName">
      <summary>Ruft den vom zugrunde liegenden <see cref="T:System.Data.Entity.DbContext" />-Typ verwendeten Namen der Verbindungszeichenfolge ab oder legt ihn fest.</summary>
      <returns>Der vom zugrunde liegenden <see cref="T:System.Data.Entity.DbContext" />-Typ verwendete Name der Verbindungszeichenfolge.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionStringOrigin">
      <summary>Ruft den Ursprung der Verbindungszeichenfolge ab, der vom zugrunde liegenden <see cref="T:System.Data.Entity.DbContext" />-Typ verwendet wird, oder legt ihn fest.</summary>
      <returns>Der Ursprung der vom zugrunde liegenden <see cref="T:System.Data.Entity.DbContext" />-Typ verwendeten Verbindungszeichenfolge.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ContextType">
      <summary>Ruft den konkreten <see cref="T:System.Data.Entity.DbContext" />-Typ ab oder legt ihn fest.</summary>
      <returns>Der konkrete <see cref="T:System.Data.Entity.DbContext" />-Typ.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.CreateInstance">
      <summary>Erstellt eine neue Instanz, die einen bestimmten <see cref="T:System.Data.Entity.DbContext" />-Typ darstellt.</summary>
      <returns>Wenn Instanzen des zugrunde liegenden <see cref="T:System.Data.Entity.DbContext" />-Typs erstellt werden können, wird eine neue Instanz zurückgegeben, andernfalls wird NULL zurückgegeben.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.IsConstructible">
      <summary>Ruft einen Wert ab, der angibt, ob der zugrunde liegende <see cref="T:System.Data.Entity.DbContext" />-Typ erstellt werden kann, oder legt ihn fest.</summary>
      <returns>true, wenn der zugrunde liegende <see cref="T:System.Data.Entity.DbContext" />-Typ erstellt werden kann, andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.OnModelCreating">
      <summary>Ruft das Modell für einen initialisierten, abgeleiteten Kontext ab oder legt es fest.</summary>
      <returns>Das Modell für einen initialisierten, abgeleiteten Kontext.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbEntityEntry">
      <summary>Eine nicht generische Version der <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />-Klasse. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Cast``1">
      <summary>Gibt eine neue Instanz der generischen <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />-Klasse des angegebenen generischen Typs für die nachverfolgte Entität zurück, die von diesem Objekt dargestellt wird. Der Typ der nachverfolgten Entität muss mit dem generischen Typ kompatibel sein. Andernfalls wird eine Ausnahme ausgelöst. </summary>
      <returns>Eine generische Version.</returns>
      <typeparam name="TEntity">Der Typ der Entität.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Collection(System.String)">
      <summary>Ruft ein Objekt ab, das die Auflistungsnavigationseigenschaft für die Navigation von dieser Entität zu einer Auflistung verknüpfter Entitäten darstellt. </summary>
      <returns>Ein Objekt, das die Navigationseigenschaft darstellt.</returns>
      <param name="navigationProperty">Der Name der Navigationseigenschaft.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ComplexProperty(System.String)">
      <summary>Ruft ein Objekt ab, das eine geschachtelte Eigenschaft dieser Entität darstellt. </summary>
      <returns>Ein Objekt, das die komplexe Eigenschaft darstellt.</returns>
      <param name="propertyName">Der Name der komplexen Eigenschaft.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.CurrentValues">
      <summary>Ruft die aktuellen Eigenschaftswerte für die nachverfolgte Entität ab, die von diesem Objekt dargestellt wird. </summary>
      <returns>Die aktuellen Werte.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.Entity">
      <summary>Ruft die Entität ab. </summary>
      <returns>Die Entität.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Equals(System.Data.Entity.Infrastructure.DbEntityEntry)">
      <summary>Bestimmt, ob der angegebene <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> gleich dieser Instanz ist. Zwei <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />-Instanzen gelten als gleich, wenn beide Instanzen Einträge für die gleiche Entität im gleichen <see cref="T:System.Data.Entity.DbContext" /> sind. </summary>
      <returns>TRUE, wenn der angegebene <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> und diese Instanz gleich sind, andernfalls FALSE. </returns>
      <param name="other">Der <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />, der mit dieser Instanz verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene <see cref="T:System.Object" /> gleich dieser Instanz ist. Zwei <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />-Instanzen gelten als gleich, wenn beide Instanzen Einträge für die gleiche Entität im gleichen <see cref="T:System.Data.Entity.DbContext" /> sind. </summary>
      <returns>TRUE, wenn das angegebene Objekt und diese Instanz gleich sind, andernfalls FALSE. </returns>
      <param name="obj">Das <see cref="T:System.Object" />, das mit dieser Instanz verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetDatabaseValues">
      <summary>Fragt Kopien der gegenwärtig in der Datenbank vorhandenen Werte der nachverfolgten Entität aus der Datenbank ab. Das Ändern der Werte im zurückgegebenen Wörterbuch führt nicht zum Aktualisieren der Werte in der Datenbank. Wenn die Entität nicht in der Datenbank gefunden wird, wird NULL zurückgegeben. </summary>
      <returns>Die Speicherwerte.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetHashCode">
      <summary>Gibt einen Hashcode für diese Instanz zurück. </summary>
      <returns>Ein Hashcode für diese Instanz, der zur Verwendung in Hashalgorithmen und Hashdatenstrukturen, z. B. einer Hashtabelle, geeignet ist.  </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetType">
      <summary>Ruft den Typ für den aktuellen Datenbankentitätseintrag ab.</summary>
      <returns>Der Typ für den aktuellen Datenbankentitätseintrag.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetValidationResult">
      <summary>Überprüft diese <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />-Instanz und gibt das Validierungsergebnis zurück. </summary>
      <returns>Ergebnis der Entitätsvalidierung. Möglicherweise NULL, wenn die <see cref="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})" />-Methode überschrieben wird. </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Member(System.String)">
      <summary>Ruft ein Objekt ab, das einen Member der Entität darstellt.  Der Laufzeittyp des zurückgegebenen Objekts hängt von der Art des gewünschten Members ab.  Die derzeit unterstützten Membertypen und ihre Rückgabetypen sind Verweisnavigationseigenschaft (<see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />), Auflistungsnavigationseigenschaft (<see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />), primitive/skalare Eigenschaft (<see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />) und komplexe Eigenschaft (<see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" />). </summary>
      <returns>Ein Objekt, das den Member darstellt.</returns>
      <param name="propertyName">Der Name des Members.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.OriginalValues">
      <summary>Ruft die ursprünglichen Eigenschaftswerte für die nachverfolgte Entität ab, die von diesem Objekt dargestellt wird. Die ursprünglichen Werte sind normalerweise die Eigenschaftswerte der Entität zu dem Zeitpunkt, als sie das letzte Mal in der Datenbank abgefragt wurden. </summary>
      <returns>Die ursprünglichen Werte.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Property(System.String)">
      <summary>Ruft ein Objekt ab, das eine skalare oder komplexe Eigenschaft dieser Entität darstellt. </summary>
      <returns>Ein Objekt, das die Eigenschaft darstellt.</returns>
      <param name="propertyName">Der Name der Eigenschaft.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Reference(System.String)">
      <summary>Ruft ein Objekt ab, das die Verweisnavigationseigenschaft (d. h. keine Auflistungsnavigationseigenschaft) für die Navigation von dieser Entität zu einer anderen Entität darstellt. </summary>
      <returns>Ein Objekt, das die Navigationseigenschaft darstellt.</returns>
      <param name="navigationProperty">Der Name der Navigationseigenschaft.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Reload">
      <summary>Lädt die Entität erneut aus der Datenbank und überschreibt alle Eigenschaftswerte mit Werten aus der Datenbank. Nach dem Aufruf dieser Methode ist die Entität im Zustand Unchanged. </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.State">
      <summary>Ruft den Zustand der Entität ab oder legt ihn fest. </summary>
      <returns>Der Zustand.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ToString">
      <summary>Gibt eine Zeichenfolgendarstellung des Datenbankentitätseintrags zurück.</summary>
      <returns>Eine Zeichenfolgendarstellung des Datenbankentitätseintrags.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbEntityEntry`1">
      <summary>Instanzen dieser Klasse stellen Zugriff auf Informationen zu Entitäten und die Steuerung von Entitäten bereit, die vom <see cref="T:System.Data.Entity.DbContext" /> nachverfolgt werden.  Verwenden Sie die Entity-Methode oder die Entities-Methode des Kontexts, um Objekte dieses Typs abzurufen. </summary>
      <typeparam name="TEntity">Der Typ der Entität.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}})">
      <summary>Ruft ein Objekt ab, das die Auflistungsnavigationseigenschaft für die Navigation von dieser Entität zu einer Auflistung verknüpfter Entitäten darstellt. </summary>
      <returns>Ein Objekt, das die Navigationseigenschaft darstellt.</returns>
      <param name="navigationProperty">Ein Ausdruck, der die Navigationseigenschaft darstellt.</param>
      <typeparam name="TElement">Der Typ der Elemente in der Auflistung.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection``1(System.String)">
      <summary>Ruft ein Objekt ab, das die Auflistungsnavigationseigenschaft für die Navigation von dieser Entität zu einer Auflistung verknüpfter Entitäten darstellt. </summary>
      <returns>Ein Objekt, das die Navigationseigenschaft darstellt.</returns>
      <param name="navigationProperty">Der Name der Navigationseigenschaft.</param>
      <typeparam name="TElement">Der Typ der Elemente in der Auflistung.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection(System.String)">
      <summary>Ruft ein Objekt ab, das die Auflistungsnavigationseigenschaft für die Navigation von dieser Entität zu einer Auflistung verknüpfter Entitäten darstellt. </summary>
      <returns>Ein Objekt, das die Navigationseigenschaft darstellt.</returns>
      <param name="navigationProperty">Der Name der Navigationseigenschaft.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Ruft ein Objekt ab, das eine geschachtelte Eigenschaft dieser Entität darstellt. </summary>
      <returns>Ein Objekt, das die komplexe Eigenschaft darstellt.</returns>
      <param name="property">Die Eigenschaft.</param>
      <typeparam name="TComplexProperty">Der Typ der komplexen Eigenschaft.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty``1(System.String)">
      <summary>Ruft ein Objekt ab, das eine geschachtelte Eigenschaft dieser Entität darstellt. </summary>
      <returns>Ein Objekt, das die komplexe Eigenschaft darstellt.</returns>
      <param name="propertyName">Der Name der komplexen Eigenschaft.</param>
      <typeparam name="TComplexProperty">Der Typ der komplexen Eigenschaft.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty(System.String)">
      <summary>Ruft ein Objekt ab, das eine geschachtelte Eigenschaft dieser Entität darstellt. </summary>
      <returns>Ein Objekt, das die komplexe Eigenschaft darstellt.</returns>
      <param name="propertyName">Der Name der komplexen Eigenschaft.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.CurrentValues">
      <summary>Ruft die aktuellen Eigenschaftswerte für die nachverfolgte Entität ab, die von diesem Objekt dargestellt wird. </summary>
      <returns>Die aktuellen Werte.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.Entity">
      <summary>Ruft die Entität ab. </summary>
      <returns>Gibt <see cref="T:System.Data.Entity.Infrastructure.DbPropertyValues" /> zurück.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Equals(System.Data.Entity.Infrastructure.DbEntityEntry{`0})">
      <summary>Bestimmt, ob der angegebene <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> gleich dieser Instanz ist. Zwei <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />-Instanzen gelten als gleich, wenn beide Instanzen Einträge für die gleiche Entität im gleichen <see cref="T:System.Data.Entity.DbContext" /> sind. </summary>
      <returns>TRUE, wenn der angegebene <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> und diese Instanz gleich sind, andernfalls FALSE. </returns>
      <param name="other">Der <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />, der mit dieser Instanz verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene <see cref="T:System.Object" /> gleich dieser Instanz ist. Zwei <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />-Instanzen gelten als gleich, wenn beide Instanzen Einträge für die gleiche Entität im gleichen <see cref="T:System.Data.Entity.DbContext" /> sind. </summary>
      <returns>TRUE, wenn das angegebene Objekt und diese Instanz gleich sind, andernfalls FALSE. </returns>
      <param name="obj">Das <see cref="T:System.Object" />, das mit dieser Instanz verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetDatabaseValues">
      <summary>Fragt Kopien der gegenwärtig in der Datenbank vorhandenen Werte der nachverfolgten Entität aus der Datenbank ab. Das Ändern der Werte im zurückgegebenen Wörterbuch führt nicht zum Aktualisieren der Werte in der Datenbank. Wenn die Entität nicht in der Datenbank gefunden wird, wird NULL zurückgegeben. </summary>
      <returns>Die Speicherwerte.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetHashCode">
      <summary>Gibt einen Hashcode für diese Instanz zurück.</summary>
      <returns>Ein Hashcode für diese Instanz, der zur Verwendung in Hashalgorithmen und Hashdatenstrukturen, z. B. einer Hashtabelle, geeignet ist.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetType">
      <summary>Ruft den Typ für die aktuelle Datenbankentität ab.</summary>
      <returns>Der Typ für die aktuelle Datenbankentität.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetValidationResult">
      <summary>Überprüft diese <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />-Instanz und gibt das Validierungsergebnis zurück. </summary>
      <returns>Ergebnis der Entitätsvalidierung. Möglicherweise NULL, wenn die <see cref="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})" />-Methode überschrieben wird. </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Member(System.String)">
      <summary>Ruft ein Objekt ab, das einen Member der Entität darstellt.  Der Laufzeittyp des zurückgegebenen Objekts hängt von der Art des gewünschten Members ab.  Der gegenwärtig unterstützten Membertypen und ihre Rückgabetypen lauten: Verweisnavigationseigenschaft: <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />. Auflistungsnavigationseigenschaft: <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />. Primitive/skalare Eigenschaft: <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />. Komplexe Eigenschaft: <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" />. </summary>
      <returns>Der Member der Entität. </returns>
      <param name="propertyName">Der Name des Members.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Member``1(System.String)">
      <summary>Ruft ein Objekt ab, das einen Member der Entität darstellt.  Der Laufzeittyp des zurückgegebenen Objekts hängt von der Art des gewünschten Members ab.  Der gegenwärtig unterstützten Membertypen und ihre Rückgabetypen lauten: Verweisnavigationseigenschaft: <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" />. Auflistungsnavigationseigenschaft: <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" />. Primitive/skalare Eigenschaft: <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" />. Komplexe Eigenschaft: <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" />. </summary>
      <returns>Ein Objekt, das den Member darstellt.</returns>
      <param name="propertyName">Der Name des Members.</param>
      <typeparam name="TMember">Der Typ des Members.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.op_Implicit(System.Data.Entity.Infrastructure.DbEntityEntry{`0})~System.Data.Entity.Infrastructure.DbEntityEntry">
      <summary>Gibt eine neue Instanz der nicht generischen <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />-Klasse für die nachverfolgte Entität zurück, die von diesem Objekt dargestellt wird. </summary>
      <returns>Gibt <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> zurück.</returns>
      <param name="entry">Der Eintrag.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.OriginalValues">
      <summary>Ruft die ursprünglichen Eigenschaftswerte für die nachverfolgte Entität ab, die von diesem Objekt dargestellt wird. Die ursprünglichen Werte sind normalerweise die Eigenschaftswerte der Entität zu dem Zeitpunkt, als sie das letzte Mal in der Datenbank abgefragt wurden. </summary>
      <returns>Die ursprünglichen Werte.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Ruft ein Objekt ab, das eine skalare oder komplexe Eigenschaft dieser Entität darstellt. </summary>
      <returns>Ein Objekt, das die Eigenschaft darstellt.</returns>
      <param name="property">Die Eigenschaft.</param>
      <typeparam name="TProperty">Der Typ der Eigenschaft.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property``1(System.String)">
      <summary>Ruft ein Objekt ab, das eine skalare oder komplexe Eigenschaft dieser Entität darstellt. </summary>
      <returns>Ein Objekt, das die Eigenschaft darstellt.</returns>
      <param name="propertyName">Der Name der Eigenschaft.</param>
      <typeparam name="TProperty">Der Typ der Eigenschaft.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property(System.String)">
      <summary>Ruft ein Objekt ab, das eine skalare oder komplexe Eigenschaft dieser Entität darstellt. </summary>
      <returns>Ein Objekt, das die Eigenschaft darstellt.</returns>
      <param name="propertyName">Der Name der Eigenschaft.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Ruft ein Objekt ab, das die Verweisnavigationseigenschaft (d. h. keine Auflistungsnavigationseigenschaft) für die Navigation von dieser Entität zu einer anderen Entität darstellt. </summary>
      <returns>Ein Objekt, das die Navigationseigenschaft darstellt.</returns>
      <param name="navigationProperty">Ein Ausdruck, der die Navigationseigenschaft darstellt.</param>
      <typeparam name="TProperty">Der Typ der Eigenschaft.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference(System.String)">
      <summary>Ruft ein Objekt ab, das die Verweisnavigationseigenschaft (keine Auflistungsnavigationseigenschaft) für die Navigation von dieser Entität zu einer anderen Entität darstellt. </summary>
      <returns>Ein Objekt, das die Navigationseigenschaft darstellt.</returns>
      <param name="navigationProperty">Der Name der Navigationseigenschaft.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference``1(System.String)">
      <summary>Ruft ein Objekt ab, das die Verweisnavigationseigenschaft (d. h. keine Auflistungsnavigationseigenschaft) für die Navigation von dieser Entität zu einer anderen Entität darstellt. </summary>
      <returns>Ein Objekt, das die Navigationseigenschaft darstellt.</returns>
      <param name="navigationProperty">Der Name der Navigationseigenschaft.</param>
      <typeparam name="TProperty">Der Typ der Eigenschaft.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reload">
      <summary>Lädt die Entität erneut aus der Datenbank und überschreibt alle Eigenschaftswerte mit Werten aus der Datenbank. Nach dem Aufruf dieser Methode ist die Entität im Zustand Unchanged. </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.State">
      <summary>Ruft den Zustand der Entität ab oder legt ihn fest. </summary>
      <returns>Der Zustand.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ToString">
      <summary>Gibt eine Zeichenfolgendarstellung der Datenbankentitätswerte zurück.</summary>
      <returns>Eine Zeichenfolgendarstellung der Datenbankentitätswerte.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbMemberEntry">
      <summary>Dies ist eine abstrakte Basisklasse, mit der eine skalare oder komplexe Eigenschaft oder eine Navigationseigenschaft einer Entität dargestellt wird.  Skalare und komplexe Eigenschaften verwenden die abgeleitete Klasse <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />, Verweisnavigationseigenschaften verwenden die abgeleitete Klasse <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />, und Auflistungsnavigationseigenschaften verwenden die abgeleitete Klasse <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.Cast``2">
      <summary>Gibt das entsprechende generische <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2" />-Objekt zurück. </summary>
      <returns>Das entsprechende generische Objekt.</returns>
      <typeparam name="TEntity">Der Entitätstyp, für den der Member deklariert ist.</typeparam>
      <typeparam name="TProperty">Der Typ der Eigenschaft.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.CurrentValue">
      <summary>Ruft den aktuellen Wert dieser Eigenschaft ab oder legt ihn fest. </summary>
      <returns>Der aktuelle Wert.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.EntityEntry">
      <summary>Der <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />, zu dem dieser Member gehört. </summary>
      <returns>Ein Eintrag für die Entität, die Besitzer dieses Members ist.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.Equals(System.Object)">
      <summary>Gibt zurück, ob der angegebene Eintrag gleich der aktuellen Abfrage ist.</summary>
      <returns>TRUE, wenn der angegebene Eintrag und der aktuelle Eintrag gleich sind, andernfalls FALSE.</returns>
      <param name="obj">Der Eintrag, der mit dem aktuellen Objekt verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetHashCode">
      <summary>Gibt die Hashfunktion für den angegebenen Eintrag zurück.</summary>
      <returns>Die Hashfunktion für den angegebenen Eintrag.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetType">
      <summary>Ruft den Typ für den aktuellen Eintrag ab.</summary>
      <returns>Der Typ für den aktuellen Eintrag.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetValidationErrors">
      <summary>Überprüft diese Eigenschaft. </summary>
      <returns>Auflistung von <see cref="T:System.Data.Entity.Validation.DbValidationError" />-Objekten. Nie NULL. Wenn die Entität gültig ist, ist die Auflistung leer. </returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.Name">
      <summary>Ruft den Namen der Eigenschaft ab. </summary>
      <returns>Der Eigenschaftenname.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.ToString">
      <summary>Gibt eine Zeichenfolgendarstellung der Datenbankeigenschaftswerte zurück.</summary>
      <returns>Eine Zeichenfolgendarstellung der Datenbankeigenschaftswerte.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbMemberEntry`2">
      <summary>Eine abstrakte Basisklasse, mit der eine skalare oder komplexe Eigenschaft oder eine Navigationseigenschaft einer Entität dargestellt wird.  Skalare und komplexe Eigenschaften verwenden die abgeleitete Klasse <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" />, Verweisnavigationseigenschaften verwenden die abgeleitete Klasse <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" />, und Auflistungsnavigationseigenschaften verwenden die abgeleitete Klasse <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" />. </summary>
      <typeparam name="TEntity">Der Typ der Entität, zu der diese Eigenschaft gehört.</typeparam>
      <typeparam name="TProperty">Der Typ der Entität, zu der diese Eigenschaft gehört.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2" />-Klasse.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.CurrentValue">
      <summary>Ruft den aktuellen Wert dieser Eigenschaft ab oder legt ihn fest. </summary>
      <returns>Gibt <see cref="T:System.String" /> zurück.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.EntityEntry">
      <summary>Der <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />, zu dem dieser Member gehört. </summary>
      <returns>Ein Eintrag für die Entität, die Besitzer dieses Members ist.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.Equals(System.Object)">
      <summary>Gibt zurück, ob die angegebene Abfrage gleich der aktuellen Abfrage ist.</summary>
      <returns>TRUE, wenn die angegebene Abfrage und die aktuelle Abfrage gleich sind, andernfalls FALSE.</returns>
      <param name="obj">Die mit dem aktuellen Objekt zu vergleichende Abfrage.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetHashCode">
      <summary>Gibt die Hashfunktion für die angegebene Abfrage zurück.</summary>
      <returns>Die Hashfunktion für die angegebene Abfrage.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetType">
      <summary>Ruft den Typ für die aktuelle Abfrage ab.</summary>
      <returns>Der Typ für die aktuelle Abfrage.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetValidationErrors">
      <summary>Überprüft diese Eigenschaft. </summary>
      <returns>Auflistung von <see cref="T:System.Data.Entity.Validation.DbValidationError" />-Objekten. Nie NULL. Wenn die Entität gültig ist, ist die Auflistung leer. </returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.Name">
      <summary>Ruft den Namen des Datenbankmembereintrags ab.</summary>
      <returns>Der Name des Datenbankmembereintrags.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbMemberEntry{`0,`1})~System.Data.Entity.Infrastructure.DbMemberEntry">
      <summary>Gibt eine neue Instanz der nicht generischen <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry" />-Klasse für die durch dieses Objekt dargestellte Eigenschaft zurück. </summary>
      <returns>Gibt <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry" /> zurück.</returns>
      <param name="entry">Der Eintrag.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.ToString">
      <summary>Gibt eine Zeichenfolgendarstellung der Datenbankeigenschaftswerte zurück.</summary>
      <returns>Eine Zeichenfolgendarstellung der Datenbankeigenschaftswerte.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbModel">
      <summary>Stellt ein vom <see cref="T:System.Data.Entity.DbModelBuilder" /> erstelltes Entity Data Model (EDM) dar. Mit der <see cref="M:System.Data.Entity.Infrastructure.DbModel.Compile" />-Methode kann eine EDM-Darstellung in ein <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" /> konvertiert werden. Dies ist eine kompilierte Momentaufnahme des Modells, mit der Instanzen von <see cref="T:System.Data.Entity.DbContext" /> oder <see cref="T:System.Data.Objects.ObjectContext" /> zwischengespeichert und erstellt werden können. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbModel.Compile">
      <summary>Erstellt ein <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" /> für diesen Modus. Dies ist eine kompilierte Momentaufnahme, mit der <see cref="T:System.Data.Entity.DbContext" />-Instanzen zwischengespeichert und erstellt werden können. </summary>
      <returns>Das kompilierte Modell.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyEntry">
      <summary>Eine nicht generische Version der <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" />-Klasse. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyEntry.Cast``2">
      <summary>Gibt das entsprechende generische <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" />-Objekt zurück. </summary>
      <returns>Das entsprechende generische Objekt.</returns>
      <typeparam name="TEntity">Der Entitätstyp, für den der Member deklariert ist.</typeparam>
      <typeparam name="TProperty">Der Typ der Eigenschaft.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.CurrentValue">
      <summary>Ruft den aktuellen Wert dieser Eigenschaft ab oder legt ihn fest. </summary>
      <returns>Der aktuelle Wert.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.EntityEntry">
      <summary>Der <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />, zu dem diese Eigenschaft gehört. </summary>
      <returns>Ein Eintrag für die Entität, die Besitzer dieser Eigenschaft ist.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.IsModified">
      <summary>Ruft einen Wert ab, der angibt, ob der Wert dieser Eigenschaft geändert wurde, seit er aus der Datenbank geladen wurde, oder legt ihn fest. </summary>
      <returns>TRUE, wenn diese Instanz geändert wurde, andernfalls FALSE. </returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.Name">
      <summary>Ruft den Eigenschaftennamen ab. </summary>
      <returns>Der Eigenschaftenname.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.OriginalValue">
      <summary>Ruft den ursprünglichen Wert dieser Eigenschaft ab oder legt ihn fest. </summary>
      <returns>Der ursprüngliche Wert.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.ParentProperty">
      <summary>Der <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" /> der Eigenschaft, für den dies eine geschachtelte Eigenschaft ist. Diese Methode gibt nur für Eigenschaften komplexer Objekte einen Eintrag zurück, der nicht NULL ist. Für Eigenschaften der Entität selbst gibt sie NULL zurück. </summary>
      <returns>Ein Eintrag für die übergeordnete komplexe Eigenschaft oder NULL, wenn dies eine Entitätseigenschaft ist.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2">
      <summary>Instanzen dieser Klasse werden von der Property-Methode von <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> zurückgegeben und lassen Zugriff auf den Zustand der skalaren oder komplexen Eigenschaft zu. </summary>
      <typeparam name="TEntity">Der Typ der Entität, zu der diese Eigenschaft gehört.</typeparam>
      <typeparam name="TProperty">Der Typ der Eigenschaft.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.CurrentValue">
      <summary>Ruft den aktuellen Wert dieser Eigenschaft ab oder legt ihn fest. </summary>
      <returns>Gibt <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" /> zurück.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.EntityEntry">
      <summary>Der <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />, zu dem diese Eigenschaft gehört. </summary>
      <returns>Ein Eintrag für die Entität, die Besitzer dieser Eigenschaft ist.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.IsModified">
      <summary>Ruft einen Wert ab, der angibt, ob der Wert dieser Eigenschaft geändert wurde, seit er aus der Datenbank geladen wurde, oder legt ihn fest. </summary>
      <returns>TRUE, wenn diese Instanz geändert wurde, andernfalls FALSE. </returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.Name">
      <summary>Ruft den Eigenschaftennamen ab. </summary>
      <returns>Der Eigenschaftenname.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbPropertyEntry{`0,`1})~System.Data.Entity.Infrastructure.DbPropertyEntry">
      <summary>Gibt eine neue Instanz der nicht generischen <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />-Klasse für die durch dieses Objekt dargestellte Eigenschaft zurück. </summary>
      <returns>Gibt <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" /> zurück.</returns>
      <param name="entry">Der Eintrag.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.OriginalValue">
      <summary>Ruft den ursprünglichen Wert dieser Eigenschaft ab oder legt ihn fest. </summary>
      <returns>Gibt <see cref="T:System.String" /> zurück.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.ParentProperty">
      <summary>Der <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" /> der Eigenschaft, für den dies eine geschachtelte Eigenschaft ist. Diese Methode gibt nur für Eigenschaften komplexer Objekte einen Eintrag zurück, der nicht NULL ist. Für Eigenschaften der Entität selbst gibt sie NULL zurück. </summary>
      <returns>Ein Eintrag für die übergeordnete komplexe Eigenschaft oder NULL, wenn dies eine Entitätseigenschaft ist.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyValues">
      <summary>Eine Auflistung aller Eigenschaften für eine zugrunde liegende Entität oder ein zugrunde liegendes komplexes Objekt. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.Clone">
      <summary>Erstellt ein neues Wörterbuch, das Kopien aller Eigenschaften in diesem Wörterbuch enthält. Am neuen Wörterbuch vorgenommene Änderungen werden nicht in diesem Wörterbuch wiedergegeben, und an diesem Wörterbuch vorgenommene Änderungen werden nicht im neuen Wörterbuch wiedergegeben. </summary>
      <returns>Ein Klon dieses Wörterbuchs.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.Equals(System.Object)">
      <summary>Gibt zurück, ob der angegebene Wert gleich dem aktuellen Wert ist.</summary>
      <returns>TRUE, wenn der angegebene Wert und der aktuelle Wert gleich sind, andernfalls FALSE.</returns>
      <param name="obj">Der Wert, der mit dem aktuellen Objekt verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetHashCode">
      <summary>Gibt die Hashfunktion für den angegebenen Wert zurück.</summary>
      <returns>Die Hashfunktion für den angegebenen Wert.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetType">
      <summary>Ruft den Typ für den aktuellen Wert ab.</summary>
      <returns>Der Typ für den aktuellen Wert.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetValue``1(System.String)">
      <summary>Ruft den Wert der Eigenschaft wie bei Verwendung des Getters für indizierte Eigenschaften ab, jedoch mit dem Typ des generischen Parameters typisiert.  Dies ist besonders bei geschachtelten Wörterbüchern hilfreich, um das Schreiben von Ausdrücken mit vielen Umwandlungen zu vermeiden. </summary>
      <returns>Gibt <see cref="T:System.Type" /> zurück. Der Wert der von <paramref name="propertyName" /> angegebenen Eigenschaft.</returns>
      <param name="propertyName">Der Name der Eigenschaft.</param>
      <typeparam name="TValue">Der Typ der Eigenschaft.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyValues.Item(System.String)">
      <summary>Ruft den Wert der Eigenschaft mit dem angegebenen Eigenschaftennamen ab oder legt ihn fest. Der Wert ist möglicherweise eine geschachtelte Instanz dieser Klasse. </summary>
      <returns>Der Wert der Eigenschaft.</returns>
      <param name="propertyName">Der Name der abzurufenden Eigenschaft.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyValues.PropertyNames">
      <summary>Ruft den Satz von Namen aller Eigenschaften in diesem Wörterbuch als schreibgeschützten Satz ab. </summary>
      <returns>Die Eigenschaftennamen.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.SetValues(System.Data.Entity.Infrastructure.DbPropertyValues)">
      <summary>Legt die Werte dieses Wörterbuchs fest, indem Werte aus einem anderen Wörterbuch gelesen werden. Das andere Wörterbuch muss auf dem gleichen Typ wie dieses Wörterbuch basieren oder von einem Typ sein, der vom Typ dieses Wörterbuchs abgeleitet ist. </summary>
      <param name="propertyValues">Das Wörterbuch, aus dem Werte gelesen werden sollen.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.SetValues(System.Object)">
      <summary>Legt die Werte dieses Wörterbuchs fest, indem Werte aus dem angegebenen Objekt gelesen werden. Das angegebene Objekt kann von einem beliebigen Typ sein.  Jede Eigenschaft für das Objekt mit einem Namen, der mit einem Eigenschaftennamen im Wörterbuch übereinstimmt und gelesen werden kann, wird gelesen.  Andere Eigenschaften werden ignoriert.  Dies ermöglicht das Kopieren von Eigenschaften aus einfachen Datenübertragungsobjekten (Data Transfer Objects, DTOs). </summary>
      <param name="obj">Das Objekt, aus dem Werte gelesen werden sollen.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.ToObject">
      <summary>Erstellt ein Objekt des zugrunde liegenden Typs für dieses Wörterbuch und füllt es mit Eigenschaftswerten aus diesem Wörterbuch auf. </summary>
      <returns>Die Eigenschaften dieses in ein neues Objekt kopierten Wörterbuchs.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.ToString">
      <summary>Gibt eine Zeichenfolgendarstellung der Datenbankeigenschaftswerte zurück.</summary>
      <returns>Eine Zeichenfolgendarstellung der Datenbankeigenschaftswerte.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbProviderInfo">
      <summary>Speichert Informationen zu einem Datenbankanbieter.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbProviderInfo.#ctor(System.String,System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" />-Klasse.</summary>
      <param name="providerInvariantName">Der invariante Anbietername, der die Version von SQL Server Compact Edition angibt, die verwendet werden soll.</param>
      <param name="providerManifestToken">Die Manifesttokeninformationen für den Anbieter im Schemaelement.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbProviderInfo.ProviderInvariantName">
      <summary>Ruft den invarianten Anbieternamen ab, der die Version von SQL Server Compact Edition angibt, die verwendet werden soll.</summary>
      <returns>Der Datenanbieter des Datenbankanbieters.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbProviderInfo.ProviderManifestToken">
      <summary>Ruft die Manifesttokeninformationen für den Anbieter im Schemaelement ab.</summary>
      <returns>Das Manifesttoken.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbQuery">
      <summary>Stellt eine nicht generische LINQ to Entities-Abfrage für einen <see cref="T:System.Data.Entity.DbContext" /> dar. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.AsNoTracking">
      <summary>Gibt eine neue Abfrage zurück, wobei die zurückgegebenen Entitäten nicht im <see cref="T:System.Data.Entity.DbContext" /> zwischengespeichert werden. </summary>
      <returns>Eine neue Abfrage mit angewendetem NoTracking.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Cast``1">
      <summary>Gibt das entsprechende generische <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1" />-Objekt zurück. </summary>
      <returns>Das generische Mengenobjekt.</returns>
      <typeparam name="TElement">Der Elementtyp, für den die Abfrage erstellt wurde.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.ElementType">
      <summary>Der IQueryable-Elementtyp. </summary>
      <returns>Der Elementtyp.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Equals(System.Object)">
      <summary>Gibt zurück, ob die angegebene Abfrage gleich der aktuellen Abfrage ist.</summary>
      <returns>TRUE, wenn die angegebene Abfrage und die aktuelle Abfrage gleich sind, andernfalls FALSE.</returns>
      <param name="obj">Die Abfrage, die mit dem aktuellen Objekt verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.GetHashCode">
      <summary>Gibt die Hashfunktion für die angegebene Abfrage zurück.</summary>
      <returns>Die Hashfunktion für die angegebene Abfrage.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.GetType">
      <summary>Ruft den Typ für die aktuelle Abfrage ab.</summary>
      <returns>Der Typ für die aktuelle Abfrage.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Include(System.String)">
      <summary>Gibt die eingeschlossene nicht generische LINQ to Entities-Abfrage für einen <see cref="T:System.Data.Entity.DbContext" /> zurück.</summary>
      <returns>Die eingeschlossene LINQ-Abfrage.</returns>
      <param name="path">Der Pfad des eingeschlossenen LINQ.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.System#Collections#IEnumerable#GetEnumerator">
      <summary>Ruft die Enumeration dieser Abfrage ab, sodass sie für den Speicher ausgeführt wird.</summary>
      <returns>Ein <see cref="T:System.Collections.IEnumerator" /> für die Abfrage.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Gibt false zurück.</summary>
      <returns>false</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.System#ComponentModel#IListSource#GetList">
      <summary>Löst eine Ausnahme aus, die angibt, dass das direkte Binden an eine Speicherabfrage nicht unterstützt wird. </summary>
      <returns>Gibt nie einen Wert zurück, sondern löst immer eine Ausnahme aus.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#Linq#IQueryable#Expression">
      <summary>Der IQueryable-LINQ-Ausdruck.</summary>
      <returns>Gibt <see cref="T:System.Linq.Expressions.Expression" /> zurück.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#Linq#IQueryable#Provider">
      <summary>Der IQueryable-Anbieter.</summary>
      <returns>Gibt <see cref="T:System.Linq.IQueryProvider" /> zurück.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.ToString">
      <summary>Gibt eine <see cref="T:System.String" />-Darstellung der zugrunde liegenden Abfrage zurück. </summary>
      <returns>Die Abfragezeichenfolge. </returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbQuery`1">
      <summary>Stellt eine LINQ to Entities-Abfrage für einen <see cref="T:System.Data.Entity.DbContext" /> dar. </summary>
      <typeparam name="TResult">Der Entitätstyp, für den die Abfrage erfolgen soll.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.AsNoTracking">
      <summary>Gibt eine neue Abfrage zurück, wobei die zurückgegebenen Entitäten nicht im <see cref="T:System.Data.Entity.DbContext" /> zwischengespeichert werden. </summary>
      <returns>Eine neue Abfrage mit angewendetem NoTracking.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.Equals(System.Object)">
      <summary>Gibt zurück, ob die angegebene Abfrage gleich der aktuellen Abfrage ist.</summary>
      <returns>TRUE, wenn die angegebene Abfrage und die aktuelle Abfrage gleich sind, andernfalls FALSE.</returns>
      <param name="obj">Die Abfrage, die mit dem aktuellen Objekt verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.GetHashCode">
      <summary>Gibt die Hashfunktion für die angegebene Abfrage zurück.</summary>
      <returns>Die Hashfunktion für die angegebene Abfrage.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.GetType">
      <summary>Ruft den Typ für die aktuelle Abfrage ab.</summary>
      <returns>Der Typ für die aktuelle Abfrage.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.Include(System.String)">
      <summary>Gibt die eingeschlossene LINQ to Entities-Abfrage für einen <see cref="T:System.Data.Entity.DbContext" /> zurück.</summary>
      <returns>Das eingeschlossene LINQ.</returns>
      <param name="path">Der Pfad des eingeschlossenen LINQ.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.op_Implicit(System.Data.Entity.Infrastructure.DbQuery{`0})~System.Data.Entity.Infrastructure.DbQuery">
      <summary>Gibt eine neue Instanz der nicht generischen <see cref="T:System.Data.Entity.Infrastructure.DbQuery" />-Klasse für diese Abfrage zurück. </summary>
      <returns>Gibt <see cref="T:System.Data.Entity.Infrastructure.DbQuery" /> zurück.</returns>
      <param name="entry">Der Eintrag.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Ruft die Enumeration dieser Abfrage ab, sodass sie für den Speicher ausgeführt wird.</summary>
      <returns>Gibt einen <see cref="T:System.Collections.Generic.IEnumerator`1" /> für die Abfrage zurück.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Ruft die Enumeration dieser Abfrage ab, sodass sie für den Speicher ausgeführt wird.</summary>
      <returns>Gibt einen <see cref="T:System.Collections.IEnumerator" /> für die Abfrage zurück.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Gibt false zurück.</summary>
      <returns>false</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#ComponentModel#IListSource#GetList">
      <summary>Löst eine Ausnahme aus, die angibt, dass das direkte Binden an eine Speicherabfrage nicht unterstützt wird. </summary>
      <returns>Gibt nie einen Wert zurück, sondern löst immer eine Ausnahme aus.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#ElementType">
      <summary>Der IQueryable-Elementtyp.</summary>
      <returns>Gibt <see cref="T:System.Type" /> zurück.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#Expression">
      <summary>Der IQueryable-LINQ-Ausdruck.</summary>
      <returns>Gibt <see cref="T:System.Linq.Expressions.Expression" /> zurück.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#Provider">
      <summary>Der IQueryable-Anbieter.</summary>
      <returns>Gibt <see cref="T:System.Linq.IQueryProvider" /> zurück.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.ToString">
      <summary>Gibt eine <see cref="T:System.String" />-Darstellung der zugrunde liegenden Abfrage zurück. </summary>
      <returns>Die Abfragezeichenfolge. </returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbReferenceEntry">
      <summary>Eine nicht generische Version der <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" />-Klasse. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Cast``2">
      <summary>Gibt das entsprechende generische <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" />-Objekt zurück. </summary>
      <returns>Das entsprechende generische Objekt.</returns>
      <typeparam name="TEntity">Der Entitätstyp, für den der Member deklariert ist.</typeparam>
      <typeparam name="TProperty">Der Typ der Eigenschaft.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.CurrentValue">
      <summary>Ruft den aktuellen Wert der Navigationseigenschaft ab oder legt ihn fest.  Der aktuelle Wert ist die Entität, auf die die Navigationseigenschaft verweist. </summary>
      <returns>Der aktuelle Wert.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.EntityEntry">
      <summary>Der <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />, zu dem diese Navigationseigenschaft gehört. </summary>
      <returns>Ein Eintrag für die Entität, die Besitzer dieser Navigationseigenschaft ist.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.IsLoaded">
      <summary>Ruft einen Wert ab, der angibt, ob die Entität aus der Datenbank geladen wurde. </summary>
      <returns>TRUE, wenn die Entität geladen wurde, andernfalls FALSE.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Load">
      <summary>Lädt die Entität aus der Datenbank. Beachten Sie, dass die Entität nicht mit Werten aus der Datenbank überschrieben wird, wenn sie bereits im Kontext vorhanden ist. </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.Name">
      <summary>Ruft den Eigenschaftennamen ab. </summary>
      <returns>Der Eigenschaftenname.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Query">
      <summary>Gibt die Abfrage zurück, die zum Laden dieser Entität aus der Datenbank verwendet wird. Die zurückgegebene Abfrage kann mit LINQ geändert werden, um in der Datenbank Daten zu filtern oder Vorgänge auszuführen. </summary>
      <returns>Eine Abfrage für die Entität.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2">
      <summary>Instanzen dieser Klasse werden von der Reference-Methode von <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> zurückgegeben und ermöglichen das Ausführen von Vorgängen, z. B. das Laden, für die Verweisnavigationseigenschaften der Entität. </summary>
      <typeparam name="TEntity">Der Typ der Entität, zu der diese Eigenschaft gehört.</typeparam>
      <typeparam name="TProperty">Der Typ der Eigenschaft.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.CurrentValue">
      <summary>Ruft den aktuellen Wert der Navigationseigenschaft ab oder legt ihn fest.  Der aktuelle Wert ist die Entität, auf die die Navigationseigenschaft verweist. </summary>
      <returns>Gibt <see cref="T:System.Linq.IQueryable`1" /> zurück.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.EntityEntry">
      <summary>Der <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />, zu dem diese Navigationseigenschaft gehört. </summary>
      <returns>Ein Eintrag für die Entität, die Besitzer dieser Navigationseigenschaft ist.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.IsLoaded">
      <summary>Ruft einen Wert ab, der angibt, ob die Entität aus der Datenbank geladen wurde. </summary>
      <returns>TRUE, wenn die Entität geladen wurde, andernfalls FALSE.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Load">
      <summary>Lädt die Entität aus der Datenbank. Wenn die Entität bereits im Kontext vorhanden ist, wird sie nicht mit Werten aus der Datenbank überschrieben. </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Name">
      <summary>Ruft den Eigenschaftennamen ab. </summary>
      <returns>Der Eigenschaftenname.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbReferenceEntry{`0,`1})~System.Data.Entity.Infrastructure.DbReferenceEntry">
      <summary> Gibt eine neue Instanz der nicht generischen <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />-Klasse für die durch dieses Objekt dargestellte Navigationseigenschaft zurück. </summary>
      <returns>Gibt <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" /> zurück.</returns>
      <param name="entry">Der Eintrag.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Query">
      <summary>Gibt die Abfrage zurück, die zum Laden dieser Entität aus der Datenbank verwendet wird. Die zurückgegebene Abfrage kann mit LINQ geändert werden, um in der Datenbank Daten zu filtern oder Vorgänge auszuführen. </summary>
      <returns>Eine Abfrage für die Entität.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbSqlQuery">
      <summary>Stellt eine SQL-Abfrage für Entitäten dar, die aus einem <see cref="T:System.Data.Entity.DbContext" /> erstellt und mit der Verbindung aus diesem Kontext ausgeführt wird. Instanzen dieser Klasse werden aus der <see cref="T:System.Data.Entity.DbSet" />-Instanz für den Entitätstyp abgerufen. Die Abfrage wird nicht ausgeführt, wenn dieses Objekt erstellt wird. Sie wird jedes Mal ausgeführt, wenn es aufgelistet wird, z. B. mit foreach. SQL-Abfragen für Nicht-Entitäten werden mit der <see cref="P:System.Data.Entity.DbContext.Database" /> erstellt. Eine generische Version dieser Klasse finden Sie unter <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.AsNoTracking">
      <summary>Gibt eine neue Abfrage zurück, wobei die Ergebnisse der Abfrage nicht vom zugeordneten <see cref="T:System.Data.Entity.DbContext" /> nachverfolgt werden. </summary>
      <returns>Eine neue Abfrage ohne Nachverfolgung.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.Equals(System.Object)">
      <summary>Gibt zurück, ob die angegebene Abfrage gleich der aktuellen Abfrage ist.</summary>
      <returns>TRUE, wenn die angegebene Abfrage und die aktuelle Abfrage gleich sind, andernfalls FALSE.</returns>
      <param name="obj">Die Abfrage, die mit dem aktuellen Objekt verglichen werden soll. </param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.GetEnumerator">
      <summary>Führt die Abfrage aus und gibt einen Enumerator für die Elemente zurück. </summary>
      <returns>Ein <see cref="T:System.Collections.IEnumerator" />-Objekt, mit dem die Elemente durchlaufen werden können. </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.GetHashCode">
      <summary>Gibt die Hashfunktion für die angegebene Abfrage zurück.</summary>
      <returns>Die Hashfunktion für die angegebene Abfrage.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.GetType">
      <summary>Ruft den Typ für die aktuelle Abfrage ab.</summary>
      <returns>Der Typ für die aktuelle Abfrage.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbSqlQuery.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Gibt false zurück.</summary>
      <returns>false</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.System#ComponentModel#IListSource#GetList">
      <summary>Löst eine Ausnahme aus, die angibt, dass das direkte Binden an eine Speicherabfrage nicht unterstützt wird.</summary>
      <returns>Gibt nie einen Wert zurück, sondern löst immer eine Ausnahme aus.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.ToString">
      <summary>Gibt einen <see cref="T:System.String" /> zurück, der die SQL-Zeichenfolge enthält, die beim Erstellen der Abfrage festgelegt wurde.  Die Parameter sind nicht enthalten. </summary>
      <returns>Ein <see cref="T:System.String" />, der diese Instanz darstellt. </returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbSqlQuery`1">
      <summary>Stellt eine SQL-Abfrage für Entitäten dar, die aus einem <see cref="T:System.Data.Entity.DbContext" /> erstellt und mit der Verbindung aus diesem Kontext ausgeführt werden. Instanzen dieser Klasse werden aus der <see cref="T:System.Data.Entity.DbSet`1" />-Instanz für den Entitätstyp abgerufen. Die Abfrage wird nicht ausgeführt, wenn dieses Objekt erstellt wird. Sie wird jedes Mal ausgeführt, wenn es aufgelistet wird, z. B. mit foreach. SQL-Abfragen für Nicht-Entitäten werden mit der <see cref="P:System.Data.Entity.DbContext.Database" /> erstellt. Eine nicht generische Version dieser Klasse finden Sie unter <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery" />. </summary>
      <typeparam name="TEntity">Die Entität.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.AsNoTracking">
      <summary>Gibt eine neue Abfrage zurück, wobei die Ergebnisse der Abfrage nicht vom zugeordneten <see cref="T:System.Data.Entity.DbContext" /> nachverfolgt werden. </summary>
      <returns>Eine neue Abfrage ohne Nachverfolgung.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.Equals(System.Object)">
      <summary>Gibt zurück, ob die angegebene Abfrage gleich der aktuellen Abfrage ist.</summary>
      <returns>TRUE, wenn die angegebene Abfrage und die aktuelle Abfrage gleich sind, andernfalls FALSE.</returns>
      <param name="obj">Die Abfrage, die mit dem aktuellen Objekt verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetEnumerator">
      <summary>Führt die Abfrage aus und gibt einen Enumerator für die Elemente zurück. </summary>
      <returns>Der Enumerator für die Elemente.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetHashCode">
      <summary>Gibt die Hashfunktion für die angegebene Abfrage zurück.</summary>
      <returns>Die Hashfunktion für die angegebene Abfrage.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetType">
      <summary>Ruft den Typ für die aktuelle Abfrage ab.</summary>
      <returns>Der Typ für die aktuelle Abfrage.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Führt die Abfrage aus und gibt einen Enumerator für die Elemente zurück.</summary>
      <returns>Ein <see cref="T:System.Collections.IEnumerator" />-Objekt, mit dem die Elemente durchlaufen werden können.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbSqlQuery`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Gibt false zurück.</summary>
      <returns>false</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.System#ComponentModel#IListSource#GetList">
      <summary>Löst eine Ausnahme aus, die angibt, dass das direkte Binden an eine Speicherabfrage nicht unterstützt wird.</summary>
      <returns>Gibt nie einen Wert zurück, sondern löst immer eine Ausnahme aus.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.ToString">
      <summary>Gibt einen <see cref="T:System.String" /> zurück, der die SQL-Zeichenfolge enthält, die beim Erstellen der Abfrage festgelegt wurde.  Die Parameter sind nicht enthalten. </summary>
      <returns> Ein <see cref="T:System.String" />, der diese Instanz darstellt. </returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException">
      <summary>Von <see cref="T:System.Data.Entity.DbContext" /> ausgelöste Ausnahme, wenn das erwartete Verhalten ist, dass SaveChanges für eine Entität ein Datenbankupdate verursacht, tatsächlich jedoch keine Zeilen in der Datenbank aktualisiert wurden.  Dies bedeutet normalerweise, dass die Datenbank gleichzeitig aktualisiert wurde und dass ein Parallelitätstoken, das übereinstimmen sollte, nicht übereingestimmt hat. Zustandseinträge, auf die von dieser Ausnahme verwiesen wird, werden aus Sicherheitsgründen nicht serialisiert, und der Zugriff auf die Zustandseinträge nach der Serialisierung gibt NULL zurück. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />-Klasse. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />-Klasse. </summary>
      <param name="message">Die Meldung.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor(System.String,System.Exception)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />-Klasse. </summary>
      <param name="message">Die Meldung.</param>
      <param name="innerException">Die innere Ausnahme.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbUpdateException">
      <summary>Stellt die während eines Datenbankupdates aufgetretenen Ausnahmen dar.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />-Klasse. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />-Klasse. </summary>
      <param name="message">Die Meldung.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor(System.String,System.Exception)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />-Klasse. </summary>
      <param name="message">Die Meldung.</param>
      <param name="innerException">Die innere Ausnahme.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbUpdateException.Entries">
      <summary>Ruft <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />-Objekte ab, die die Entitäten darstellen, die nicht in der Datenbank gespeichert werden konnten. </summary>
      <returns>Die Entitäten, die nicht in der Datenbank gespeichert werden konnten. </returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.EdmMetadata">
      <summary>Stellt eine Entität dar, die zum Speichern von Metadaten zu einem EDM in der Datenbank verwendet wird. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmMetadata.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.EdmMetadata" />-Klasse.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.EdmMetadata.Id">
      <summary>Ruft den Bezeichner der Metadatenentität ab oder legt diesen fest (derzeit immer 1). </summary>
      <returns>Der Bezeichner.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.EdmMetadata.ModelHash">
      <summary>Ruft den Modellhash ab, mit dem überprüft wird, ob das Modell geändert wurde, seit die Datenbank anhand dieses Modells erstellt wurde, oder legt ihn fest. </summary>
      <returns>Der Modellhash.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmMetadata.TryGetModelHash(System.Data.Entity.DbContext)">
      <summary>Versucht, den mit Code First berechneten Modellhash für den angegebenen Kontext abzurufen. Diese Methode gibt NULL zurück, wenn der Kontext nicht im Code First-Modus verwendet wird. </summary>
      <returns>Die Hashzeichenfolge.</returns>
      <param name="context">Der Kontext.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.EdmxWriter">
      <summary>Enthält Methoden für den Zugriff auf das Entity Data Model, das mit Code First im EDMX-Format erstellt wurde. Diese Methoden werden in der Regel zum Debuggen verwendet, wenn das mit Code First intern erstellte Modell überprüft werden muss. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmxWriter.WriteEdmx(System.Data.Entity.DbContext,System.Xml.XmlWriter)">
      <summary>Verwendet Code First mit dem angegebenen Kontext und schreibt das resultierende Entity Data Model im EDMX-Format in den angegebenen Writer.  Diese Methode kann nur mit Kontextinstanzen verwendet werden, die Code First verwenden und das Modell intern erstellen.  Die Methode kann nicht für mit Database First oder Model First erstellte Kontexte, für mit einem bereits vorhandenen <see cref="T:System.Data.Objects.ObjectContext" /> erstellte Kontexte oder für mit einem bereits vorhandenen <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" /> erstellte Kontexte verwendet werden. </summary>
      <param name="context">Der Kontext.</param>
      <param name="writer">Der Writer.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmxWriter.WriteEdmx(System.Data.Entity.Infrastructure.DbModel,System.Xml.XmlWriter)">
      <summary>Schreibt das vom angegebenen <see cref="T:System.Data.Entity.Infrastructure.DbModel" /> dargestellte Entity Data Model im EDMX-Format in den angegebenen Writer. </summary>
      <param name="model">Ein Objekt, das das EDM darstellt.</param>
      <param name="writer">Der Writer.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbConnectionFactory">
      <summary>Implementierungen dieser Schnittstelle werden verwendet, um DbConnection-Objekte für einen Typ von Datenbankserver auf Grundlage eines angegebenen Datenbanknamens zu erstellen.   Eine Instanz wird in der <see cref="T:System.Data.Entity.Database" />-Klasse festgelegt, damit alle <see cref="T:System.Data.Entity.DbContext" />-Objekte ohne Verbindungsinformationen oder nur mit einem Datenbanknamen oder einer Verbindungszeichenfolge erstellt werden, um standardmäßig einen bestimmten Typ von Datenbankserver zu verwenden. Es werden zwei Implementierungen dieser Schnittstelle bereitgestellt: <see cref="T:System.Data.Entity.Infrastructure.SqlConnectionFactory" /> zum Erstellen von Verbindungen mit Microsoft SQL Server einschließlich Express Edition und <see cref="T:System.Data.Entity.Infrastructure.SqlCeConnectionFactory" /> zum Erstellen von Verbindungen mit Microsoft SQL Server Compact Edition. Nach Bedarf können weitere Implementierungen für andere Datenbankserver hinzugefügt werden. Implementierungen sollten threadsicher oder unveränderlich sein, da möglicherweise mehrere Threads gleichzeitig auf sie zugreifen. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbConnectionFactory.CreateConnection(System.String)">
      <summary>Erstellt eine Verbindung auf Grundlage des angegebenen Datenbanknamens oder der angegebenen Verbindungszeichenfolge. </summary>
      <returns>Eine initialisierte DbConnection.</returns>
      <param name="nameOrConnectionString">Der Datenbankname oder die Verbindungszeichenfolge.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbContextFactory`1">
      <summary>Eine Factory zum Erstellen abgeleiteter <see cref="T:System.Data.Entity.DbContext" />-Instanzen. Implementieren Sie diese Schnittstelle, um Entwurfszeitdienste und die Instanziierung für Kontexttypen zu aktivieren, die über keinen öffentlichen Standardkonstruktor verfügen. Sie haben die Möglichkeit, abgeleitete <see cref="T:System.Data.Entity.DbContext" />-Instanzen zur Entwurfszeit zu erstellen, um bestimmte Entwurfszeiterfahrungen wie Modellrendering und DDL-Generierung zu unterstützen. Durch Entwurfszeitdienste können Implementierungen dieser Schnittstelle, die sich in derselben Assembly wie der abgeleitete <see cref="T:System.Data.Entity.DbContext" />-Typ befinden, automatisch ermittelt werden.</summary>
      <typeparam name="TContext">Dieser Typparameter ist kovariant. Das heißt, es kann entweder der angegebene Typ oder ein abgeleiteterer Typ verwendet werden. Weitere Informationen zu Kovarianz und Kontravarianz finden Sie unter .</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbContextFactory`1.Create">
      <summary>Erstellt eine neue Instanz eines abgeleiteten <see cref="T:System.Data.Entity.DbContext" />-Typs.</summary>
      <returns>Eine Instanz von <see cref="TContext" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IncludeMetadataConvention">
      <summary>Diese <see cref="T:System.Data.Entity.DbModelBuilder" />-Konvention bewirkt, dass <see cref="T:System.Data.Entity.DbModelBuilder" /> beim Erstellen des Modells Metadaten zum Modell einschließt. Wenn <see cref="T:System.Data.Entity.DbContext" /> ein Modell gemäß Konvention erstellt, wird diese Konvention der Liste der vom <see cref="T:System.Data.Entity.DbModelBuilder" /> verwendeten Konventionen hinzugefügt.  Dies bewirkt, dass Modellmetadaten in die Datenbank geschrieben werden, wenn der <see cref="T:System.Data.Entity.DbContext" /> zum Erstellen der Datenbank verwendet wird. So kann dann überprüft werden, ob das Modell geändert wurde, seit es das letzte Mal für die Datenbank verwendet wurde.  Diese Konvention kann aus der Liste der <see cref="T:System.Data.Entity.DbModelBuilder" />-Konventionen entfernt werden, indem die <see cref="M:System.Data.Entity.DbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)" />-Methode überschrieben wird. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IncludeMetadataConvention.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.IncludeMetadataConvention" />-Klasse.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IObjectContextAdapter">
      <summary>Schnittstelle, die von Objekten implementiert wird, die eine <see cref="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext" />-Instanz bereitstellen können. Die <see cref="T:System.Data.Entity.DbContext" />-Klasse implementiert diese Schnittstelle, um Zugriff auf den zugrunde liegenden ObjectContext zu bieten. </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext">
      <summary>Ruft den Objektkontext ab. </summary>
      <returns>Der Objektkontext.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.LocalDbConnectionFactory">
      <summary>     Instanzen dieser Klasse werden zum Erstellen von DbConnection-Objekten für SQL Server LocalDb auf Grundlage eines bestimmten Datenbanknamens oder einer bestimmten Verbindungszeichenfolge verwendet. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.#ctor(System.String)">
      <summary>     Erstellt eine neue Instanz der Verbindungsfactory für die angegebene LocalDb-Version.     Verwenden Sie für SQL Server 2012 LocalDb "v11.0". </summary>
      <param name="localDbVersion">Die zu verwendende LocalDb-Version.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.#ctor(System.String,System.String)">
      <summary>     Erstellt eine neue Instanz der Verbindungsfactory für die angegebene LocalDb-Version.     Verwenden Sie für SQL Server 2012 LocalDb "v11.0".      </summary>
      <param name="localDbVersion">Die zu verwendende LocalDb-Version.</param>
      <param name="baseConnectionString">     Die Verbindungszeichenfolge, die für andere Datenbankoptionen als "Initial Catalog", "Data Source" und "AttachDbFilename" verwendet werden soll.     Beim Aufrufen von "CreateConnection" werden "Initial Catalog" und "AttachDbFilename" dieser Zeichenfolge auf Grundlage des Datenbanknamens vorangestellt.     "Data Source" wird auf der Grundlage des LocalDbVersion-Arguments festgelegt. </param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.BaseConnectionString">
      <summary>     Die Verbindungszeichenfolge, die für andere Datenbankoptionen als "Initial Catalog", "Data Source" und "AttachDbFilename" verwendet werden soll.     Beim Aufrufen von "CreateConnection" werden "Initial Catalog" und "AttachDbFilename" dieser Zeichenfolge auf Grundlage des Datenbanknamens vorangestellt.     "Data Source" wird auf der Grundlage des LocalDbVersion-Arguments festgelegt.     Der Standardausdruck lautet "Integrated Security=True; MultipleActiveResultSets=True;". </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.CreateConnection(System.String)">
      <summary>     Erstellt auf Grundlage des angegebenen Datenbanknamens oder der angegebenen Verbindungszeichenfolge eine Verbindung für SQL Server LocalDb.     Wenn die angegebene Zeichenfolge das Zeichen "=" enthält, wird sie als vollständige Verbindungszeichenfolge behandelt. Andernfalls wird sie nur als Datenbankname behandelt. </summary>
      <returns>Eine initialisierte DbConnection.</returns>
      <param name="nameOrConnectionString">Der Datenbankname oder die Verbindungszeichenfolge.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ModelContainerConvention">
      <summary>Diese <see cref="T:System.Data.Entity.DbModelBuilder" />-Konvention verwendet den Namen der abgeleiteten <see cref="T:System.Data.Entity.DbContext" />-Klasse als Container für das durch Code First erstellte konzeptionelle Modell. </summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ModelNamespaceConvention">
      <summary>Diese <see cref="T:System.Data.Entity.DbModelBuilder" />-Konvention verwendet den Namespace der abgeleiteten <see cref="T:System.Data.Entity.DbContext" />-Klasse als Namespace des durch Code First erstellten konzeptionellen Modells. </summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ReplacementDbQueryWrapper`1">
      <summary>Instanzen dieser Klasse werden intern für die Erstellung konstanter Ausdrücke verwendet, die in die Ausdrucksbaumstruktur eingefügt werden, um Verweise auf <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1" /> und <see cref="T:System.Data.Entity.Infrastructure.DbQuery" /> zu ersetzen. </summary>
      <typeparam name="TElement">Der Typ des Elements.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.ReplacementDbQueryWrapper`1.Query">
      <summary>Die in der LINQ-Ausdrucksbaumstruktur erwartete öffentliche Eigenschaft.</summary>
      <returns>Gibt <see cref="T:System.Data.Objects.ObjectQuery`1" /> zurück. Die Abfrage.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SqlCeConnectionFactory">
      <summary>Instanzen dieser Klasse werden zum Erstellen von DbConnection-Objekten für SQL Server Compact Edition auf Grundlage eines angegebenen Datenbanknamens oder einer angegebenen Verbindungszeichenfolge verwendet. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.#ctor(System.String)">
      <summary> Erstellt eine neue Verbindungsfactory mit einer leeren <see cref="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.DatabaseDirectory" />-Eigenschaft und einer leeren <see cref="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.BaseConnectionString" />-Eigenschaft ( (Standardeinstellung). </summary>
      <param name="providerInvariantName">Der invariante Anbietername, der die Version von SQL Server Compact Edition angibt, die verwendet werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.#ctor(System.String,System.String,System.String)">
      <summary>Erstellt eine neue Verbindungsfactory mit der angegebenen <see cref="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.DatabaseDirectory" />-Eigenschaft und <see cref="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.BaseConnectionString" />-Eigenschaft. </summary>
      <param name="providerInvariantName">Der invariante Anbietername, der die Version von SQL Server Compact Edition angibt, die verwendet werden soll. </param>
      <param name="databaseDirectory">Der Pfad, der dem Datenbanknamen vorangestellt werden soll, der den von SQL Server Compact Edition verwendeten Dateinamen bildet, wenn die Datenbankdatei erstellt oder gelesen wird. Eine leere Zeichenfolge bewirkt, dass SQL Server Compact Edition als Speicherort der Datenbankdatei den Standardspeicherort verwendet. </param>
      <param name="baseConnectionString">Die Verbindungszeichenfolge, die für andere Datenbankverbindungsoptionen als "Data Source" verwendet werden soll. Dieser Zeichenfolge wird Data Source auf Grundlage des Datenbanknamens vorangestellt, wenn CreateConnection aufgerufen wird. </param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.BaseConnectionString">
      <summary>Die Verbindungszeichenfolge, die für andere Datenbankverbindungsoptionen als "Data Source" verwendet werden soll. Dieser Zeichenfolge wird Data Source auf Grundlage des Datenbanknamens vorangestellt, wenn CreateConnection aufgerufen wird. Der Standardwert ist eine leere Zeichenfolge. Dies bedeutet, dass keine anderen Optionen verwendet werden. </summary>
      <returns>Die verwendete Verbindungszeichenfolge.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.CreateConnection(System.String)">
      <summary>Erstellt auf Grundlage des angegebenen Datenbanknamens oder der angegebenen Verbindungszeichenfolge eine Verbindung für SQL Server Compact Edition. Wenn die angegebene Zeichenfolge das Zeichen "=" enthält, wird sie als vollständige Verbindungszeichenfolge behandelt. Andernfalls wird sie als Datenbankname behandelt. </summary>
      <returns>Eine initialisierte DbConnection.</returns>
      <param name="nameOrConnectionString">Der Datenbankname oder die Verbindungszeichenfolge.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.DatabaseDirectory">
      <summary>Der Pfad, der dem Datenbanknamen vorangestellt werden soll, der den von SQL Server Compact Edition verwendeten Dateinamen bildet, wenn die Datenbankdatei erstellt oder gelesen wird. Der Standardwert ist "|DataDirectory|". Dies bedeutet, dass die Datei in das angegebene Datenverzeichnis eingefügt wird. </summary>
      <returns>Der Pfad für die Datenbank.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.ProviderInvariantName">
      <summary>Der invariante Anbietername, der die Version von SQL Server Compact Edition angibt, die verwendet werden soll. </summary>
      <returns>Der invariante Anbietername.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SqlConnectionFactory">
      <summary> Instanzen dieser Klasse werden zum Erstellen von DbConnection-Objekten für SQL Server auf Grundlage eines angegebenen Datenbanknamens oder einer angegebenen Verbindungszeichenfolge verwendet. Standardmäßig wird die Verbindung mit ".\SQLEXPRESS" hergestellt.  Dies kann geändert werden, indem beim Erstellen einer Factoryinstanz die Basisverbindungszeichenfolge geändert wird. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.#ctor">
      <summary>Erstellt eine neue Verbindungsfactory mit der BaseConnectionString-Standardeigenschaft "Data Source=.\SQLEXPRESS; Integrated Security=True; MultipleActiveResultSets=True". </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.#ctor(System.String)">
      <summary>Erstellt eine neue Verbindungsfactory mit der angegebenen BaseConnectionString-Eigenschaft. </summary>
      <param name="baseConnectionString">Die Verbindungszeichenfolge, die für andere Datenbankverbindungsoptionen als "Initial Catalog" verwendet werden soll. Dieser Zeichenfolge wird beim Aufruf von CreateConnection der "Inital Catalog" auf Grundlage des Datenbanknamens vorangestellt. </param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlConnectionFactory.BaseConnectionString">
      <summary>Die Verbindungszeichenfolge, die für andere Datenbankverbindungsoptionen als "Initial Catalog" verwendet werden soll. Beim Aufruf von CreateConnection wird dieser Zeichenfolge "Inital Catalog" auf Grundlage des Datenbanknamens vorangestellt. Der Standardausdruck lautet "Data Source=.\SQLEXPRESS; Integrated Security=True; MultipleActiveResultSets=True". </summary>
      <returns>Verbindungszeichenfolge.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.CreateConnection(System.String)">
      <summary>Erstellt auf Grundlage des angegebenen Datenbanknamens oder der angegebenen Verbindungszeichenfolge eine Verbindung für SQL Server. Wenn die angegebene Zeichenfolge das Zeichen "=" enthält, wird sie als vollständige Verbindungszeichenfolge behandelt. Andernfalls wird sie als Datenbankname behandelt. </summary>
      <returns>Eine initialisierte DbConnection.</returns>
      <param name="nameOrConnectionString">Der Datenbankname oder die Verbindungszeichenfolge.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute">
      <summary>Dieses Attribut kann auf eine gesamte abgeleitete <see cref="T:System.Data.Entity.DbContext" />-Klasse oder auf einzelne <see cref="T:System.Data.Entity.DbSet`1" />-Eigenschaften oder <see cref="T:System.Data.Entity.IDbSet`1" />-Eigenschaften in dieser Klasse angewendet werden.  Bei Anwendung des Attributs werden ggf. ermittelte <see cref="T:System.Data.Entity.DbSet`1" />-Eigenschaften oder <see cref="T:System.Data.Entity.IDbSet`1" />-Eigenschaften in das Modell eingeschlossen, jedoch nicht automatisch initialisiert. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute" />-Klasse.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException">
      <summary>Die Ausnahme, die ausgelöst wird, wenn ein Kontext im Database First- oder Model First-Modus aus den <see cref="T:System.Data.Entity.DbContext" />-Vorlagen generiert und dann im Code First-Modus verwendet wird. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" />-Klasse. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" />-Klasse. </summary>
      <param name="info">Das Objekt, das die Daten des serialisierten Objekts enthält.</param>
      <param name="context">Die Kontextinformationen über die Quelle oder das Ziel.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" />-Klasse. </summary>
      <param name="message">Die Meldung.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.String,System.Exception)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" />-Klasse. </summary>
      <param name="message">Die Meldung.</param>
      <param name="innerException">Die innere Ausnahme.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigration">
      <summary>Stellt die Basisklasse für codebasierte Migrationen dar.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Migrations.DbMigration" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddColumn(System.String,System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,System.Data.Entity.Migrations.Model.ColumnModel},System.Object)">
      <summary>     Fügt einen Vorgang hinzu, mit dem einer vorhandenen Tabelle eine Spalte hinzugefügt wird. </summary>
      <param name="table">     Der Name der Tabelle, der die Spalte hinzugefügt werden soll.     Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen. </param>
      <param name="name">     Der Name der hinzuzufügenden Spalte. </param>
      <param name="columnAction">     Eine Aktion, die die hinzuzufügende Spalte angibt, z. B.: c =&amp;gt; c.Int(nullable: false, defaultValue: 3).</param>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddForeignKey(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Object)">
      <summary>     Fügt einen Vorgang zum Erstellen einer neuen Fremdschlüsseleinschränkung hinzu. </summary>
      <param name="dependentTable">     Die Tabelle, die die Fremdschlüsselspalte enthält.     Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen. </param>
      <param name="dependentColumn">Die Fremdschlüsselspalte.</param>
      <param name="principalTable">     Die Tabelle mit der Spalte, auf die dieser Fremdschlüssel verweist.     Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen. </param>
      <param name="principalColumn">     Die Spalte, auf die dieser Fremdschlüssel verweist.      Falls kein Wert angegeben wird, wird auf den Primärschlüssel der Prinzipaltabelle verwiesen. </param>
      <param name="cascadeDelete">     Ein Wert, der angibt, ob die Löschweitergabe für die Fremdschlüsselbeziehung konfiguriert werden soll.     Wenn kein Wert angegeben wird, wird die Löschweitergabe deaktiviert. </param>
      <param name="name">     Der Name der Fremdschlüsseleinschränkung in der Datenbank.     Wenn kein Wert angegeben wird, wird ein eindeutiger Name generiert. </param>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddForeignKey(System.String,System.String[],System.String,System.String[],System.Boolean,System.String,System.Object)">
      <summary>     Fügt einen Vorgang zum Erstellen einer neuen Fremdschlüsseleinschränkung hinzu. </summary>
      <param name="dependentTable">     Die Tabelle, die die Fremdschlüsselspalten enthält.     Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen. </param>
      <param name="dependentColumns">Die Fremdschlüsselspalten.</param>
      <param name="principalTable">     Die Tabelle mit den Spalten, auf die dieser Fremdschlüssel verweist.     Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen. </param>
      <param name="principalColumns">     Die Spalten, auf die dieser Fremdschlüssel verweist.      Falls kein Wert angegeben wird, wird auf den Primärschlüssel der Prinzipaltabelle verwiesen. </param>
      <param name="cascadeDelete">     Ein Wert, der angibt, ob die Löschweitergabe für die Fremdschlüsselbeziehung konfiguriert werden soll.     Wenn kein Wert angegeben wird, wird die Löschweitergabe deaktiviert. </param>
      <param name="name">     Der Name der Fremdschlüsseleinschränkung in der Datenbank.     Wenn kein Wert angegeben wird, wird ein eindeutiger Name generiert. </param>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddPrimaryKey(System.String,System.String,System.String,System.Object)">
      <summary>     Fügt einen Vorgang zum Erstellen eines neuen Primärschlüssels hinzu. </summary>
      <param name="table">     Die Tabelle, die die Primärschlüsselspalte enthält.     Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen. </param>
      <param name="column">Die Primärschlüsselspalte.</param>
      <param name="name">     Der Name des Primärschlüssels in der Datenbank.     Wenn kein Wert angegeben wird, wird ein eindeutiger Name generiert. </param>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddPrimaryKey(System.String,System.String[],System.String,System.Object)">
      <summary>     Fügt einen Vorgang zum Erstellen eines neuen Primärschlüssels auf Grundlage mehrerer Spalten hinzu. </summary>
      <param name="table">     Die Tabelle, die die Primärschlüsselspalten enthält.     Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen. </param>
      <param name="columns">Die Primärschlüsselspalten.</param>
      <param name="name">     Der Name des Primärschlüssels in der Datenbank.     Wenn kein Wert angegeben wird, wird ein eindeutiger Name generiert. </param>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AlterColumn(System.String,System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,System.Data.Entity.Migrations.Model.ColumnModel},System.Object)">
      <summary>     Fügt einen Vorgang hinzu, mit dem die Definition einer vorhandenen Spalte geändert wird. </summary>
      <param name="table">     Der Name der Tabelle, in der die Spalte enthalten ist. Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen. </param>
      <param name="name">Der Name der zu ändernden Spalte.</param>
      <param name="columnAction">     Eine Aktion, die die neue Definition für die Spalte angibt, z. B.: c =&amp;gt; c.String(nullable: false, defaultValue: "none").</param>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateIndex(System.String,System.String,System.Boolean,System.String,System.Object)">
      <summary>     Fügt einen Vorgang zum Erstellen eines Indexes für eine einzelne Spalte hinzu. </summary>
      <param name="table">     Der Name der Tabelle, für die der Index erstellt werden soll.     Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen. </param>
      <param name="column">Der Name der Spalte, für die der Index erstellt werden soll.</param>
      <param name="unique">     Ein Wert, der angibt, ob dieser Index eindeutig ist.     Wenn kein Wert angegeben wird, wird ein nicht eindeutiger Index erstellt. </param>
      <param name="name">     Der Name, der für den Index in der Datenbank verwendet werden soll.     Wenn kein Wert angegeben wird, wird ein eindeutiger Name generiert. </param>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateIndex(System.String,System.String[],System.Boolean,System.String,System.Object)">
      <summary>     Fügt einen Vorgang zum Erstellen eines Indexes für mehrere Spalten hinzu. </summary>
      <param name="table">     Der Name der Tabelle, für die der Index erstellt werden soll.     Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen. </param>
      <param name="columns">Der Name der Spalten, für die der Index erstellt werden soll.</param>
      <param name="unique">     Ein Wert, der angibt, ob dieser Index eindeutig ist.     Wenn kein Wert angegeben wird, wird ein nicht eindeutiger Index erstellt. </param>
      <param name="name">     Der Name, der für den Index in der Datenbank verwendet werden soll.     Wenn kein Wert angegeben wird, wird ein eindeutiger Name generiert. </param>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateTable``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,``0},System.Object)">
      <summary>     Fügt einen Vorgang zum Erstellen einer neuen Tabelle hinzu. </summary>
      <returns>Ein Objekt, das die weitere Konfiguration des Tabellenerstellungsvorgangs ermöglicht.</returns>
      <param name="name">Der Name der Tabelle. Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen.</param>
      <param name="columnsAction">     Eine Aktion, die die Spalten angibt, die in die Tabelle eingeschlossen werden sollen, z. B.: t =&amp;gt; new { Id = t.Int(identity: true), Name = t.String() }.</param>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
      <typeparam name="TColumns">     Die Spalten in diesem Tabellenerstellungsvorgang.      Dieser Typ muss nicht angegeben werden, weil er vom angegebenen columnsAction-Parameter abgeleitet wird. </typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Down">
      <summary>     Vorgänge, die während des Downgradeprozesses ausgeführt werden sollen. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropColumn(System.String,System.String,System.Object)">
      <summary>     Fügt einen Vorgang zum Löschen einer vorhandenen Spalte hinzu. </summary>
      <param name="table">     Der Name der Tabelle, aus der die Spalte gelöscht werden soll.     Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen. </param>
      <param name="name">Der Name der zu löschenden Spalte.</param>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String,System.Object)">
      <summary>     Fügt einen Vorgang zum Löschen einer Fremdschlüsseleinschränkung auf Grundlage des Namens hinzu. </summary>
      <param name="dependentTable">     Die Tabelle, die die Fremdschlüsselspalte enthält.     Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen. </param>
      <param name="name">Der Name der Fremdschlüsseleinschränkung in der Datenbank.</param>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String,System.String,System.String,System.Object)">
      <summary>     Fügt einen Vorgang zum Löschen einer Fremdschlüsseleinschränkung auf Grundlage der Spalte hinzu, die das Ziel der Einschränkung darstellt. </summary>
      <param name="dependentTable">     Die Tabelle, die die Fremdschlüsselspalte enthält.     Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen. </param>
      <param name="dependentColumn">Die Fremdschlüsselspalte.</param>
      <param name="principalTable">     Die Tabelle mit der Spalte, auf die dieser Fremdschlüssel verweist.     Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen. </param>
      <param name="principalColumn">Die Spalten, auf die dieser Fremdschlüssel verweist.</param>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String[],System.String,System.Object)">
      <summary>     Fügt einen Vorgang zum Löschen einer Fremdschlüsseleinschränkung auf Grundlage der Spalten hinzu, die das Ziel der Einschränkung darstellen. </summary>
      <param name="dependentTable">     Die Tabelle, die die Fremdschlüsselspalten enthält.     Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen. </param>
      <param name="dependentColumns">Die Fremdschlüsselspalten.</param>
      <param name="principalTable">     Die Tabelle mit den Spalten, auf die dieser Fremdschlüssel verweist.     Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen. </param>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropIndex(System.String,System.String,System.Object)">
      <summary>     Fügt einen Vorgang zum Löschen eines Indexes auf Grundlage des Namens hinzu. </summary>
      <param name="table">     Der Name der Tabelle, aus der der Index gelöscht werden soll.     Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen. </param>
      <param name="name">Der Name des zu löschenden Indexes.</param>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropIndex(System.String,System.String[],System.Object)">
      <summary>     Fügt einen Vorgang zum Löschen eines Indexes auf Grundlage der Spalten hinzu, die das Ziel des Indexes darstellen. </summary>
      <param name="table">     Der Name der Tabelle, aus der der Index gelöscht werden soll.     Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen. </param>
      <param name="columns">Der Name mindestens einer Spalte, die das Ziel des Indexes darstellt.</param>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropPrimaryKey(System.String,System.Object)">
      <summary>     Fügt einen Vorgang zum Löschen eines vorhandenen Primärschlüssels hinzu, der mit dem Standardnamen erstellt wurde. </summary>
      <param name="table">     Die Tabelle, die die Primärschlüsselspalte enthält.     Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen. </param>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropPrimaryKey(System.String,System.String,System.Object)">
      <summary>     Fügt einen Vorgang zum Löschen eines vorhandenen Primärschlüssels hinzu, der nicht den Standardnamen aufweist. </summary>
      <param name="table">     Die Tabelle, die die Primärschlüsselspalte enthält.     Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen. </param>
      <param name="name">Der Name des zu löschenden Primärschlüssels.</param>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropTable(System.String,System.Object)">
      <summary>     Fügt einen Vorgang zum Löschen einer Tabelle hinzu. </summary>
      <param name="name">     Der Name der zu löschenden Tabelle.     Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen. </param>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Equals(System.Object)">
      <summary>Bestimmt, ob diese Instanz gleich einem angegebenen Objekt ist.</summary>
      <returns>True, wenn das angegebene Objekt gleich dem aktuellen Objekt ist, andernfalls false.</returns>
      <param name="obj">Das Objekt, das mit dem aktuellen Objekt verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.GetHashCode">
      <summary>Ruft die Daten für einen Parameter oder eine Spalte mit dem angegebenen Typ ab.</summary>
      <returns>Ein Hashcode für das aktuelle Objekt.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.GetType">
      <summary>Gibt den Laufzeittyp der aktuellen Instanz zurück.</summary>
      <returns>Die Typinstanz, die den genauen Laufzeittyp der aktuellen Instanz darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.MemberwiseClone">
      <summary>Erstellt eine flache Kopie des aktuellen Objekts.</summary>
      <returns>Eine flache Kopie des aktuellen Objekts.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.MoveTable(System.String,System.String,System.Object)">
      <summary>     Fügt einen Vorgang zum Verschieben einer Tabelle in ein neues Schema hinzu. </summary>
      <param name="name">     Der Name der zu verschiebenden Tabelle.     Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen. </param>
      <param name="newSchema">Das Schema, in das die Tabelle verschoben werden soll.</param>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.RenameColumn(System.String,System.String,System.String,System.Object)">
      <summary>     Fügt einen Vorgang zum Umbenennen einer Spalte hinzu. </summary>
      <param name="table">     Der Name der Tabelle, in der die umzubenennende Spalte enthalten ist.     Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen. </param>
      <param name="name">Der Name der Spalte, die umbenannt werden soll.</param>
      <param name="newName">Der neue Name der Spalte.</param>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.RenameTable(System.String,System.String,System.Object)">
      <summary>     Fügt einen Vorgang zum Umbenennen einer Tabelle hinzu. Um das Schema einer Tabelle zu ändern, verwenden Sie MoveTable.</summary>
      <param name="name">     Der Name der Tabelle, die umbenannt werden soll.     Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen. </param>
      <param name="newName">     Der neue Name der Tabelle.     Der Schemaname ist optional. Falls kein Schema angegeben wird, wird von der Verwendung des dbo-Schemas ausgegangen. </param>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Sql(System.String,System.Boolean,System.Object)">
      <summary>     Fügt einen Vorgang zum Ausführen eines SQL-Befehls hinzu. </summary>
      <param name="sql">Der auszuführende SQL-Befehl.</param>
      <param name="suppressTransaction">     Ein Wert, der angibt, ob der SQL-Befehl außerhalb der Transaktion ausgeführt werden soll, die für den Migrationsprozess verwendet wird.     Wenn kein Wert angegeben wird, wird der SQL-Befehl innerhalb der Transaktion ausgeführt. </param>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Up">
      <summary>     Vorgänge, die während des Upgradeprozesses ausgeführt werden sollen. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrationsConfiguration">
      <summary>Eine Konfiguration für die Verwendung von Migrationen für ein angegebenes Modell. Normalerweise erstellen Sie eine Konfigurationsklasse, die von <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration`1" /> abgeleitet wird, anstatt diese Klasse zu verwenden.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.#ctor">
      <summary>     Initialisiert eine neue Instanz der DbMigrationsConfiguration-Klasse. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.AutomaticMigrationDataLossAllowed">
      <summary>     Ruft einen Wert ab, der angibt, ob während der automatischen Migration Datenverluste zulässig sind, oder legt ihn fest.     Wenn der Wert auf false festgelegt ist, wird eine Ausnahme ausgelöst, wenn während einer automatischen Migration Datenverluste auftreten dürfen. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.AutomaticMigrationsEnabled">
      <summary>     Ruft einen Wert ab, der angibt, ob während der Datenbankmigration automatische Migrationen verwendet werden können, oder legt ihn fest. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.CodeGenerator">
      <summary>     Ruft den Code-Generator ab, der beim Gerüstbau für Migrationen verwendet werden soll, oder legt ihn fest. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.ContextType">
      <summary>     Ruft den abgeleiteten DbContext ab, der das zu migrierende Modell darstellt, oder legt ihn fest. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.GetSqlGenerator(System.String)">
      <summary>     Ruft den SQL-Generator ab, der für einen angegebenen Datenbankanbieter verwendet werden soll. </summary>
      <returns>Der für den Datenbankanbieter festgelegte SQL-Generator.</returns>
      <param name="providerInvariantName">Der Name des Datenbankanbieters, für den der SQL-Generator abgerufen werden soll.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsAssembly">
      <summary>     Ruft die Assembly mit codebasierten Migrationen ab oder legt sie fest. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsDirectory">
      <summary>     Ruft das Unterverzeichnis ab, in dem codebasierte Migrationen gespeichert sind, oder legt es fest. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsNamespace">
      <summary>     Ruft den für codebasierte Migrationen verwendeten Namespace ab oder legt ihn fest. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.SetSqlGenerator(System.String,System.Data.Entity.Migrations.Sql.MigrationSqlGenerator)">
      <summary>     Fügt einen neuen SQL-Generator hinzu, der für einen angegebenen Datenbankanbieter verwendet werden soll. </summary>
      <param name="providerInvariantName">Der Name des Datenbankanbieters, für den der SQL-Generator festgelegt werden soll.</param>
      <param name="migrationSqlGenerator">Der zu verwendende SQL-Generator.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.TargetDatabase">
      <summary>     Ruft einen Wert ab, um die Verbindung der zu migrierenden Datenbank zu überschreiben, oder legt ihn fest. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrationsConfiguration`1">
      <summary>Stellt die Konfiguration dar, die sich auf die Verwendung von Migrationen für ein angegebenes Modell bezieht.</summary>
      <typeparam name="TContext">Der Kontext.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.#ctor">
      <summary>     Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration`1" />-Klasse. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.Equals(System.Object)">
      <summary>Gibt einen Wert zurück, der angibt, ob diese Instanz gleich einem angegebenen Objekt ist.</summary>
      <returns>True, wenn das angegebene Objekt gleich dem aktuellen Objekt ist, andernfalls false.</returns>
      <param name="obj">Das Objekt, das mit dem aktuellen Objekt verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.GetHashCode">
      <summary>Ruft die Daten für einen Parameter oder eine Spalte mit dem angegebenen Typ ab.</summary>
      <returns>Ein Hashcode für das aktuelle Objekt.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.GetType">
      <summary>Gibt den Laufzeittyp der aktuellen Instanz zurück.</summary>
      <returns>Die Typinstanz, die den genauen Laufzeittyp der aktuellen Instanz darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.MemberwiseClone">
      <summary>Erstellt eine flache Kopie des aktuellen Objekts.</summary>
      <returns>Eine flache Kopie des aktuellen Objekts.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.Seed(`0)">
      <summary>     Wird nach dem Upgrade auf die neueste Migration ausgeführt, um das Aktualisieren von Seedingdaten zu ermöglichen. </summary>
      <param name="context">Der zum Aktualisieren der Seedingdaten zu verwendende Kontext.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrator">
      <summary>Wird zum Anwenden vorhandener Migrationen auf eine Datenbank verwendet. Diese Klasse kann verwendet werden, um ein Upgrade und Downgrade auf eine beliebige angegebene Migration auszuführen. Verwenden Sie <see cref="T:System.Data.Entity.Migrations.Design.MigrationScaffolder" />, um ein Migrationsgerüst basierend auf Änderungen am Modell zu erstellen.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.#ctor(System.Data.Entity.Migrations.DbMigrationsConfiguration)">
      <summary>     Initialisiert eine neue Instanz der DbMigrator-Klasse. </summary>
      <param name="configuration">Die Konfiguration, die für den Migrationsprozess verwendet werden soll.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrator.Configuration">
      <summary>     Ruft die Konfiguration ab, die für den Migrationsprozess verwendet wird. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetDatabaseMigrations">
      <summary>     Ruft alle Migrationen ab, die auf die Zieldatenbank angewendet wurden. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetLocalMigrations">
      <summary>     Ruft alle Migrationen ab, die in der konfigurierten Migrationsassembly definiert sind. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetPendingMigrations">
      <summary>     Ruft alle Migrationen ab, die in der Assembly definiert sind, aber nicht auf die Zieldatenbank angewendet wurden. </summary>
    </member>
    <member name="F:System.Data.Entity.Migrations.DbMigrator.InitialDatabase">
      <summary>     Die Migrations-ID, die den Status der Datenbank darstellt, bevor Migrationen angewendet werden. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.Update(System.String)">
      <summary>     Aktualisiert die Zieldatenbank auf eine angegebene Migration. </summary>
      <param name="targetMigration">Die Migration, auf die ein Upgrade oder Downgrade ausgeführt werden soll.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.IDbSetExtensions">
      <summary>Ein Satz von Erweiterungsmethoden für <see cref="T:System.Data.Entity.IDbSet`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.IDbSetExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},``0[])">
      <summary>Fügt Entitäten beim Aufruf von SaveChanges nach dem Schlüssel hinzu bzw. aktualisiert diese. Entspricht einem Upsert-Vorgang aus der Datenbankterminologie. Diese Methode kann beim Datenseeding unter Verwendung von Migrationen hilfreich sein.</summary>
      <param name="set">Ein <see cref="T:System.Data.Entity.IDbSet`1" />-Objekt, das zum Ausführen von Erstellungs-, Lese-, Update- und Löschvorgängen verwendet wird.</param>
      <param name="identifierExpression">Ein Ausdruck, der die Eigenschaften angibt, mit deren Hilfe bestimmt wird, ob ein Hinzufüge- oder Updatevorgang ausgeführt werden soll. </param>
      <param name="entities">Die Entitäten, die hinzugefügt oder aktualisiert werden sollen.</param>
      <typeparam name="TEntity">Der Typ der Entität.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.IDbSetExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},``0[])">
      <summary>Fügt Entitäten beim Aufruf von SaveChanges nach dem Schlüssel hinzu bzw. aktualisiert diese. Entspricht einem Upsert-Vorgang aus der Datenbankterminologie. Diese Methode kann beim Datenseeding unter Verwendung von Migrationen hilfreich sein.</summary>
      <param name="set">Ein <see cref="T:System.Data.Entity.IDbSet`1" />-Objekt, das zum Ausführen von Erstellungs-, Lese-, Update- und Löschvorgängen verwendet wird.</param>
      <param name="entities">Die Entitäten, die hinzugefügt oder aktualisiert werden sollen.</param>
      <typeparam name="TEntity">Der Typ der Entität.</typeparam>
    </member>
    <member name="T:System.Data.Entity.Migrations.Builders.ColumnBuilder">
      <summary>Stellt eine Hilfsklasse bereit, die zum Konfigurieren einer Spalte verwendet wird.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Migrations.Builders.ColumnBuilder" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Binary(System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Byte[],System.String,System.Boolean,System.String,System.String)">
      <summary>Erstellt eine neue Spaltendefinition zum Speichern von Binary-Daten.</summary>
      <returns>Die neu erstellte Spaltendefinition.</returns>
      <param name="nullable">Ein Wert, der angibt, ob die Spalte NULL-Werte zulässt.</param>
      <param name="maxLength">Die maximal zulässige Länge von Arraydaten.</param>
      <param name="fixedLength">Ein Wert, der angibt, ob alle Daten bis zur maximalen Länge mit Leerzeichen aufgefüllt werden sollen.</param>
      <param name="isMaxLength">Ein Wert, der angibt, ob die maximale vom Datenbankanbieter unterstützte Länge verwendet werden soll.</param>
      <param name="defaultValue">Ein konstanter Wert, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="defaultValueSql">Der SQL-Ausdruck, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="timestamp">Ein Wert, der angibt, ob diese Spalte als Zeitstempel konfiguriert werden soll.</param>
      <param name="name">Der Name der Spalte.</param>
      <param name="storeType">Der für den Anbieter spezifische Datentyp, der für diese Spalte verwendet werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Boolean(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String)">
      <summary>Erstellt eine neue Spaltendefinition zum Speichern von Boolean-Daten.</summary>
      <returns>Die neu erstellte Spaltendefinition.</returns>
      <param name="nullable">Ein Wert, der angibt, ob die Spalte NULL-Werte zulässt.</param>
      <param name="defaultValue">Ein konstanter Wert, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="defaultValueSql">Der SQL-Ausdruck, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="name">Der Name der Spalte.</param>
      <param name="storeType">Der für den Anbieter spezifische Datentyp, der für diese Spalte verwendet werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Byte(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Byte},System.String,System.String,System.String)">
      <summary>Erstellt eine neue Spaltendefinition zum Speichern von Byte-Daten.</summary>
      <returns>Die neu erstellte Spaltendefinition.</returns>
      <param name="nullable">Ein Wert, der angibt, ob die Spalte NULL-Werte zulässt.</param>
      <param name="identity">Ein Wert, der angibt, ob die Datenbank während des Einfügevorgangs Werte für diese Spalte generiert.</param>
      <param name="defaultValue">Ein konstanter Wert, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="defaultValueSql">Der SQL-Ausdruck, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="name">Der Name der Spalte.</param>
      <param name="storeType">Der für den Anbieter spezifische Datentyp, der für diese Spalte verwendet werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.DateTime(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.DateTime},System.String,System.String,System.String)">
      <summary>Erstellt eine neue Spaltendefinition zum Speichern von DateTime-Daten.</summary>
      <returns>Die neu erstellte Spaltendefinition.</returns>
      <param name="nullable">Ein Wert, der angibt, ob die Spalte NULL-Werte zulässt.</param>
      <param name="precision">Die Genauigkeit der Spalte.</param>
      <param name="defaultValue">Ein konstanter Wert, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="defaultValueSql">Der SQL-Ausdruck, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="name">Der Name der Spalte.</param>
      <param name="storeType">Der für den Anbieter spezifische Datentyp, der für diese Spalte verwendet werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.DateTimeOffset(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.DateTimeOffset},System.String,System.String,System.String)">
      <summary>Erstellt eine neue Spaltendefinition zum Speichern von DateTimeOffset-Daten.</summary>
      <returns>Die neu erstellte Spaltendefinition.</returns>
      <param name="nullable">Ein Wert, der angibt, ob die Spalte NULL-Werte zulässt.</param>
      <param name="precision">Die Genauigkeit der Spalte.</param>
      <param name="defaultValue">Ein konstanter Wert, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="defaultValueSql">Der SQL-Ausdruck, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="name">Der Name der Spalte.</param>
      <param name="storeType">Der für den Anbieter spezifische Datentyp, der für diese Spalte verwendet werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Decimal(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Decimal},System.String,System.String,System.String,System.Boolean)">
      <summary>Erstellt eine neue Spaltendefinition zum Speichern von Decimal-Daten.</summary>
      <returns>Die neu erstellte Spaltendefinition.</returns>
      <param name="nullable">Ein Wert, der angibt, ob die Spalte NULL-Werte zulässt.</param>
      <param name="precision">Die numerische Genauigkeit der Spalte.</param>
      <param name="scale">Die numerischen Dezimalstellen der Spalte.</param>
      <param name="defaultValue">Ein konstanter Wert, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="defaultValueSql">Ein SQL-Ausdruck, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="name">Der Name der Spalte.</param>
      <param name="storeType">Der für den Anbieter spezifische Datentyp, der für diese Spalte verwendet werden soll.</param>
      <param name="identity">Ein Wert, der angibt, ob die Datenbank während des Einfügevorgangs Werte für diese Spalte generiert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Double(System.Nullable{System.Boolean},System.Nullable{System.Double},System.String,System.String,System.String)">
      <summary>Erstellt eine neue Spaltendefinition zum Speichern von Double-Daten.</summary>
      <returns>Die neu erstellte Spaltendefinition.</returns>
      <param name="nullable">Ein Wert, der angibt, ob die Spalte NULL-Werte zulässt.</param>
      <param name="defaultValue">Ein konstanter Wert, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="defaultValueSql">Der SQL-Ausdruck, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="name">Der Name der Spalte.</param>
      <param name="storeType">Der für den Anbieter spezifische Datentyp, der für diese Spalte verwendet werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Equals(System.Object)">
      <summary>Gibt an, ob das angegebene Objekt mit dem aktuellen Objekt identisch ist.</summary>
      <returns>true, wenn das angegebene Objekt gleich dem aktuellen Objekt ist, andernfalls false.</returns>
      <param name="obj">Das Objekt, das mit dem aktuellen Objekt verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Geography(System.Nullable{System.Boolean},System.Data.Spatial.DbGeography,System.String,System.String,System.String)">
      <summary>Erstellt eine neue Spaltendefinition zum Speichern von Geography-Daten.</summary>
      <returns>Die neu erstellte Spaltendefinition.</returns>
      <param name="nullable">Ein Wert, der angibt, ob die Spalte NULL-Werte zulässt.</param>
      <param name="defaultValue">Ein konstanter Wert, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="defaultValueSql">Der SQL-Ausdruck, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="name">Der Name der Spalte.</param>
      <param name="storeType">Der für den Anbieter spezifische Datentyp, der für diese Spalte verwendet werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Geometry(System.Nullable{System.Boolean},System.Data.Spatial.DbGeometry,System.String,System.String,System.String)">
      <summary>Erstellt eine neue Spaltendefinition zum Speichern von Geometry-Daten.</summary>
      <returns>Die neu erstellte Spaltendefinition.</returns>
      <param name="nullable">Ein Wert, der angibt, ob die Spalte NULL-Werte zulässt.</param>
      <param name="defaultValue">Ein konstanter Wert, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="defaultValueSql">Der SQL-Ausdruck, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="name">Der Name der Spalte.</param>
      <param name="storeType">Der für den Anbieter spezifische Datentyp, der für diese Spalte verwendet werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.GetHashCode">
      <summary>Gibt den Hashcode für diese Instanz zurück.</summary>
      <returns>Der Hashcode für diese Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.GetType">
      <summary>Ruft den Typ der aktuellen Instanz ab.</summary>
      <returns>Der Typ der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Guid(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Guid},System.String,System.String,System.String)">
      <summary>Erstellt eine neue Spaltendefinition zum Speichern von GUID-Daten.</summary>
      <returns>Die neu erstellte Spaltendefinition.</returns>
      <param name="nullable">Ein Wert, der angibt, ob die Spalte NULL-Werte zulässt.</param>
      <param name="identity">Ein Wert, der angibt, ob die Datenbank während des Einfügevorgangs Werte für diese Spalte generiert.</param>
      <param name="defaultValue">Ein konstanter Wert, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="defaultValueSql">Der SQL-Ausdruck, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="name">Der Name der Spalte.</param>
      <param name="storeType">Der für den Anbieter spezifische Datentyp, der für diese Spalte verwendet werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Int(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int32},System.String,System.String,System.String)">
      <summary>Erstellt eine neue Spaltendefinition zum Speichern von Integer-Daten.</summary>
      <returns>Die neu erstellte Spaltendefinition.</returns>
      <param name="nullable">Ein Wert, der angibt, ob die Spalte NULL-Werte zulässt.</param>
      <param name="identity">Ein Wert, der angibt, ob die Datenbank während des Einfügevorgangs Werte für diese Spalte generiert.</param>
      <param name="defaultValue">Ein konstanter Wert, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="defaultValueSql">Der SQL-Ausdruck, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="name">Der Name der Spalte.</param>
      <param name="storeType">Der für den Anbieter spezifische Datentyp, der für diese Spalte verwendet werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Long(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int64},System.String,System.String,System.String)">
      <summary>Erstellt eine neue Spaltendefinition zum Speichern von Long-Daten.</summary>
      <returns>Die neu erstellte Spaltendefinition.</returns>
      <param name="nullable">Ein Wert, der angibt, ob die Spalte NULL-Werte zulässt.</param>
      <param name="identity">Ein Wert, der angibt, ob die Datenbank während des Einfügevorgangs Werte für diese Spalte generiert.</param>
      <param name="defaultValue">Ein konstanter Wert, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="defaultValueSql">Der SQL-Ausdruck, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="name">Der Name der Spalte.</param>
      <param name="storeType">Der für den Anbieter spezifische Datentyp, der für diese Spalte verwendet werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.MemberwiseClone">
      <summary>Erstellt eine flache Kopie des aktuellen Objekts.</summary>
      <returns>Eine flache Kopie des aktuellen Objekts.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Short(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int16},System.String,System.String,System.String)">
      <summary>Erstellt eine neue Spaltendefinition zum Speichern von Short-Daten.</summary>
      <returns>Die neu erstellte Spaltendefinition.</returns>
      <param name="nullable">Ein Wert, der angibt, ob die Spalte NULL-Werte zulässt.</param>
      <param name="identity">Ein Wert, der angibt, ob die Datenbank während des Einfügevorgangs Werte für diese Spalte generiert.</param>
      <param name="defaultValue">Ein konstanter Wert, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="defaultValueSql">Der SQL-Ausdruck, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="name">Der Name der Spalte.</param>
      <param name="storeType">Der für den Anbieter spezifische Datentyp, der für diese Spalte verwendet werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Single(System.Nullable{System.Boolean},System.Nullable{System.Single},System.String,System.String,System.String)">
      <summary>Erstellt eine neue Spaltendefinition zum Speichern von Single-Daten.</summary>
      <returns>Die neu erstellte Spaltendefinition.</returns>
      <param name="nullable">Ein Wert, der angibt, ob die Spalte NULL-Werte zulässt.</param>
      <param name="defaultValue">Ein konstanter Wert, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="defaultValueSql">Der SQL-Ausdruck, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="name">Der Name der Spalte.</param>
      <param name="storeType">Der für den Anbieter spezifische Datentyp, der für diese Spalte verwendet werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.String(System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.String)">
      <summary>Erstellt eine neue Spaltendefinition zum Speichern von String-Daten.</summary>
      <returns>Die neu erstellte Spaltendefinition.</returns>
      <param name="nullable">Ein Wert, der angibt, ob die Spalte NULL-Werte zulässt.</param>
      <param name="maxLength">Die maximale zulässige Länge von Zeichenfolgendaten.</param>
      <param name="fixedLength">Ein Wert, der angibt, ob alle Daten bis zur maximalen Länge mit Leerzeichen aufgefüllt werden sollen.</param>
      <param name="isMaxLength">Ein Wert, der angibt, ob die maximale vom Datenbankanbieter unterstützte Länge verwendet werden soll.</param>
      <param name="unicode">Ein Wert, der angibt, ob die Spalte Unicode-Inhalt unterstützt.</param>
      <param name="defaultValue">Ein konstanter Wert, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="defaultValueSql">Der SQL-Ausdruck, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="name">Der Name der Spalte.</param>
      <param name="storeType">Der für den Anbieter spezifische Datentyp, der für diese Spalte verwendet werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Time(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.TimeSpan},System.String,System.String,System.String)">
      <summary>Erstellt eine neue Spaltendefinition zum Speichern von Time-Daten.</summary>
      <returns>Die neu erstellte Spaltendefinition.</returns>
      <param name="nullable">Ein Wert, der angibt, ob die Spalte NULL-Werte zulässt.</param>
      <param name="precision">Die Genauigkeit der Spalte.</param>
      <param name="defaultValue">Ein konstanter Wert, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="defaultValueSql">Der SQL-Ausdruck, der als Standardwert für diese Spalte verwendet werden soll.</param>
      <param name="name">Der Name der Spalte.</param>
      <param name="storeType">Der für den Anbieter spezifische Datentyp, der für diese Spalte verwendet werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Builders.TableBuilder`1">
      <summary>Eine Hilfsklasse, die zur weiteren Konfiguration einer Tabelle verwendet wird, die auf der Basis eines CreateTable-Aufrufs von <see cref="T:System.Data.Entity.Migrations.DbMigration" /> erstellt wurde.</summary>
      <typeparam name="TColumns">Der Typ der Spalten in der Tabelle.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.#ctor(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.DbMigration)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Migrations.Builders.TableBuilder`1" />-Klasse.</summary>
      <param name="createTableOperation">Der Tabellenerstellungsvorgang, der weiter konfiguriert werden soll.</param>
      <param name="migration">Die Migration, in der die Tabelle erstellt wird.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist.</summary>
      <returns>true, wenn das angegebene Objekt gleich dem aktuellen Objekt ist, andernfalls false.</returns>
      <param name="obj">Das mit dem aktuellen Objekt zu vergleichende Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.ForeignKey(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.String,System.Object)">
      <summary>Gibt eine Fremdschlüsseleinschränkung an, die für die Tabelle erstellt werden soll. </summary>
      <returns>Die gleiche Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="principalTable">Der Name der Tabelle, auf die sich die Fremdschlüsseleinschränkung bezieht.</param>
      <param name="dependentKeyExpression">Ein Lambdaausdruck, der die Eigenschaften des Fremdschlüssels darstellt.      Wenn der Fremdschlüssel aus mehreren Eigenschaften besteht, geben Sie einen anonymen Typ einschließlich der Eigenschaften an.</param>
      <param name="cascadeDelete">Ein Wert, der angibt, ob die Löschweitergabe für die Fremdschlüsseleinschränkung konfiguriert werden soll. </param>
      <param name="name">Der Name dieser Fremdschlüsseleinschränkung. Wenn kein Name angegeben wird, wird ein Standardname berechnet.</param>
      <param name="anonymousArguments">Zusätzliche Argumente, die von Anbietern verarbeitet werden können. Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.GetHashCode">
      <summary>Ruft den Hashcode für das aktuelle Objekt ab.</summary>
      <returns>Der Hashcode für die aktuelle Objekt.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.GetType">
      <summary>Ruft den Typ des aktuellen Objekts ab.</summary>
      <returns>Der Typ des aktuellen Objekts.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.Index(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Object)">
      <summary>Gibt einen Index an, der für die Tabelle erstellt werden soll.</summary>
      <returns>Die gleiche Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="indexExpression">Ein Lambdaausdruck, der die zu indizierende Eigenschaft darstellt.Wenn mehrere Eigenschaften indiziert werden sollen, geben Sie einen anonymen Typ einschließlich der Eigenschaften an.</param>
      <param name="unique">Ein Wert, der angibt, ob es sich um einen eindeutigen Index handelt.</param>
      <param name="anonymousArguments">Zusätzliche Argumente, die von Anbietern verarbeitet werden können. Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.MemberwiseClone">
      <summary>Erstellt eine flache Kopie des aktuellen Objekts.</summary>
      <returns>Eine flache Kopie des aktuellen Objekts.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.PrimaryKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Object)">
      <summary>Gibt einen Primärschlüssel für die Tabelle an. </summary>
      <returns>Die gleiche Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="keyExpression">Ein Lambdaausdruck, der die Eigenschaft darstellt, die als primärer Schlüssel verwendet werden soll. Wenn der primäre Schlüssel aus mehreren Eigenschaften besteht, geben Sie einen anonymen Typ einschließlich der Eigenschaften an.</param>
      <param name="name">Der Name des Primärschlüssels. Wenn NULL angegeben wird, wird ein Standardname generiert.</param>
      <param name="anonymousArguments">Zusätzliche Argumente, die von Anbietern verarbeitet werden können. Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.ToString">
      <summary>Gibt eine Zeichenfolgendarstellung des aktuellen Objekts zurück.</summary>
      <returns>Eine Zeichenfolgendarstellung des aktuellen Objekts.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator">
      <summary>Generiert C#-Code für eine codebasierte Migration.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Byte)">
      <summary>Generiert Code, um den Standardwert für eine <see cref="T:System.Byte" />-Spalte anzugeben.</summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Byte[])">
      <summary>Generiert Code, um den Standardwert für eine <see cref="T:System.Byte[]" />-Spalte anzugeben.</summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String)">
      <summary>Generiert die Primärcodedatei, die vom Benutzer angezeigt und bearbeitet werden kann. </summary>
      <returns>Der generierte Code.</returns>
      <param name="operations">Vorgänge, die von der Migration ausgeführt werden sollen.</param>
      <param name="namespace">Der Namespace, in dem Code generiert werden soll.</param>
      <param name="className">Der Name der zu generierenden Klasse.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.String},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code, um mithilfe eines Lambdaausdrucks eine Gruppe von Spaltennamen anzugeben.</summary>
      <param name="columns">Die Spalten, für die Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation" />.</summary>
      <param name="addColumnOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" />.</summary>
      <param name="addForeignKeyOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" />.</summary>
      <param name="addPrimaryKeyOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" />.</summary>
      <param name="alterColumnOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>Generiert Code, um die Definition für <see cref="T:System.Data.Entity.Migrations.Model.ColumnModel" /> anzugeben.</summary>
      <param name="column">Die Spaltendefinition, für die Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
      <param name="emitName">Ein Wert, der angibt, ob der Spaltenname in die Definition eingeschlossen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" />.</summary>
      <param name="createIndexOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.</summary>
      <param name="createTableOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" />.</summary>
      <param name="dropColumnOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" />.</summary>
      <param name="dropForeignKeyOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" />.</summary>
      <param name="dropIndexOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation" />.</summary>
      <param name="dropPrimaryKeyOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.DropTableOperation" />.</summary>
      <param name="dropTableOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" />.</summary>
      <param name="moveTableOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" />.</summary>
      <param name="renameColumnOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" />.</summary>
      <param name="renameTableOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.SqlOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.SqlOperation" />.</summary>
      <param name="sqlOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Spatial.DbGeography)">
      <summary>Generiert Code, um den Standardwert für eine <see cref="T:System.Data.Spatial.DbGeography" />-Spalte anzugeben.</summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Spatial.DbGeometry)">
      <summary>Generiert Code, um den Standardwert für eine <see cref="T:System.Data.Spatial.DbGeometry" />-Spalte anzugeben.</summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.DateTime)">
      <summary>Generiert Code, um den Standardwert für eine <see cref="T:System.DateTime" />-Spalte anzugeben.</summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.DateTimeOffset)">
      <summary>Generiert Code, um den Standardwert für eine <see cref="T:System.DateTimeOffset" />-Spalte anzugeben.</summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Decimal)">
      <summary>Generiert Code, um den Standardwert für eine <see cref="T:System.Decimal" />-Spalte anzugeben.</summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Guid)">
      <summary>Generiert Code, um den Standardwert für eine <see cref="T:System.Guid" />-Spalte anzugeben.</summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Int64)">
      <summary>Generiert Code, um den Standardwert für eine <see cref="T:System.Int64" />-Spalte anzugeben.</summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Object)">
      <summary>Generiert Code, um den Standardwert für eine Spalte eines unbekannten Datentyps anzugeben.</summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Single)">
      <summary>Generiert Code, um den Standardwert für eine <see cref="T:System.Single" />-Spalte anzugeben.</summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String)">
      <summary>Generiert Code, um den Standardwert für eine <see cref="T:System.String" />-Spalte anzugeben.</summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>Generiert die CodeBehind-Datei mit Migrationsmetadaten.</summary>
      <returns>Der generierte Code.</returns>
      <param name="migrationId">Eindeutiger Bezeichner der Migration.</param>
      <param name="operations">Die Vorgänge, die von der Migration ausgeführt werden sollen.</param>
      <param name="sourceModel">Das Quellmodell, das in den Migrationsmetadaten gespeichert werden soll.</param>
      <param name="targetModel">Das Zielmodell, das in den Migrationsmetadaten gespeichert werden soll.</param>
      <param name="namespace">Der Namespace, in dem Code generiert werden soll.</param>
      <param name="className">Der Name der zu generierenden Klasse.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String,System.String,System.String,System.String,System.String)">
      <summary>Generiert die CodeBehind-Datei mit Migrationsmetadaten.</summary>
      <returns>Der generierte Code.</returns>
      <param name="migrationId">Eindeutiger Bezeichner der Migration.</param>
      <param name="sourceModel">Das Quellmodell, das in den Migrationsmetadaten gespeichert werden soll.</param>
      <param name="targetModel">Das Zielmodell, das in den Migrationsmetadaten gespeichert werden soll.</param>
      <param name="namespace">Der Namespace, in dem Code generiert werden soll.</param>
      <param name="className">Der Name der zu generierenden Klasse.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.TimeSpan)">
      <summary>Generiert Code, um den Standardwert für eine <see cref="T:System.TimeSpan" />-Spalte anzugeben.</summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code, um <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" /> als Teil von <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> auszuführen.</summary>
      <param name="addForeignKeyOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code, um <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" /> als Teil von <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> auszuführen.</summary>
      <param name="addPrimaryKeyOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code, um <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" /> als Teil von <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> auszuführen.</summary>
      <param name="createIndexOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Quote(System.String)">
      <summary>Versieht einen Bezeichner mit geeigneten Escapezeichen, damit er in einer Zeichenfolge gespeichert werden kann.</summary>
      <returns>Der in Anführungszeichen gesetzte Bezeichner.</returns>
      <param name="identifier">Der Bezeichner, der in Anführungszeichen gesetzt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.ScrubName(System.String)">
      <summary>Entfernt ungültige Zeichen aus dem Namen eines Datenbankartefakts.</summary>
      <returns>Der bereinigte Name.</returns>
      <param name="name">Der zu bereinigende Name.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.TranslateColumnType(System.Data.Metadata.Edm.PrimitiveTypeKind)">
      <summary>Ruft den Typnamen ab, der für eine Spalte des angegebenen Datentyps verwendet werden soll.</summary>
      <returns>Der in der generierten Migration zu verwendende Typname.</returns>
      <param name="primitiveTypeKind">Der zu übersetzende Datentyp.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteClassEnd(System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert den abschließenden Code für eine Klasse, die mit "WriteClassStart" gestartet wurde.</summary>
      <param name="namespace">Der Namespace, in dem Code generiert werden soll.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteClassStart(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Generiert einen Namespace unter Verwendung von Anweisungen und einer Klassendefinition.</summary>
      <param name="namespace">Der Namespace, in dem Code generiert werden soll.</param>
      <param name="className">Der Name der zu generierenden Klasse.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
      <param name="base">Die Basisklasse der generierten Klasse.</param>
      <param name="designer">Ein Wert, der angibt, ob diese Klasse für eine CodeBehind-Datei generiert wird.</param>
      <param name="namespaces">Die Namespaces, für die "Using"-Direktiven hinzugefügt werden. Bei NULL werden die aus "GetDefaultNamespaces" zurückgegebenen Namespaces verwendet.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteProperty(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert eine Eigenschaft, um das Quell- oder Zielmodell in der CodeBehind-Datei zurückzugeben.</summary>
      <param name="name">Der Name der Eigenschaft.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.MigrationCodeGenerator">
      <summary>Die Basisklasse für Anbieter, von denen Code für codebasierte Migrationen generiert wird.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Migrations.Design.MigrationCodeGenerator" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>     Generiert den Code, der dem Benutzerprojekt hinzugefügt werden soll. </summary>
      <returns>Der generierte Code.</returns>
      <param name="migrationId">Eindeutiger Bezeichner der Migration.</param>
      <param name="operations">Vorgänge, die von der Migration ausgeführt werden sollen.</param>
      <param name="sourceModel">Das Quellmodell, das in den Migrationsmetadaten gespeichert werden soll.</param>
      <param name="targetModel">Das Zielmodell, das in den Migrationsmetadaten gespeichert werden soll.</param>
      <param name="namespace">Der Namespace, in dem Code generiert werden soll.</param>
      <param name="className">Der Name der zu generierenden Klasse.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.GetDefaultNamespaces(System.Boolean)">
      <summary> Ruft die Standardnamespaces ab, die als "using"-Direktive oder "Imports"-Direktive für generierten Code ausgegeben werden müssen. </summary>
      <returns>Eine sortierte Liste von Namespacenamen.</returns>
      <param name="designer">Ein Wert, der angibt, ob diese Klasse für eine CodeBehind-Datei generiert wird.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.GetNamespaces(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation})">
      <summary> Ruft die Namespaces ab, die als "using"-Direktive oder "Imports"-Direktive ausgegeben werden müssen, um den durch die angegebenen Vorgänge generierten Code zu behandeln. </summary>
      <returns>Eine sortierte Liste von Namespacenamen.</returns>
      <param name="operations">Die Vorgänge, für die Code generiert wird.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.MigrationScaffolder">
      <summary>Erstellt ein Gerüst codebasierter Migrationen, um ausstehende Modelländerungen auf die Datenbank anzuwenden.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.#ctor(System.Data.Entity.Migrations.DbMigrationsConfiguration)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Migrations.Design.MigrationScaffolder" />-Klasse. </summary>
      <param name="migrationsConfiguration">Die Konfiguration, die für die Erstellung des Gerüsts verwendet werden soll.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.MigrationScaffolder.Namespace">
      <summary> Ruft den Namespace ab, der im generierten Code der Migration verwendet werden soll, oder legt ihn fest.  Standardmäßig entspricht dieser dem "MigrationsNamespace" des an den Konstruktor übergebenen Migrationskonfigurationsobjekts. Bei VB.NET-Projekten wird dieser Namespace aktualisiert, um den Stammnamespace des Projekts zu berücksichtigen. </summary>
      <returns>Der im generierten Code der Migration verwendete Namespace.  </returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.Scaffold(System.String)">
      <summary>     Erstellt ein Gerüst einer codebasierten Migration, um ausstehende Modelländerungen auf die Datenbank anzuwenden. </summary>
      <returns>Die Migration, für die ein Gerüst erstellt wurde.</returns>
      <param name="migrationName">Der für das Migrationsgerüst zu verwendende Name.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.Scaffold(System.String,System.Boolean)">
      <summary>Erstellt ein Gerüst einer codebasierten Migration, um ausstehende Modelländerungen auf die Datenbank anzuwenden.</summary>
      <returns>Die Migration, für die ein Gerüst erstellt wurde.</returns>
      <param name="migrationName">Der für das Migrationsgerüst zu verwendende Name.</param>
      <param name="ignoreChanges">true, um Modelländerungen auszuschließen, andernfalls false.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.ScaffoldInitialCreate">
      <summary> Erstellt das Gerüst der anfänglichen codebasierten Migration nach einem zuvor ausgeführten Datenbankinitialisierer.</summary>
      <returns>Die Migration, für die ein Gerüst erstellt wurde.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.ScaffoldedMigration">
      <summary>   Stellt eine codebasierte Migration dar, für die ein Gerüst erstellt wurde und die in eine Datei geschrieben werden kann.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ScaffoldedMigration.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Migrations.Design.ScaffoldedMigration" />-Klasse.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.DesignerCode">
      <summary>     Ruft das Migrationscodegerüst ab, das in einer CodeBehind-Datei gespeichert werden soll, oder legt es fest. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.Directory">
      <summary>     Ruft das Unterverzeichnis im Benutzerprojekt ab, in dem diese Migration gespeichert werden soll, oder legt es fest. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.Language">
      <summary>     Ruft die für diese Migration zu verwendende Programmiersprache ab oder legt sie fest.     Wird normalerweise für die Dateierweiterung des generierten Codes verwendet. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.MigrationId">
      <summary>     Ruft den eindeutigen Bezeichner für diese Migration ab oder legt ihn fest.     Wird normalerweise für den Dateinamen des generierten Codes verwendet. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.UserCode">
      <summary>     Ruft das Migrationscodegerüst ab, das vom Benutzer bearbeitet werden kann, oder legt es fest. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.ToolingException">
      <summary>Stellt eine Ausnahme dar, die beim Ausführen eines Vorgangs in einer anderen "AppDomain" in <see cref="T:System.Data.Entity.Migrations.Design.ToolingFacade" /> ausgelöst wurde.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Migrations.Design.ToolingException" />-Klasse mit serialisierten Daten.</summary>
      <param name="info">Die serialisierten Objektdaten über die ausgelöste Ausnahme.</param>
      <param name="context">Die Kontextinformationen über die Quelle oder das Ziel.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingException.#ctor(System.String,System.String,System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Migrations.Design.ToolingException" />-Klasse mit einer angegebenen Fehlermeldung, inneren Ausnahme und Stapelüberwachung.</summary>
      <param name="message">Die Fehlermeldung, die den Grund für die Ausnahme erklärt.</param>
      <param name="innerType">Der Typ der ausgelösten Ausnahme.</param>
      <param name="innerStackTrace">Die Stapelüberwachung der ausgelösten Ausnahme.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Füllt <see cref="T:System.Runtime.Serialization.SerializationInfo" /> mit den Daten auf, die zum Serialisieren des Zielobjekts erforderlich sind.</summary>
      <param name="info">Die mit Daten aufzufüllende <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</param>
      <param name="context">Das Ziel dieser Serialisierung.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingException.InnerStackTrace">
      <summary>Ruft die Stapelüberwachung der ausgelösten Ausnahme ab. </summary>
      <returns>Die Stapelüberwachung der ausgelösten Ausnahme.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingException.InnerType">
      <summary>Ruft den Typ der ausgelösten Ausnahme ab. </summary>
      <returns>Der Typ der ausgelösten Ausnahme.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.ToolingFacade">
      <summary>Stellt eine Hilfsklasse dar, die von Entwurfszeittools zum Ausführen migrationsbezogener Befehle verwendet wird, die mit einer in Visual Studio bearbeiteten Anwendung interagieren müssen.Da die Anwendung bearbeitet wird, müssen die Assemblys in eine separate "AppDomain" geladen werden, um sicherzustellen, dass immer die neueste Version geladen ist. Die Datei App.config oder Web.config aus dem Startprojekt wird ebenfalls kopiert, um sicherzustellen, dass jede Konfiguration angewendet wird.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.#ctor(System.String,System.String,System.String,System.String,System.String,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Migrations.Design.ToolingFacade" />-Klasse. </summary>
      <param name="assemblyName">Der Name der Assembly, in der die zu verwendende Migrationskonfiguration enthalten ist. </param>
      <param name="configurationTypeName">Der durch den Namespace angegebene Name der Migrationskonfiguration, der verwendet werden soll. </param>
      <param name="workingDirectory">Das Arbeitsverzeichnis, in dem die kompilierten Assemblys enthalten sind. </param>
      <param name="configurationFilePath">Der Pfad der CONFIG-Datei aus dem Startprojekt. </param>
      <param name="dataDirectory">Der Pfad des Anwendungsdatenverzeichnisses aus dem Startprojekt. Normalerweise das Verzeichnis App_Data für Webanwendungen oder das Arbeitsverzeichnis für ausführbare Dateien. </param>
      <param name="connectionStringInfo">Die Verbindung mit der zu migrierenden Datenbank. Wenn NULL angegeben wird, wird die Standardverbindung für den Kontext verwendet. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Dispose">
      <summary>Gibt sämtliche von <see cref="T:System.Data.Entity.Migrations.Design.ToolingFacade" /> verwendeten Ressourcen frei.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Dispose(System.Boolean)">
      <summary>Gibt sämtliche von <see cref="T:System.Data.Entity.Migrations.Design.ToolingFacade" /> verwendeten Ressourcen frei.</summary>
      <param name="disposing">true, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben, false, um nur nicht verwaltete Ressourcen freizugeben. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Finalize">
      <summary>Gibt alle von der Fassade verwendeten, nicht verwalteten Ressourcen frei. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetContextTypes">
      <summary>Ruft den vollqualifizierten Namen aller von <see cref="T:System.Data.Entity.DbContext" /> abgeleiteten Typen ab. </summary>
      <returns>Alle gefundenen Kontexttypen.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetDatabaseMigrations">
      <summary>Ruft eine Liste aller Migrationen ab, die auf die Datenbank angewendet wurden. </summary>
      <returns>Die IDs der angewendeten Migrationen.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetPendingMigrations">
      <summary>Ruft eine Liste aller Migrationen ab, die nicht auf die Datenbank angewendet wurden. </summary>
      <returns>Die IDs der ausstehenden Migrationen.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogInfoDelegate">
      <summary>Ruft eine Aktion ab, die zum Protokollieren von Informationen ausgeführt wird, oder legt sie fest. </summary>
      <returns>Eine Aktion, die zum Protokollieren von Informationen ausgeführt wird.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogVerboseDelegate">
      <summary>Ruft eine Aktion ab, die zum Protokollieren ausführlicher Informationen ausgeführt wird, oder legt sie fest. </summary>
      <returns>Eine Aktion, die zum Protokollieren ausführlicher Informationen ausgeführt wird.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogWarningDelegate">
      <summary>Ruft eine Aktion ab, die zum Protokollieren von Warnungen ausgeführt wird, oder legt sie fest. </summary>
      <returns>Eine Aktion, die zum Protokollieren von Warnungen ausgeführt wird.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Scaffold(System.String,System.String,System.String,System.Boolean)">
      <summary>Erstellt ein Gerüst einer codebasierten Migration, um ausstehende Modelländerungen anzuwenden.</summary>
      <returns>Die Migration, für die ein Gerüst erstellt wurde.</returns>
      <param name="migrationName">Der Name der generierten Migration.</param>
      <param name="language">Die Programmiersprache der generierten Migration.</param>
      <param name="rootNamespace">Der Stammnamespace des Projekts, dem die Migration hinzugefügt wird.</param>
      <param name="ignoreChanges">true, um Modelländerungen auszuschließen, andernfalls false.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.ScaffoldInitialCreate(System.String,System.String)">
      <summary>Erstellt das Gerüst der anfänglichen codebasierten Migration nach einem zuvor ausgeführten Datenbankinitialisierer. </summary>
      <returns>Die Migration, für die ein Gerüst erstellt wurde.</returns>
      <param name="language">Die Programmiersprache der generierten Migration.</param>
      <param name="rootNamespace">Der Stammnamespace des Projekts, dem die Migration hinzugefügt wird.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.ScriptUpdate(System.String,System.String,System.Boolean)">
      <summary>Generiert ein SQL-Skript, das zwischen zwei Migrationen generiert werden soll. </summary>
      <returns>Das generierte SQL-Skript.</returns>
      <param name="sourceMigration">Die Migration, von der aktualisiert werden soll. Wenn NULL angegeben wird, wird ein Updateskript für die aktuelle Datenbank erstellt. </param>
      <param name="targetMigration">Die Migration, auf die aktualisiert werden soll. Wenn NULL angegeben wird, wird ein Skript für ein Update auf die neueste Migration erstellt. </param>
      <param name="force">Der Wert, der angibt, ob während der automatischen Migration Datenverluste zulässig sind.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Update(System.String,System.Boolean)">
      <summary>Aktualisiert die Datenbank auf die angegebene Migration. </summary>
      <param name="targetMigration">Die ID der Migration, die migriert werden soll. Wenn NULL angegeben wird, wird die Datenbank auf die neueste Migration aktualisiert. </param>
      <param name="force">Der Wert, der angibt, ob während der automatischen Migration Datenverluste zulässig sind.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator">
      <summary>Generiert Visual Basic .NET-Code für eine codebasierte Migration.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Byte)">
      <summary>Generiert Code, um den Standardwert für eine <see cref="T:System.Byte" />-Spalte anzugeben. </summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Byte[])">
      <summary>Generiert Code, um den Standardwert für eine <see cref="T:System.Byte[]" />-Spalte anzugeben. </summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String)">
      <summary>Generiert die Primärcodedatei, die vom Benutzer angezeigt und bearbeitet werden kann.</summary>
      <returns>Der generierte Code.</returns>
      <param name="operations">Die Vorgänge, die von der Migration ausgeführt werden sollen.</param>
      <param name="namespace">Der Namespace, in dem Code generiert werden soll.</param>
      <param name="className">Der Name der zu generierenden Klasse.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.String},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code, um mithilfe eines Lambdaausdrucks eine Gruppe von Spaltennamen anzugeben.</summary>
      <param name="columns">Die Spalten, für die Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation" />.</summary>
      <param name="addColumnOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" />.</summary>
      <param name="addForeignKeyOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" />. </summary>
      <param name="addPrimaryKeyOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" />.</summary>
      <param name="alterColumnOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>Generiert Code, um die Definition für <see cref="T:System.Data.Entity.Migrations.Model.ColumnModel" /> anzugeben. </summary>
      <param name="column">Die Spaltendefinition, für die Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
      <param name="emitName">Ein Wert, der angibt, ob der Spaltenname in die Definition eingeschlossen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" />.</summary>
      <param name="createIndexOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.</summary>
      <param name="createTableOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" />.</summary>
      <param name="dropColumnOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" />. </summary>
      <param name="dropForeignKeyOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" />. </summary>
      <param name="dropIndexOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation" />. </summary>
      <param name="dropPrimaryKeyOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.DropTableOperation" />. </summary>
      <param name="dropTableOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" />. </summary>
      <param name="moveTableOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" />. </summary>
      <param name="renameColumnOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" />. </summary>
      <param name="renameTableOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.SqlOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Generiert Code zur Ausführung von <see cref="T:System.Data.Entity.Migrations.Model.SqlOperation" />. </summary>
      <param name="sqlOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Spatial.DbGeography)">
      <summary>     Generiert Code, um den Standardwert für eine <see cref="T:System.Data.Spatial.DbGeography" />-Spalte anzugeben. </summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Spatial.DbGeometry)">
      <summary>     Generiert Code, um den Standardwert für eine <see cref="T:System.Data.Spatial.DbGeometry" />-Spalte anzugeben. </summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.DateTime)">
      <summary>     Generiert Code, um den Standardwert für eine <see cref="T:System.DateTime" />-Spalte anzugeben. </summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.DateTimeOffset)">
      <summary>     Generiert Code, um den Standardwert für eine <see cref="T:System.DateTimeOffset" />-Spalte anzugeben. </summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Decimal)">
      <summary>     Generiert Code, um den Standardwert für eine <see cref="T:System.Decimal" />-Spalte anzugeben. </summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Guid)">
      <summary>     Generiert Code, um den Standardwert für eine <see cref="T:System.Guid" />-Spalte anzugeben. </summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Int64)">
      <summary>     Generiert Code, um den Standardwert für eine <see cref="T:System.Int64" />-Spalte anzugeben. </summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Object)">
      <summary>     Generiert Code, um den Standardwert für eine Spalte eines unbekannten Datentyps anzugeben. </summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Single)">
      <summary>     Generiert Code, um den Standardwert für eine <see cref="T:System.Single" />-Spalte anzugeben. </summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String)">
      <summary>     Generiert Code, um den Standardwert für eine <see cref="T:System.String" />-Spalte anzugeben. </summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>Generiert die CodeBehind-Datei mit Migrationsmetadaten. </summary>
      <returns>Der generierte Code.</returns>
      <param name="migrationId">Der eindeutige Bezeichner der Migration.</param>
      <param name="operations">Die Vorgänge, die von der Migration ausgeführt werden sollen.</param>
      <param name="sourceModel">Das Quellmodell, das in den Migrationsmetadaten gespeichert werden soll.</param>
      <param name="targetModel">Das Zielmodell, das in den Migrationsmetadaten gespeichert werden soll.</param>
      <param name="namespace">Der Namespace, in dem Code generiert werden soll.</param>
      <param name="className">Der Name der zu generierenden Klasse.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String,System.String,System.String,System.String,System.String)">
      <summary>Generiert die CodeBehind-Datei mit Migrationsmetadaten. </summary>
      <returns>Der generierte Code.</returns>
      <param name="migrationId">Der eindeutige Bezeichner der Migration.</param>
      <param name="sourceModel">Das Quellmodell, das in den Migrationsmetadaten gespeichert werden soll.</param>
      <param name="targetModel">Das Zielmodell, das in den Migrationsmetadaten gespeichert werden soll.</param>
      <param name="namespace">Der Namespace, in dem Code generiert werden soll.</param>
      <param name="className">Der Name der zu generierenden Klasse.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.TimeSpan)">
      <summary>     Generiert Code, um den Standardwert für eine <see cref="T:System.TimeSpan" />-Spalte anzugeben. </summary>
      <returns>Der Code, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der als Standard zu verwendende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Generiert Code, um <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" /> als Teil von <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> auszuführen. </summary>
      <param name="addForeignKeyOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Generiert Code, um <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" /> als Teil von <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> auszuführen. </summary>
      <param name="addPrimaryKeyOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Generiert Code, um <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" /> als Teil von <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> auszuführen. </summary>
      <param name="createIndexOperation">Der Vorgang, für den Code generiert wird.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Quote(System.String)">
      <summary>     Versieht einen Bezeichner mit geeigneten Escapezeichen, damit er in einer Zeichenfolge gespeichert werden kann. </summary>
      <returns>Der in Anführungszeichen gesetzte Bezeichner.</returns>
      <param name="identifier">Der Bezeichner, der in Anführungszeichen gesetzt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.ScrubName(System.String)">
      <summary>     Entfernt ungültige Zeichen aus dem Namen eines Datenbankartefakts. </summary>
      <returns>Der bereinigte Name.</returns>
      <param name="name">Der zu bereinigende Name.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.TranslateColumnType(System.Data.Metadata.Edm.PrimitiveTypeKind)">
      <summary>     Ruft den Typnamen ab, der für eine Spalte des angegebenen Datentyps verwendet werden soll. </summary>
      <returns>Der in der generierten Migration zu verwendende Typname.</returns>
      <param name="primitiveTypeKind">Der zu übersetzende Datentyp.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteClassEnd(System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary> Generiert den abschließenden Code für eine Klasse, die mit "WriteClassStart" gestartet wurde. </summary>
      <param name="namespace">Der Namespace, in dem Code generiert werden soll.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteClassStart(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
      <summary>     Generiert einen Namespace unter Verwendung von Anweisungen und einer Klassendefinition. </summary>
      <param name="namespace">Der Namespace, in dem Code generiert werden soll.</param>
      <param name="className">Der Name der zu generierenden Klasse.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
      <param name="base">Die Basisklasse der generierten Klasse.</param>
      <param name="designer">Ein Wert, der angibt, ob diese Klasse für eine CodeBehind-Datei generiert wird.</param>
      <param name="namespaces">Die Namespaces, für die "Imports"-Direktiven hinzugefügt werden. Bei NULL werden die aus "GetDefaultNamespaces" zurückgegebenen Namespaces verwendet.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteProperty(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Generiert eine Eigenschaft, um das Quell- oder Zielmodell in der CodeBehind-Datei zurückzugeben. </summary>
      <param name="name">Der Name der Eigenschaft.</param>
      <param name="writer">Der Textwriter, dem generierter Code hinzugefügt werden soll.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.History.HistoryRow">
      <summary>   Diese Klasse wird von Code First-Migrationen verwendet, um den Migrationsverlauf aus der Datenbank zu lesen bzw. in die Datenbank zu schreiben. Sie sollte nicht von anderem Code verwendet werden und ist nur insofern öffentlich, als Entity Framework im teilweise vertrauenswürdigen Modus darauf zugreifen kann. Die Klasse kann in zukünftigen Versionen geändert oder entfernt werden.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.History.HistoryRow.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Migrations.History.HistoryRow" />-Klasse.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.CreatedOn">
      <summary>     Ruft das Datum und die Uhrzeit der Erstellung des Migrationsverlaufseintrags ab oder legt ihn fest. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.MigrationId">
      <summary>     Ruft die ID der Migration ab, für die diese Zeile steht, oder legt sie fest. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.Model">
      <summary>     Ruft den Zustand des Modells nach Anwendung der Migration ab oder legt ihn fest. </summary>
      <returns>Gibt <see cref="T:System.Byte" /> zurück.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.ProductVersion">
      <summary>     Ruft die Entity Framework-Version ab, von der dieser Eintrag erstellt wurde, oder legt sie fest. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException">
      <summary>Stellt einen Fehler dar, der auftritt, wenn eine automatische Migration zu einem Datenverlust führen würde.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException.#ctor(System.String)">
      <summary>     Initialisiert eine neue Instanz der AutomaticDataLossException-Klasse. </summary>
      <param name="message">Die Meldung, die den Fehler beschreibt.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException">
      <summary>Stellt einen Fehler dar, der auftritt, wenn nach Anwendung der letzten Migration ausstehende Modelländerungen vorhanden sind und die automatische Migration deaktiviert ist.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException.#ctor(System.String)">
      <summary>     Initialisiert eine neue Instanz der AutomaticMigrationsDisabledException-Klasse. </summary>
      <param name="message">Die Meldung, die den Fehler beschreibt.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata">
      <summary>Stellt zusätzliche Metadaten über eine codebasierte Migration bereit.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Id">
      <summary>     Ruft den eindeutigen Bezeichner für die Migration ab. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Source">
      <summary>     Ruft den Zustand des Modells vor Ausführung der Migration ab. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Target">
      <summary>     Ruft den Zustand des Modells nach Ausführung der Migration ab. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigrationsException">
      <summary>Stellt Fehler dar, die in der Pipeline von Code First-Migrationen auftreten.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Initialisiert eine neue Instanz der MigrationsException-Klasse mit serialisierten Daten. </summary>
      <param name="info">Die <see cref="T:System.Runtime.Serialization.SerializationInfo" />, die die serialisierten Objektdaten für die ausgelöste Ausnahme enthält.</param>
      <param name="context">Der <see cref="T:System.Runtime.Serialization.StreamingContext" />, der die Kontextinformationen über die Quelle oder das Ziel enthält.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor(System.String)">
      <summary> Initialisiert eine neue Instanz der MigrationsException-Klasse. </summary>
      <param name="message">Die Meldung, die den Fehler beschreibt.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger">
      <summary>Basisklasse für Protokollierungen, die für den Migrationsprozess verwendet werden können.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Info(System.String)">
      <summary>     Protokolliert eine Informationsmeldung. </summary>
      <param name="message">Die zu protokollierende Meldung.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Verbose(System.String)">
      <summary>     Protokolliert zusätzliche Informationen, die dem Benutzer nur angezeigt werden sollen, wenn er die Ausgabe ausführlicher Informationen anfordert. </summary>
      <param name="message">Die zu protokollierende Meldung.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Warning(System.String)">
      <summary>     Protokolliert eine Warnung, über die der Benutzer benachrichtigt werden soll. </summary>
      <param name="message">Die zu protokollierende Meldung.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorBase">
      <summary>Basisklasse für Decorator-Elemente, die den hauptsächlichen <see cref="T:System.Data.Entity.Migrations.DbMigrator" /> umschließen.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase)">
      <summary>     Initialisiert eine neue Instanz der MigratorBase-Klasse. </summary>
      <param name="innerMigrator">Der Migrator, den dieser Decorator umschließt.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Configuration">
      <summary>     Ruft die Konfiguration ab, die für den Migrationsprozess verwendet wird. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetDatabaseMigrations">
      <summary>     Ruft eine Liste der Migrationen ab, die auf die Datenbank angewendet wurden. </summary>
      <returns>Liste der Migrations-IDs</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetLocalMigrations">
      <summary>     Ruft eine Liste der Migrationen ab, die in der Assembly definiert sind. </summary>
      <returns>Liste der Migrations-IDs</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetPendingMigrations">
      <summary>     Ruft eine Liste der ausstehenden Migrationen ab, die nicht auf die Datenbank angewendet wurden. </summary>
      <returns>Liste der Migrations-IDs</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Update">
      <summary>     Aktualisiert die Zieldatenbank auf die neueste Migration. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Update(System.String)">
      <summary>     Aktualisiert die Zieldatenbank auf eine angegebene Migration. </summary>
      <param name="targetMigration">Die Migration, auf die ein Upgrade oder Downgrade ausgeführt werden soll.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorLoggingDecorator">
      <summary>Decorator zur Bereitstellung von Protokollierungsinformationen im Verlauf von Migrationsvorgängen.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorLoggingDecorator.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase,System.Data.Entity.Migrations.Infrastructure.MigrationsLogger)">
      <summary>     Initialisiert eine neue Instanz der MigratorLoggingDecorator-Klasse. </summary>
      <param name="innerMigrator">Der Migrator, den dieser Decorator umschließt.</param>
      <param name="logger">Die Protokollierung, in die Meldungen geschrieben werden.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator">
      <summary>Stellt einen Decorator dar, der ein SQL-Skript erstellt anstatt Änderungen auf die Datenbank anzuwenden. Wenn <see cref="T:System.Data.Entity.Migrations.DbMigrator" /> mit diesem Decorator umschlossen wird, wird <see cref="T:System.Data.Entity.Migrations.DbMigrator" /> daran gehindert, Änderungen auf die Zieldatenbank anzuwenden.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator" />-Klasse. </summary>
      <param name="innerMigrator">Der Migrator, den dieser Decorator umschließt.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator.ScriptUpdate(System.String,System.String)">
      <summary>Aktualisiert die Datenbank auf die Zielmigration.</summary>
      <returns>Das generierte SQL-Skript.</returns>
      <param name="sourceMigration">Die Quellmigration.</param>
      <param name="targetMigration">Die Migration, auf die ein Upgrade oder Downgrade ausgeführt werden soll.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddColumnOperation">
      <summary>Stellt eine Spalte dar, die einer Tabelle hinzugefügt wird.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Object)">
      <summary>     Initialisiert eine neue Instanz der AddColumnOperation-Klasse. </summary>
      <param name="table">Der Name der Tabelle, der die Spalte hinzugefügt werden soll.</param>
      <param name="column">Die Details zur hinzugefügten Spalte.</param>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Column">
      <summary>     Ruft die Details zur hinzugefügten Spalte ab. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Inverse">
      <summary>     Ruft einen Vorgang zum Löschen der hinzugefügten Spalte ab. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.IsDestructiveChange">
      <summary>Ruft {fügen Sie hier Text ein} ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Table">
      <summary>     Ruft den Name der Tabelle ab, der die Spalte hinzugefügt werden soll. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation">
      <summary>Stellt eine Fremdschlüsseleinschränkung dar, die einer Tabelle hinzugefügt wird.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.#ctor(System.Object)">
      <summary>     Initialisiert eine neue Instanz der AddForeignKeyOperation-Klasse.     Die Eigenschaften "PrincipalTable", "PrincipalColumns", "DependentTable" und "DependentColumns" sollten ebenfalls aufgefüllt werden. </summary>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.CascadeDelete">
      <summary>     Ruft einen Wert ab, der angibt, ob die Löschweitergabe für die Fremdschlüsseleinschränkung konfiguriert werden soll, oder legt ihn fest. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.CreateCreateIndexOperation">
      <summary>     Ruft einen Vorgang ab, durch den ein Index für die Fremdschlüsselspalte(n) erstellt wird. </summary>
      <returns>Ein Vorgang zum Hinzufügen des Indexes.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.Inverse">
      <summary>     Ruft einen Vorgang zum Löschen der Fremdschlüsseleinschränkung ab. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.IsDestructiveChange">
      <summary>Ruft einen Wert ab, der angibt, ob eine Änderung destruktiv ist.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.PrincipalColumns">
      <summary>     Die Namen der Tabellen, auf die sich die Fremdschlüsseleinschränkung bezieht. </summary>
      <returns>Die Spaltennamen.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation">
      <summary>Stellt einen Vorgang dar, durch den einer Tabelle ein Primärschlüssel hinzugefügt wird.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation.#ctor(System.Object)">
      <summary>     Initialisiert eine neue Instanz der AddPrimaryKeyOperation-Klasse.     Die Table-Eigenschaft und die Columns-Eigenschaft sollten ebenfalls aufgefüllt werden. </summary>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation.Inverse">
      <summary>     Ruft einen Vorgang zum Löschen des Primärschlüssels ab. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AlterColumnOperation">
      <summary>Stellt einen Vorgang zum Ändern einer vorhandenen Spalte dar.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AlterColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Boolean,System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Object)">
      <summary>     Initialisiert eine neue Instanz der AlterColumnOperation-Klasse. </summary>
      <param name="table">Der Name der Tabelle, der die Spalte angehört.</param>
      <param name="column">Details zu den Änderungen, die für die Spalte ausgeführt werden.</param>
      <param name="isDestructiveChange">Ein Wert, der angibt, ob diese Änderung zu einem Datenverlust führt.</param>
      <param name="inverse">Ein Vorgang, durch den die Änderung der Spalte rückgängig gemacht wird.</param>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AlterColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Boolean,System.Object)">
      <summary>     Initialisiert eine neue Instanz der AlterColumnOperation-Klasse. </summary>
      <param name="table">Der Name der Tabelle, der die Spalte angehört.</param>
      <param name="column">Details zu den Änderungen, die für die Spalte ausgeführt werden.</param>
      <param name="isDestructiveChange">Ein Wert, der angibt, ob diese Änderung zu einem Datenverlust führt.</param>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Column">
      <summary>     Ruft die neue Definition für die Spalte ab. </summary>
      <returns>Die Spaltendefinition.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Inverse">
      <summary>     Ruft einen Vorgang ab, durch den die Änderung rückgängig gemacht wird.     Die Umkehrung kann nicht automatisch berechnet werden. Wenn der Vorgang dem Konstruktor nicht übermittelt wurde, gibt diese Eigenschaft NULL zurück. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.IsDestructiveChange">
      <summary>Ruft einen Wert ab, der angibt, ob die Änderung destruktiv ist.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Table">
      <summary>     Ruft den Namen der Tabelle ab, der die Spalte angehört. </summary>
      <returns>Der Tabellenname.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ColumnModel">
      <summary>Stellt Informationen über eine Spalte dar.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.#ctor(System.Data.Metadata.Edm.PrimitiveTypeKind)">
      <summary>     Initialisiert eine neue Instanz der Klasse. </summary>
      <param name="type">Der Datentyp für diese Spalte.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.#ctor(System.Data.Metadata.Edm.PrimitiveTypeKind,System.Data.Metadata.Edm.TypeUsage)">
      <summary>     Initialisiert eine neue Instanz der Klasse. </summary>
      <param name="type">Der Datentyp für diese Spalte.</param>
      <param name="typeUsage">     Zusätzliche Informationen über den Datentyp.     Dazu gehören Details wie die maximale Länge, Zulässigkeit von NULL-Werten usw. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.ClrDefaultValue">
      <summary>     Ruft den Standardwert für den CLR-Typ ab, der dem Datenbanktyp dieser Spalte entspricht. </summary>
      <returns>Der Standardwert.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.ClrType">
      <summary>     Ruft den CLR-Typ ab, der dem Datenbanktyp dieser Spalte entspricht. </summary>
      <returns>Der CLR-Typ.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.DefaultValue">
      <summary>     Ruft einen konstanten Wert ab, der als Standardwert für diese Spalte verwendet werden soll, oder legt ihn fest. </summary>
      <returns>Der Standardwert für die Spalte.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.DefaultValueSql">
      <summary>     Ruft einen SQL-Ausdruck ab, der als Standardwert für diese Spalte verwendet werden soll, oder legt ihn fest. </summary>
      <returns>Der Standardwert für die Spalte.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsFixedLength">
      <summary>     Ruft einen Wert ab, der angibt, ob diese Spalte eine feste Länge aufweist, oder legt ihn fest.     Gilt nur für Arraydatentypen. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsIdentity">
      <summary>     Ruft einen Wert ab, der angibt, ob Werte für diese Spalte von der Datenbank mithilfe des Identitätsmusters generiert werden, oder legt ihn fest. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.IsNarrowerThan(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Common.DbProviderManifest)">
      <summary>     Bestimmt, ob diese Spalte einen enger gefassten Datentyp aufweist als eine andere Spalte.     Dient zur Bestimmung, ob ein Datenverlust auftritt, wenn die angegebene Spaltendefinition in diese Definition geändert wird. </summary>
      <returns>TRUE, wenn diese Spalte einen enger gefassten Datentyp aufweist.</returns>
      <param name="column">Die Spalte, mit der verglichen wird.</param>
      <param name="providerManifest">Details zum verwendeten Datenbankanbieter.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsNullable">
      <summary>     Ruft einen Wert ab, der angibt, ob diese Spalte NULL-Werte speichern kann, oder legt ihn fest. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsTimestamp">
      <summary>     Ruft einen Wert ab, der angibt, ob diese Spalte als Zeitstempel konfiguriert werden soll, oder legt ihn fest. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsUnicode">
      <summary>     Ruft einen Wert ab, der angibt, ob diese Spalte Unicode-Zeichen unterstützt, oder legt ihn fest.     Gilt nur für Textdatentypen. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.MaxLength">
      <summary>     Ruft die maximale Länge für diese Spalte ab oder legt sie fest.     Gilt nur für Arraydatentypen. </summary>
      <returns>Die maximale Länge.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.Name">
      <summary>     Ruft den Namen der Spalte ab oder legt ihn fest. </summary>
      <returns>Der Name.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.Precision">
      <summary>     Ruft die Genauigkeit für diese Spalte ab oder legt sie fest.     Gilt nur für Dezimaldatentypen. </summary>
      <returns>Die Genauigkeit.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.Scale">
      <summary>     Ruft die Dezimalstellen für diese Spalte ab oder legt sie fest.     Gilt nur für Dezimaldatentypen. </summary>
      <returns>Die Dezimalstellen.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.StoreType">
      <summary>     Ruft einen für den Anbieter spezifischen Datentyp ab, der für diese Spalte verwendet werden soll, oder legt ihn fest. </summary>
      <returns>Der Datentyp.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.Type">
      <summary>     Ruft den Datentyp für diese Spalte ab. </summary>
      <returns>Der Datentyp.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.TypeUsage">
      <summary>     Ruft zusätzliche Informationen über den Datentyp dieser Spalte ab.     Dazu gehören Details wie die maximale Länge, Zulässigkeit von NULL-Werten usw. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.CreateIndexOperation">
      <summary>Stellt einen Vorgang zum Erstellen eines Datenbankindexes dar.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.CreateIndexOperation.#ctor(System.Object)">
      <summary>     Initialisiert eine neue Instanz der CreateIndexOperation-Klasse.     Die Table-Eigenschaft und die Columns-Eigenschaft sollten ebenfalls aufgefüllt werden. </summary>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.Inverse">
      <summary>     Ruft einen Vorgang zum Löschen dieses Indexes ab. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.IsDestructiveChange">
      <summary>Ruft einen Wert ab, der angibt, ob die Änderung destruktiv ist.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.IsUnique">
      <summary>     Ruft einen Wert ab, der angibt, ob dieser Index eindeutig ist, oder legt ihn fest. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.CreateTableOperation">
      <summary>Stellt einen Vorgang zum Erstellen einer Tabelle dar.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.CreateTableOperation.#ctor(System.String,System.Object)">
      <summary>     Initialisiert eine neue Instanz der CreateTableOperation-Klasse. </summary>
      <param name="name">Der Name der zu erstellenden Tabelle.</param>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Columns">
      <summary>     Ruft die Spalten ab, die in die neue Tabelle eingeschlossen werden sollen. </summary>
      <returns>Die einzuschließenden Spalten.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Inverse">
      <summary>     Ruft einen Vorgang zum Löschen der Tabelle ab. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.IsDestructiveChange">
      <summary>Ruft einen Wert ab, der angibt, ob die Änderung destruktiv ist.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Name">
      <summary>     Ruft den Namen der zu erstellenden Tabelle ab. </summary>
      <returns>Der Name.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.PrimaryKey">
      <summary>     Ruft den Primärschlüssel für die neue Tabelle ab oder legt ihn fest. </summary>
      <returns>Der Primärschlüssel.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DeleteHistoryOperation">
      <summary>Stellt das Löschen eines neuen Datensatzes aus der Migrationsverlaufstabelle dar. Die Migrationsverlaufstabelle wird verwendet, um ein Protokoll der auf die Datenbank angewendeten Migrationen zu speichern.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DeleteHistoryOperation.#ctor(System.String,System.String,System.Object)">
      <summary>     Initialisiert eine neue Instanz der DeleteHistoryOperation-Klasse. </summary>
      <param name="table">Der Name der Migrationsverlaufstabelle.</param>
      <param name="migrationId">Die ID des zu löschenden Migrationsdatensatzes.</param>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropColumnOperation">
      <summary>Stellt eine Spalte dar, die aus einer Tabelle gelöscht wird.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Data.Entity.Migrations.Model.AddColumnOperation,System.Object)">
      <summary>     Initialisiert eine neue Instanz der DropColumnOperation-Klasse. </summary>
      <param name="table">Der Name der Tabelle, aus der die Spalte gelöscht werden soll.</param>
      <param name="name">Der Name der zu löschenden Spalte.</param>
      <param name="inverse">Der Vorgang, durch den der Löschvorgang rückgängig gemacht wird.</param>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Object)">
      <summary>     Initialisiert eine neue Instanz der DropColumnOperation-Klasse. </summary>
      <param name="table">Der Name der Tabelle, aus der die Spalte gelöscht werden soll.</param>
      <param name="name">Der Name der zu löschenden Spalte.</param>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Inverse">
      <summary>     Ruft einen Vorgang ab, durch den das Löschen der Spalte rückgängig gemacht wird.     Die Umkehrung kann nicht automatisch berechnet werden. Wenn der Vorgang dem Konstruktor nicht übermittelt wurde, gibt diese Eigenschaft NULL zurück. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.IsDestructiveChange">
      <summary>Ruft einen Wert ab, der angibt, ob die Änderung destruktiv ist.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Name">
      <summary>     Ruft den Namen der zu löschenden Spalte ab. </summary>
      <returns>Der Spaltenname.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Table">
      <summary>     Ruft den Namen der Tabelle ab, aus der die Spalte gelöscht werden soll. </summary>
      <returns>Der Tabellenname.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation">
      <summary>Stellt eine Fremdschlüsseleinschränkung dar, die aus einer Tabelle gelöscht wird.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.#ctor(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Object)">
      <summary>     Initialisiert eine neue Instanz der DropForeignKeyOperation-Klasse. </summary>
      <param name="inverse">Der Vorgang, durch den die Fremdschlüsseleinschränkung nach dem Löschen wiederhergestellt wird.</param>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.#ctor(System.Object)">
      <summary>     Initialisiert eine neue Instanz der DropForeignKeyOperation-Klasse.     Die Eigenschaften "PrincipalTable", "DependentTable" und "DependentColumns" sollten ebenfalls aufgefüllt werden. </summary>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.CreateDropIndexOperation">
      <summary>     Ruft einen Vorgang ab, durch den der zugeordnete Index für die Fremdschlüsselspalte(n) gelöscht wird. </summary>
      <returns>Ein Vorgang zum Löschen des Indexes.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.Inverse">
      <summary>     Ruft einen Vorgang ab, durch den die Fremdschlüsseleinschränkung nach dem Löschen wiederhergestellt wird.     Die Umkehrung kann nicht automatisch berechnet werden. Wenn der Vorgang dem Konstruktor nicht übermittelt wurde, gibt diese Eigenschaft NULL zurück. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.IsDestructiveChange">
      <summary>Ruft einen Wert ab, der angibt, ob die Änderung destruktiv ist.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropIndexOperation">
      <summary>Stellt einen Vorgang zum Löschen eines vorhandenen Indexes dar.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropIndexOperation.#ctor(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Object)">
      <summary>     Initialisiert eine neue Instanz der DropIndexOperation-Klasse. </summary>
      <param name="inverse">Der Vorgang, durch den das Löschen des Indexes rückgängig gemacht wird.</param>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropIndexOperation.#ctor(System.Object)">
      <summary>     Initialisiert eine neue Instanz der DropIndexOperation-Klasse. </summary>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropIndexOperation.Inverse">
      <summary>     Ruft einen Vorgang ab, durch den das Löschen des Indexes rückgängig gemacht wird.     Die Umkehrung kann nicht automatisch berechnet werden. Wenn der Vorgang dem Konstruktor nicht übermittelt wurde, gibt diese Eigenschaft NULL zurück. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropIndexOperation.IsDestructiveChange">
      <summary>Ruft einen Wert ab, der angibt, ob eine Änderung destruktiv ist.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation">
      <summary>Stellt einen Vorgang zum Löschen eines Primärschlüssels aus einer Tabelle dar.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation.#ctor(System.Object)">
      <summary>     Initialisiert eine neue Instanz der DropPrimaryKeyOperation-Klasse.     Die Table-Eigenschaft und die Columns-Eigenschaft sollten ebenfalls aufgefüllt werden. </summary>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation.Inverse">
      <summary>     Ruft einen Vorgang zum Hinzufügen des Primärschlüssels ab. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropTableOperation">
      <summary>Stellt einen Vorgang zum Löschen einer vorhandenen Tabelle dar.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.CreateTableOperation,System.Object)">
      <summary>     Initialisiert eine neue Instanz der DropTableOperation-Klasse. </summary>
      <param name="name">Der Name der zu löschenden Tabelle.</param>
      <param name="inverse">Ein Vorgang, durch den das Löschen der Tabelle rückgängig gemacht wird.</param>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Object)">
      <summary>     Initialisiert eine neue Instanz der DropTableOperation-Klasse. </summary>
      <param name="name">Der Name der zu löschenden Tabelle.</param>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.Inverse">
      <summary>     Ruft einen Vorgang ab, durch den das Löschen der Tabelle rückgängig gemacht wird.     Die Umkehrung kann nicht automatisch berechnet werden. Wenn der Vorgang dem Konstruktor nicht übermittelt wurde, gibt diese Eigenschaft NULL zurück. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.IsDestructiveChange">
      <summary>Ruft einen Wert ab, der angibt, ob die Änderung destruktiv ist.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.Name">
      <summary>     Ruft den Namen der zu löschenden Tabelle ab. </summary>
      <returns>Der Tabellenname.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ForeignKeyOperation">
      <summary>Basisklasse für Änderungen, die sich auf Fremdschlüsseleinschränkungen auswirken.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ForeignKeyOperation.#ctor(System.Object)">
      <summary>     Initialisiert eine neue Instanz der ForeignKeyOperation-Klasse. </summary>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.DependentColumns">
      <summary>     Die Namen der Fremdschlüsselspalte(n). </summary>
      <returns>Die Spaltennamen.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.DependentTable">
      <summary>     Ruft den Namen der Tabelle ab, in der sich die Fremdschlüsselspalten befinden, oder legt ihn fest. </summary>
      <returns>Der Tabellenname.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.HasDefaultName">
      <summary>     Ruft einen Wert ab, der angibt, ob ein bestimmter Name für diese Fremdschlüsseleinschränkung angegeben wurde. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.Name">
      <summary>     Ruft den Namen dieser Fremdschlüsseleinschränkung ab oder legt ihn fest.     Wenn kein Name angegeben wird, wird ein Standardname berechnet. </summary>
      <returns>Der Name der Einschränkung.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.PrincipalTable">
      <summary>     Ruft den Namen der Tabelle ab, auf den sich die Fremdschüsseleinschränkung bezieht, oder legt ihn fest. </summary>
      <returns>Der Tabellenname.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.HistoryOperation">
      <summary>Allgemeine Basisklasse für Vorgänge, die sich auf die Migrationsverlaufstabelle auswirken.  Die Migrationsverlaufstabelle wird verwendet, um ein Protokoll der auf die Datenbank angewendeten Migrationen zu speichern.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.HistoryOperation.#ctor(System.String,System.String,System.Object)">
      <summary>     Initialisiert eine neue Instanz der HistoryOperation-Klasse. </summary>
      <param name="table">Der Name der Migrationsverlaufstabelle.</param>
      <param name="migrationId">Der Name der Migration, auf die sich der Vorgang auswirkt.</param>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.HistoryOperation.IsDestructiveChange">
      <summary>Ruft einen Wert ab, der angibt, ob die Änderung destruktiv ist.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.HistoryOperation.MigrationId">
      <summary>     Ruft den Namen der Migration ab, auf die sich der Vorgang auswirkt. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.HistoryOperation.Table">
      <summary>     Ruft den Namen der Migrationsverlaufstabelle ab. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.IndexOperation">
      <summary>Allgemeine Basisklasse für indexbezogene Vorgänge.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.IndexOperation.#ctor(System.Object)">
      <summary>     Initialisiert eine neue Instanz der IndexOperation-Klasse. </summary>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Columns">
      <summary>     Ruft die indizierten Spalten ab oder legt sie fest. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.HasDefaultName">
      <summary>     Ruft einen Wert ab, der angibt, ob ein bestimmter Name für diesen Index angegeben wurde. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Name">
      <summary>     Ruft den Namen dieses Indexes ab oder legt ihn fest.     Wenn kein Name angegeben wird, wird ein Standardname berechnet. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Table">
      <summary>     Ruft die Tabelle ab, der der Index angehört, oder legt sie fest. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.InsertHistoryOperation">
      <summary>Stellt einen Vorgang zum Einfügen eines neuen Datensatzes in die Migrationsverlaufstabelle dar. Die Migrationsverlaufstabelle wird verwendet, um ein Protokoll der auf die Datenbank angewendeten Migrationen zu speichern.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.InsertHistoryOperation.#ctor(System.String,System.String,System.Byte[],System.Object)">
      <summary>     Initialisiert eine neue Instanz der InsertHistoryOperation-Klasse. </summary>
      <param name="table">Der Name der Migrationsverlaufstabelle.</param>
      <param name="migrationId">Die ID des einzufügenden Migrationsdatensatzes.</param>
      <param name="model">Der in der Modellspalte zu speichernde Wert.</param>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.InsertHistoryOperation.IsDestructiveChange">
      <summary>Ruft {fügen Sie hier Text ein} ab.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.InsertHistoryOperation.Model">
      <summary>     Ruft den in der Verlaufstabelle zu speichernden Wert ab, der das Zielmodell der Migration angibt. </summary>
      <returns>Gibt <see cref="T:System.Byte" /> zurück.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.InsertHistoryOperation.ProductVersion">
      <summary>     Ruft den in der Verlaufstabelle zu speichernden Wert ab, der die Entity Framework-Version angibt, mit der diese Migration erstellt wurde. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.MigrationOperation">
      <summary>Stellt einen Vorgang zum Ändern eines Datenbankschemas dar.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.MigrationOperation.#ctor(System.Object)">
      <summary>     Initialisiert eine neue Instanz der MigrationOperation-Klasse. </summary>
      <param name="anonymousArguments">       Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.AnonymousArguments">
      <summary>     Ruft zusätzliche Argumente ab, die von Anbietern verarbeitet werden können. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.Inverse">
      <summary>     Ruft einen Vorgang ab, durch den dieser Vorgang rückgängig gemacht wird. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.IsDestructiveChange">
      <summary>     Ruft einen Wert ab, der angibt, ob dieser Vorgang zu einem Datenverlust führen kann. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.MoveTableOperation">
      <summary>Stellt einen Vorgang zum Verschieben einer Tabelle zwischen zwei Schemas dar.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.MoveTableOperation.#ctor(System.String,System.String,System.Object)">
      <summary>     Initialisiert eine neue Instanz der MoveTableOperation-Klasse. </summary>
      <param name="name">Der Name der zu verschiebenden Tabelle.</param>
      <param name="newSchema">Der Name des Schemas, in das die Tabelle verschoben werden soll.</param>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.Inverse">
      <summary>     Ruft einen Vorgang ab, durch den die Tabelle in ihr ursprüngliches Schema zurückverschoben wird. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.IsDestructiveChange">
      <summary>Ruft einen Wert ab, der angibt, ob die Änderung destruktiv ist.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.Name">
      <summary>     Ruft den Namen der zu verschiebenden Tabelle ab. </summary>
      <returns>Der Name.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.NewSchema">
      <summary>     Ruft den Namen des Schemas ab, in das die Tabelle verschoben werden soll. </summary>
      <returns>Der Schemaname.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.PrimaryKeyOperation">
      <summary>Allgemeine Basisklasse für Vorgänge, die sich auf Primärschlüssel auswirken.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.#ctor(System.Object)">
      <summary>     Initialisiert eine neue Instanz der PrimaryKeyOperation-Klasse. </summary>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Columns">
      <summary>     Ruft die Spalte(n) ab, aus denen der Primärschlüssel besteht. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.HasDefaultName">
      <summary>     Ruft einen Wert ab, der angibt, ob ein bestimmter Name für diesen Primärschlüssel angegeben wurde. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.IsDestructiveChange">
      <summary>Ruft einen Wert ab, der angibt, ob dieser Vorgang zu einem Datenverlust führen kann.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Name">
      <summary>     Ruft den Namen dieses Primärschlüssels ab oder legt ihn fest.     Wenn kein Name angegeben wird, wird ein Standardname berechnet. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Table">
      <summary>     Ruft den Namen der Tabelle ab, in der der Primärschlüssel enthalten ist, oder legt ihn fest. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.RenameColumnOperation">
      <summary>Stellt einen Vorgang zum Umbenennen einer vorhandenen Spalte dar.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.RenameColumnOperation.#ctor(System.String,System.String,System.String,System.Object)">
      <summary>     Initialisiert eine neue Instanz der RenameColumnOperation-Klasse. </summary>
      <param name="table">Der Name der Tabelle, der die Spalte angehört.</param>
      <param name="name">Der Name der Spalte, die umbenannt werden soll.</param>
      <param name="newName">Der neue Name der Spalte.</param>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Inverse">
      <summary>     Ruft einen Vorgang ab, durch den die Umbenennung rückgängig gemacht wird. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.IsDestructiveChange">
      <summary>Ruft einen Wert ab, der angibt, ob die Änderung destruktiv ist.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Name">
      <summary>     Ruft den Namen der umzubenennenden Spalte ab. </summary>
      <returns>Der Name.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.NewName">
      <summary>     Ruft den neuen Namen für die Spalte ab. </summary>
      <returns>Der neue Name.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Table">
      <summary>     Ruft den Namen der Tabelle ab, der die Spalte angehört. </summary>
      <returns>Der Tabellenname.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.RenameTableOperation">
      <summary>  Stellt einen Vorgang zum Umbenennen einer vorhandenen Tabelle dar.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.RenameTableOperation.#ctor(System.String,System.String,System.Object)">
      <summary>     Initialisiert eine neue Instanz der RenameTableOperation-Klasse. </summary>
      <param name="name">Der Name der Tabelle, die umbenannt werden soll.</param>
      <param name="newName">Der neue Name der Tabelle.</param>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.Inverse">
      <summary>     Ruft einen Vorgang ab, durch den die Umbenennung rückgängig gemacht wird. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.IsDestructiveChange">
      <summary>Ruft einen Wert ab, der angibt, ob die Änderung destruktiv ist.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.Name">
      <summary>     Ruft den Namen der umzubenennenden Tabelle ab. </summary>
      <returns>Der Name.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.NewName">
      <summary>     Ruft den neuen Namen für die Tabelle ab. </summary>
      <returns>Der neue Name.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.SqlOperation">
      <summary>Stellt eine anbieterspezifische SQL-Anweisung dar, die direkt für die Zieldatenbank ausgeführt wird.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.SqlOperation.#ctor(System.String,System.Object)">
      <summary>     Initialisiert eine neue Instanz der SqlOperation-Klasse. </summary>
      <param name="sql">Der auszuführende SQL-Befehl.</param>
      <param name="anonymousArguments">     Zusätzliche Argumente, die von Anbietern verarbeitet werden können.      Verwenden Sie Syntax für anonyme Typen zum Angeben von Argumenten, z. B. 'new { SampleArgument = "MyValue" }'. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.IsDestructiveChange">
      <summary>Ruft einen Wert ab, der angibt, ob dieser Vorgang zu einem Datenverlust führen kann.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.Sql">
      <summary>     Ruft den auszuführenden SQL-Befehl ab. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.SuppressTransaction">
      <summary>     Ruft einen Wert ab, der angibt, ob diese Anweisung außerhalb des Transaktionsbereichs ausgeführt werden soll, in dem der Migrationsprozess normalerweise ausgeführt wird, oder legt ihn fest.     Wenn auf TRUE festgelegt, wird für diesen Vorgang bei einem Migrationsprozessfehler kein Rollback ausgeführt. </summary>
      <returns>true, wenn für diesen Vorgang bei einem Migrationsfehler kein Rollback ausgeführt wird.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator">
      <summary>   Allgemeine Basisklasse für Anbieter, die anbieteragnostische Migrationsvorgänge in Datenbankanbieter-spezifische SQL-Befehle konvertieren.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String)">
      <summary>     Konvertiert eine Gruppe von Migrationsvorgängen in Datenbankanbieter-spezifische SQL-Befehle. </summary>
      <returns>Eine Liste von SQL-Anweisungen, mit denen Migrationsvorgänge ausgeführt werden.</returns>
      <param name="migrationOperations">Die zu konvertierenden Vorgänge.</param>
      <param name="providerManifestToken">Das Token, das die Zielversion der Datenbank darstellt.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.MigrationStatement">
      <summary>Stellt einen Migrationsvorgang dar, der in eine SQL-Anweisung übersetzt wurde.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationStatement.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Migrations.Sql.MigrationStatement" />-Klasse.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Sql.MigrationStatement.Sql">
      <summary>     Ruft die SQL-Anweisung zum Ausführen dieses Migrationsvorgangs ab oder legt sie fest. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Sql.MigrationStatement.SuppressTransaction">
      <summary>     Ruft einen Wert ab, der angibt, ob diese Anweisung außerhalb des Transaktionsbereichs ausgeführt werden soll, in dem der Migrationsprozess normalerweise ausgeführt wird, oder legt ihn fest.     Wenn auf TRUE festgelegt, wird für diesen Vorgang bei einem Migrationsprozessfehler kein Rollback ausgeführt. </summary>
      <returns>true, wenn für den Vorgang bei einem Migrationsprozessfehler kein Rollback ausgeführt wird, andernfalls FALSE.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator">
      <summary>Stellt einen Anbieter zum Konvertieren anbieteragnostischer Migrationsvorgänge in SQL-Befehle dar, die für Microsoft SQL Server Compact Edition ausgeführt werden können.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.CreateConnection">
      <summary>Erstellt eine leere Verbindung für den aktuellen Anbieter. Erlaubt abgeleiteten Anbietern die Verwendung einer anderen Verbindung als <see cref="T:System.Data.SqlClient.SqlConnection" />.</summary>
      <returns>Eine leere Verbindung für den aktuellen Anbieter.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation)">
      <summary>Generiert einen SQL-Befehl für <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" />.     Der generierte SQL-Befehl sollte mithilfe der Statement-Methode hinzugefügt werden.</summary>
      <param name="alterColumnOperation">Der Vorgang, für den der SQL-Befehl erstellt wird.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation)">
      <summary>Generiert einen SQL-Befehl für <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" />.     Der generierte SQL-Befehl sollte mithilfe der Statement-Methode hinzugefügt werden.</summary>
      <param name="dropColumnOperation">Der Vorgang, für den der SQL-Befehl erstellt wird.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation)">
      <summary>Generiert einen SQL-Befehl für <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" />.     Der generierte SQL-Befehl sollte mithilfe der Statement-Methode hinzugefügt werden.</summary>
      <param name="dropIndexOperation">Der Vorgang, für den der SQL-Befehl erstellt wird.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation)">
      <summary>Generiert einen SQL-Befehl für <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" />.     Der generierte SQL-Befehl sollte mithilfe der Statement-Methode hinzugefügt werden.</summary>
      <param name="moveTableOperation">Der Vorgang, für den der SQL-Befehl erstellt wird.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation)">
      <summary>Generiert einen SQL-Befehl für <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" />.     Der generierte SQL-Befehl sollte mithilfe der Statement-Methode hinzugefügt werden.</summary>
      <param name="renameColumnOperation">Der Vorgang, für den der SQL-Befehl erstellt wird.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation)">
      <summary>Generiert einen SQL-Befehl für <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" />.     Der generierte SQL-Befehl sollte mithilfe der Statement-Methode hinzugefügt werden.</summary>
      <param name="renameTableOperation">Der Vorgang, für den der SQL-Befehl erstellt wird.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.DateTime)">
      <summary>Generiert einen SQL-Befehl, um einen für eine Spalte festgelegten, konstanten DateTime-Standardwert anzugeben.     Durch diese Methode wird nur der tatsächliche Wert generiert und nicht der SQL-Befehl zum Festlegen des Standardwerts.</summary>
      <returns>Der SQL-Befehl, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der festzulegende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.GenerateCreateSchema(System.String)">
      <summary>Generiert einen SQL-Befehl zum Erstellen eines Datenbankschemas. Der generierte SQL-Befehl sollte mithilfe der Statement-Methode hinzugefügt werden.</summary>
      <param name="schema">Das zu erstellende Datenbankschema.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.GenerateMakeSystemTable(System.Data.Entity.Migrations.Model.CreateTableOperation)">
      <summary>Generiert einen SQL-Befehl zum Kennzeichnen einer Tabelle als Systemtabelle. Der generierte SQL-Befehl sollte mithilfe der Statement-Methode hinzugefügt werden.</summary>
      <param name="createTableOperation">Der Vorgang, für den der SQL-Befehl erstellt wird.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Name(System.String)">
      <summary>Generiert einen in Anführungszeichen gesetzten Namen. Der angegebene Name enthält möglicherweise das Schema.</summary>
      <returns>Der in Anführungszeichen gesetzte Name.</returns>
      <param name="name">Der in Anführungszeichen zu setzende Name.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator">
      <summary>Stellt einen Anbieter zum Konvertieren anbieteragnostischer Migrationsvorgänge in SQL-Befehle dar, die für Microsoft SQL Server ausgeführt werden können.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.BuildColumnType(System.Data.Entity.Migrations.Model.ColumnModel)">
      <summary>Generiert einen SQL-Befehl, um den Datentyp einer Spalte anzugeben. Durch diese Methode wird nur der tatsächliche Typ generiert und nicht der SQL-Befehl zum Erstellen der Spalte. </summary>
      <returns>Der SQL-Befehl, der den Datentyp darstellt.</returns>
      <param name="column">Die Spalte, in der der SQL-Befehl generiert wird.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.CreateConnection">
      <summary>Erstellt eine leere Verbindung für den aktuellen Anbieter. Erlaubt abgeleiteten Anbietern die Verwendung einer anderen Verbindung als <see cref="T:System.Data.SqlClient.SqlConnection" />.</summary>
      <returns>Eine leere Verbindung für den aktuellen Anbieter.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Boolean)">
      <summary>Generiert einen SQL-Befehl, um einen für eine Spalte festgelegten, konstanten Boolean-Standardwert anzugeben. Durch diese Methode wird nur der tatsächliche Wert generiert und nicht der SQL-Befehl zum Festlegen des Standardwerts.</summary>
      <returns>Der SQL-Befehl, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der festzulegende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Byte[])">
      <summary>Generiert einen SQL-Befehl, um einen für eine Spalte festgelegten, konstanten byte[]-Standardwert anzugeben. Durch diese Methode wird nur der tatsächliche Wert generiert und nicht der SQL-Befehl zum Festlegen des Standardwerts. </summary>
      <returns>Der SQL-Befehl, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der festzulegende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String)">
      <summary>Konvertiert eine Gruppe von Migrationsvorgängen in eine Microsoft SQL Server-spezifische SQL-Anweisung. </summary>
      <returns>Eine Liste von SQL-Anweisungen, mit denen Migrationsvorgänge ausgeführt werden.</returns>
      <param name="migrationOperations">Die zu konvertierenden Vorgänge.</param>
      <param name="providerManifestToken">Das Token, das die SQL Server-Zielversion darstellt (d. h. "2005", "2008").</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation)">
      <summary>Generiert einen SQL-Befehl für <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation" />.     Der generierte SQL-Befehl sollte mithilfe der Statement-Methode hinzugefügt werden. </summary>
      <param name="addColumnOperation">Der Vorgang, für den der SQL-Befehl erstellt wird.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation)">
      <summary>Generiert einen SQL-Befehl für <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" />.     Der generierte SQL-Befehl sollte mithilfe der Statement-Methode hinzugefügt werden. </summary>
      <param name="addForeignKeyOperation">Der Vorgang, für den der SQL-Befehl erstellt wird.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation)">
      <summary>Generiert einen SQL-Befehl für <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" />.     Der generierte SQL-Befehl sollte mithilfe der Statement-Methode hinzugefügt werden. </summary>
      <param name="addPrimaryKeyOperation">Der Vorgang, für den der SQL-Befehl erstellt wird.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation)">
      <summary>Generiert einen SQL-Befehl für <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" />.     Der generierte SQL-Befehl sollte mithilfe der Statement-Methode hinzugefügt werden. </summary>
      <param name="alterColumnOperation">Der Vorgang, für den der SQL-Befehl erstellt wird.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation)">
      <summary>Generiert einen SQL-Befehl für <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" />.     Der generierte SQL-Befehl sollte mithilfe der Statement-Methode hinzugefügt werden. </summary>
      <param name="createIndexOperation">Der Vorgang, für den der SQL-Befehl erstellt wird.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation)">
      <summary>Generiert einen SQL-Befehl für <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.     Der generierte SQL-Befehl sollte mithilfe der Statement-Methode hinzugefügt werden. </summary>
      <param name="createTableOperation">Der Vorgang, für den der SQL-Befehl erstellt wird.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DeleteHistoryOperation)">
      <summary>Generiert einen SQL-Befehl für <see cref="T:System.Data.Entity.Migrations.Model.DeleteHistoryOperation" />.     Der generierte SQL-Befehl sollte mithilfe der Statement-Methode hinzugefügt werden. </summary>
      <param name="deleteHistoryOperation">Der Vorgang, für den der SQL-Befehl erstellt wird.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation)">
      <summary>Generiert einen SQL-Befehl für <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" />.     Der generierte SQL-Befehl sollte mithilfe der Statement-Methode hinzugefügt werden. </summary>
      <param name="dropColumnOperation">Der Vorgang, für den der SQL-Befehl erstellt wird.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation)">
      <summary>Generiert einen SQL-Befehl für <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" />.     Der generierte SQL-Befehl sollte mithilfe der Statement-Methode hinzugefügt werden. </summary>
      <param name="dropForeignKeyOperation">Der Vorgang, für den der SQL-Befehl erstellt wird.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation)">
      <summary>Generiert einen SQL-Befehl für <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" />.     Der generierte SQL-Befehl sollte mithilfe der Statement-Methode hinzugefügt werden. </summary>
      <param name="dropIndexOperation">Der Vorgang, für den der SQL-Befehl erstellt wird.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation)">
      <summary>Generiert einen SQL-Befehl für <see cref="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation" />.     Der generierte SQL-Befehl sollte mithilfe der Statement-Methode hinzugefügt werden. </summary>
      <param name="dropPrimaryKeyOperation">Der Vorgang, für den der SQL-Befehl erstellt wird.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropTableOperation)">
      <summary>Generiert einen SQL-Befehl für <see cref="T:System.Data.Entity.Migrations.Model.DropTableOperation" />.     Der generierte SQL-Befehl sollte mithilfe der Statement-Methode hinzugefügt werden. </summary>
      <param name="dropTableOperation">Der Vorgang, für den der SQL-Befehl erstellt wird.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.InsertHistoryOperation)">
      <summary>Generiert einen SQL-Befehl für <see cref="T:System.Data.Entity.Migrations.Model.InsertHistoryOperation" />.     Der generierte SQL-Befehl sollte mithilfe der Statement-Methode hinzugefügt werden. </summary>
      <param name="insertHistoryOperation">Der Vorgang, für den der SQL-Befehl erstellt wird.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation)">
      <summary>Generiert einen SQL-Befehl für <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" />.     Der generierte SQL-Befehl sollte mithilfe der Statement-Methode hinzugefügt werden. </summary>
      <param name="moveTableOperation">Der Vorgang, für den der SQL-Befehl erstellt wird.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation)">
      <summary>Generiert einen SQL-Befehl für <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" />.     Der generierte SQL-Befehl sollte mithilfe der Statement-Methode hinzugefügt werden. </summary>
      <param name="renameColumnOperation">Der Vorgang, für den der SQL-Befehl erstellt wird.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation)">
      <summary>Generiert einen SQL-Befehl für <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" />.     Der generierte SQL-Befehl sollte mithilfe der Statement-Methode hinzugefügt werden. </summary>
      <param name="renameTableOperation">Der Vorgang, für den der SQL-Befehl erstellt wird.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.SqlOperation)">
      <summary>Generiert einen SQL-Befehl für <see cref="T:System.Data.Entity.Migrations.Model.SqlOperation" />.     Der generierte SQL-Befehl sollte mithilfe der Statement-Methode hinzugefügt werden. </summary>
      <param name="sqlOperation">Der Vorgang, für den der SQL-Befehl erstellt wird.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Spatial.DbGeography)">
      <summary>Generiert eine SQL-Anweisung, um einen für eine Spalte festgelegten, konstanten Geography-Standardwert anzugeben. Durch diese Methode wird nur der tatsächliche Wert generiert und nicht der SQL-Befehl zum Festlegen des Standardwerts. </summary>
      <returns>Der SQL-Befehl, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der festzulegende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Spatial.DbGeometry)">
      <summary>Generiert einen SQL-Befehl, um einen für eine Spalte festgelegten, konstanten Geometry-Standardwert anzugeben. Durch diese Methode wird nur der tatsächliche Wert generiert und nicht der SQL-Befehl zum Festlegen des Standardwerts. </summary>
      <returns>Der SQL-Befehl, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der festzulegende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.DateTime)">
      <summary>Generiert einen SQL-Befehl, um einen für eine Spalte festgelegten, konstanten DateTime-Standardwert anzugeben. Durch diese Methode wird nur der tatsächliche Wert generiert und nicht der SQL-Befehl zum Festlegen des Standardwerts. </summary>
      <returns>Der SQL-Befehl, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der festzulegende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.DateTimeOffset)">
      <summary>Generiert einen SQL-Befehl, um einen für eine Spalte festgelegten, konstanten DateTimeOffset-Standardwert anzugeben. Durch diese Methode wird nur der tatsächliche Wert generiert und nicht der SQL-Befehl zum Festlegen des Standardwerts. </summary>
      <returns>Der SQL-Befehl, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der festzulegende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Guid)">
      <summary>Generiert einen SQL-Befehl, um einen für eine Spalte festgelegten, konstanten GUID-Standardwert anzugeben. Durch diese Methode wird nur der tatsächliche Wert generiert und nicht der SQL-Befehl zum Festlegen des Standardwerts. </summary>
      <returns>Der SQL-Befehl, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der festzulegende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Object)">
      <summary>Generiert einen SQL-Befehl, um einen für eine Spalte festgelegten, konstanten Standardwert anzugeben.     Durch diese Methode wird nur der tatsächliche Wert generiert und nicht der SQL-Befehl zum Festlegen des Standardwerts. </summary>
      <returns>Der SQL-Befehl, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der festzulegende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.String)">
      <summary>Generiert einen SQL-Befehl, um einen für eine Spalte festgelegten, konstanten String-Standardwert anzugeben. Durch diese Methode wird nur der tatsächliche Wert generiert und nicht der SQL-Befehl zum Festlegen des Standardwerts. </summary>
      <returns>Der SQL-Befehl, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der festzulegende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.TimeSpan)">
      <summary>Generiert einen SQL-Befehl, um einen für eine Spalte festgelegten, konstanten TimeSpan-Standardwert anzugeben. Durch diese Methode wird nur der tatsächliche Wert generiert und nicht der SQL-Befehl zum Festlegen des Standardwerts. </summary>
      <returns>Der SQL-Befehl, der den Standardwert darstellt.</returns>
      <param name="defaultValue">Der festzulegende Wert.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.GenerateCreateSchema(System.String)">
      <summary>Generiert einen SQL-Befehl zum Erstellen eines Datenbankschemas. Der generierte SQL-Befehl sollte mithilfe der Statement-Methode hinzugefügt werden. </summary>
      <param name="schema">Das zu erstellende Datenbankschema.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.GenerateMakeSystemTable(System.Data.Entity.Migrations.Model.CreateTableOperation)">
      <summary>Generiert einen SQL-Befehl zum Kennzeichnen einer Tabelle als Systemtabelle. Der generierte SQL-Befehl sollte mithilfe der Statement-Methode hinzugefügt werden. </summary>
      <param name="createTableOperation">Die als Systemtabelle zu kennzeichnende Tabelle.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Name(System.String)">
      <summary>Generiert einen in Anführungszeichen gesetzten Namen. Der angegebene Name enthält möglicherweise das Schema. </summary>
      <returns>Der generierte, in Anführungszeichen gesetzte Name.</returns>
      <param name="name">Der in Anführungszeichen zu setzende Name.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Quote(System.String)">
      <summary>Setzt einen Bezeichner für SQL Server in Anführungszeichen. </summary>
      <returns>Der in Anführungszeichen gesetzte Bezeichner für SQL Server.</returns>
      <param name="identifier">Der Bezeichner, der in Anführungszeichen gesetzt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Statement(System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Fügt eine neue Anweisung hinzu, die für die Datenbank ausgeführt werden soll. </summary>
      <param name="writer">Der Writer, in dem die auszuführende SQL-Anweisung enthalten ist.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Statement(System.String,System.Boolean)">
      <summary>Fügt eine neue Anweisung hinzu, die für die Datenbank ausgeführt werden soll. </summary>
      <param name="sql">Die auszuführende Anweisung.</param>
      <param name="suppressTransaction">Ein Wert, der angibt, ob diese Anweisung außerhalb des Transaktionsbereichs ausgeführt werden soll, in dem der Migrationsprozess normalerweise ausgeführt wird. Wenn auf TRUE festgelegt, wird für diesen Vorgang bei einem Migrationsprozessfehler kein Rollback ausgeführt.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Writer">
      <summary>Ruft einen neuen <see cref="T:System.Data.Entity.Migrations.Utilities.IndentedTextWriter" /> ab, der zum Erstellen der SQL-Anweisung verwendet werden kann. Dies ist eine Hilfsmethode zum Erstellen eines Writers. Das Schreiben in den Writer führt nicht dazu, dass die SQL-Anweisung für die Ausführung registriert wird. Sie müssen die generierte SQL-Anweisung an die Statement-Methode übergeben. </summary>
      <returns>Ein leerer Textwriter, der für die SQL-Generierung verwendet werden soll.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Utilities.IndentedTextWriter">
      <summary>  Ist mit T:System.CodeDom.Compiler.IndentedTextWriter identisch, unterstützt jedoch die teilweise Vertrauenswürdigkeit.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.#ctor(System.IO.TextWriter)">
      <summary>     Initialisiert eine neue Instanz der IndentedTextWriter-Klasse mit dem angegebenen Textwriter und der angegebenen Standardzeichenfolge für Tabstopps. </summary>
      <param name="writer">Der für die Ausgabe zu verwendende <see cref="T:System.IO.TextWriter" />. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.#ctor(System.IO.TextWriter,System.String)">
      <summary>     Initialisiert eine neue Instanz der IndentedTextWriter-Klasse mit dem angegebenen Textwriter und der angegebenen Zeichenfolge für Tabstopps. </summary>
      <param name="writer">Der für die Ausgabe zu verwendende <see cref="T:System.IO.TextWriter" />. </param>
      <param name="tabString">Die für Einzüge zu verwendende Tabstoppzeichenfolge. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Close">
      <summary>     Schließt das Dokument, in das geschrieben wird. </summary>
    </member>
    <member name="F:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.DefaultTabString">
      <summary>     Gibt die Standardzeichenfolge für Tabstopps an. Dieses Feld ist konstant. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Encoding">
      <summary>     Ruft die Codierung für den zu verwendenden Textwriter ab. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Flush">
      <summary>     Leert den Datenstrom. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Indent">
      <summary>     Ruft die Anzahl der Leerzeichen für den Einzug ab oder legt sie fest. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.InnerWriter">
      <summary>     Ruft den zu verwendenden <see cref="T:System.IO.TextWriter" /> ab. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.NewLine">
      <summary>     Ruft das zu verwendende Neue-Zeile-Zeichen ab oder legt es fest. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.OutputTabs">
      <summary>     Gibt die Tabstoppzeichenfolge entsprechend der <see cref="P:System.CodeDom.Compiler.IndentedTextWriter.Indent" />-Eigenschaft einmal für jede Einzugsebene aus. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Boolean)">
      <summary>     Schreibt die Textdarstellung eines booleschen Werts in den Textdatenstrom. </summary>
      <param name="value">Der zu schreibende boolesche Wert. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char)">
      <summary>     Schreibt ein Zeichen in den Textdatenstrom. </summary>
      <param name="value">Das zu schreibende Zeichen. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char[])">
      <summary>     Schreibt ein Zeichenarray in den Textdatenstrom. </summary>
      <param name="buffer">Das zu schreibende Zeichenarray. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>     Schreibt ein Unterarray von Zeichen in den Textdatenstrom. </summary>
      <param name="buffer">Das Zeichenarray, aus dem Daten geschrieben werden sollen. </param>
      <param name="index">Der Startindex im Puffer. </param>
      <param name="count">Die Anzahl der zu schreibenden Zeichen. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Double)">
      <summary>     Schreibt die Textdarstellung eines Double-Werts in den Textdatenstrom. </summary>
      <param name="value">Der zu schreibende Double-Wert. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Int32)">
      <summary>     Schreibt die Textdarstellung einer ganzen Zahl in den Textdatenstrom. </summary>
      <param name="value">Die zu schreibende ganze Zahl. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Int64)">
      <summary>     Schreibt die Textdarstellung einer ganzen Zahl mit 8 Bytes in den Textdatenstrom. </summary>
      <param name="value">Die zu schreibende ganze Zahl mit 8 Bytes. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Object)">
      <summary>     Schreibt die Textdarstellung eines Objekts in den Textdatenstrom. </summary>
      <param name="value">Das zu schreibende Objekt. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Single)">
      <summary>     Schreibt die Textdarstellung eines Single-Werts in den Textdatenstrom. </summary>
      <param name="value">Der zu schreibende Single-Wert. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String)">
      <summary>     Schreibt die angegebene Zeichenfolge in den Textdatenstrom. </summary>
      <param name="s">Die zu schreibende Zeichenfolge. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object)">
      <summary>     Schreibt eine formatierte Zeichenfolge mit der angegebenen Semantik. </summary>
      <param name="format">Die Formatierungszeichenfolge. </param>
      <param name="arg0">Das Objekt, das in die formatierte Zeichenfolge geschrieben werden soll. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object,System.Object)">
      <summary>     Schreibt eine formatierte Zeichenfolge mit der angegebenen Semantik. </summary>
      <param name="format">Die zu verwendende Formatierungszeichenfolge. </param>
      <param name="arg0">Das erste Objekt, das in die formatierte Zeichenfolge geschrieben werden soll. </param>
      <param name="arg1">Das zweite Objekt, das in die formatierte Zeichenfolge geschrieben werden soll. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object[])">
      <summary>     Schreibt eine formatierte Zeichenfolge mit der angegebenen Semantik. </summary>
      <param name="format">Die zu verwendende Formatierungszeichenfolge. </param>
      <param name="arg">Das auszugebende Argumentarray. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine">
      <summary>     Schreibt ein Zeilenabschlusszeichen. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Boolean)">
      <summary>     Schreibt die Textdarstellung eines booleschen Werts, gefolgt von einem Zeilenabschlusszeichen, in den Textdatenstrom. </summary>
      <param name="value">Der zu schreibende boolesche Wert. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char)">
      <summary>     Schreibt ein Zeichen, gefolgt von einem Zeilenabschlusszeichen, in den Textdatenstrom. </summary>
      <param name="value">Das zu schreibende Zeichen. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char[])">
      <summary>     Schreibt ein Zeichenarray, gefolgt von einem Zeilenabschlusszeichen, in den Textdatenstrom. </summary>
      <param name="buffer">Das zu schreibende Zeichenarray. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
      <summary>     Schreibt ein Unterarray von Zeichen, gefolgt von einem Zeilenabschlusszeichen, in den Textdatenstrom. </summary>
      <param name="buffer">Das Zeichenarray, aus dem Daten geschrieben werden sollen. </param>
      <param name="index">Der Startindex im Puffer. </param>
      <param name="count">Die Anzahl der zu schreibenden Zeichen. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Double)">
      <summary>     Schreibt die Textdarstellung eines Double-Werts, gefolgt von einem Zeilenabschlusszeichen, in den Textdatenstrom. </summary>
      <param name="value">Der zu schreibende Double-Wert. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Int32)">
      <summary>     Schreibt die Textdarstellung einer ganzen Zahl, gefolgt von einem Zeilenabschlusszeichen, in den Textdatenstrom. </summary>
      <param name="value">Die zu schreibende ganze Zahl. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Int64)">
      <summary>     Schreibt die Textdarstellung einer ganzen Zahl mit 8 Bytes, gefolgt von einem Zeilenabschlusszeichen, in den Textdatenstrom. </summary>
      <param name="value">Die zu schreibende ganze Zahl mit 8 Bytes. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Object)">
      <summary>     Schreibt die Textdarstellung eines Objekts, gefolgt von einem Zeilenabschlusszeichen, in den Textdatenstrom. </summary>
      <param name="value">Das zu schreibende Objekt. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Single)">
      <summary>     Schreibt die Textdarstellung eines Single-Werts, gefolgt von einem Zeilenabschlusszeichen, in den Textdatenstrom. </summary>
      <param name="value">Der zu schreibende Single-Wert. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String)">
      <summary>     Schreibt die angegebene Zeichenfolge, gefolgt von einem Zeilenabschlusszeichen, in den Textdatenstrom. </summary>
      <param name="s">Die zu schreibende Zeichenfolge. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object)">
      <summary>     Schreibt eine formatierte Zeichenfolge, gefolgt von einem Zeilenabschlusszeichen, mit der angegebenen Semantik. </summary>
      <param name="format">Die Formatierungszeichenfolge. </param>
      <param name="arg0">Das Objekt, das in die formatierte Zeichenfolge geschrieben werden soll. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object,System.Object)">
      <summary>     Schreibt eine formatierte Zeichenfolge, gefolgt von einem Zeilenabschlusszeichen, mit der angegebenen Semantik. </summary>
      <param name="format">Die zu verwendende Formatierungszeichenfolge. </param>
      <param name="arg0">Das erste Objekt, das in die formatierte Zeichenfolge geschrieben werden soll. </param>
      <param name="arg1">Das zweite Objekt, das in die formatierte Zeichenfolge geschrieben werden soll. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object[])">
      <summary>     Schreibt eine formatierte Zeichenfolge, gefolgt von einem Zeilenabschlusszeichen, mit der angegebenen Semantik. </summary>
      <param name="format">Die zu verwendende Formatierungszeichenfolge. </param>
      <param name="arg">Das auszugebende Argumentarray. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.UInt32)">
      <summary>     Schreibt die Textdarstellung eines UInt32-Werts, gefolgt von einem Zeilenabschlusszeichen, in den Textdatenstrom. </summary>
      <param name="value">Ein auszugebender UInt32-Wert. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLineNoTabs(System.String)">
      <summary>     Schreibt die angegebene Zeichenfolge ohne Tabstopps in eine Zeile. </summary>
      <param name="s">Die zu schreibende Zeichenfolge. </param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1">
      <summary> Ermöglicht das Konfigurieren eines komplexen Typs in einem Modell.  Eine <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.ComplexTypeConfiguration" /> kann mit der <see cref="M:System.Data.Entity.DbModelBuilder.ComplexType``1" />-Methode abgerufen werden, oder ein benutzerdefinierter Typ, der von <see cref="T:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1" /> abgeleitet wurde, kann mit der <see cref="P:System.Data.Entity.DbModelBuilder.Configurations" />-Eigenschaft registriert werden. </summary>
      <typeparam name="TComplexType">Der komplexe Typ, der konfiguriert werden soll.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.#ctor">
      <summary> Initialisiert eine neue Instanz von <see cref="T:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>TRUE, wenn die Objekte gleich sind, andernfalls FALSE.</returns>
      <param name="obj">Ein Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.GetHashCode">
      <summary>Fungiert als Hashfunktion für einen besonderen Typ. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Ein Hashcode für den aktuellen Typ.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.GetType">
      <summary>Ruft den Typ der aktuellen Instanz ab. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1">
      <summary>Ermöglicht das Konfigurieren eines Entitätstyps in einem Modell.  Eine <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" /> kann mit der Entity-Methode in einem <see cref="T:System.Data.Entity.DbModelBuilder" /> abgerufen werden, oder ein benutzerdefinierter Typ, der von <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" /> abgeleitet wurde, kann mit der Configurations-Eigenschaft in <see cref="T:System.Data.Entity.DbModelBuilder" /> registriert werden. </summary>
      <typeparam name="TEntityType">Stellt den Entitätstyp dar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.#ctor">
      <summary>Initialisiert eine neue Instanz von <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>TRUE, wenn die Objekte gleich sind, andernfalls FALSE.</returns>
      <param name="obj">Ein Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.GetHashCode">
      <summary>Fungiert als Hashfunktion für einen besonderen Typ. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Ein Hashcode für den aktuellen Typ.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.GetType">
      <summary>Ruft den Typ der aktuellen Instanz ab. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasEntitySetName(System.String)">
      <summary> Konfiguriert den Namen der Entitätenmenge, die für diesen Entitätstyp verwendet werden soll. Der Name der Entitätenmenge kann nur für den Basistyp in der jeweiligen Menge konfiguriert werden. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="entitySetName">Der Name der Entitätsmenge.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> Konfiguriert die Eigenschaften des primären Schlüssels für diesen Entitätstyp. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="keyExpression"> Ein Lambdaausdruck, der die Eigenschaft darstellt, die als primärer Schlüssel verwendet werden soll.  Beispielsweise t =&gt; t.Id     in C# und Function(t) t.Id in Visual Basic .NET.  Wenn der primäre Schlüssel aus mehreren Eigenschaften besteht, geben Sie einen anonymen Typ einschließlich der Eigenschaften an.  Beispielsweise t =&gt; new { t.Id1, t.Id2 } in C# und Function(t) New From { t.Id1, t.Id2 } in Visual Basic .NET.</param>
      <typeparam name="TKey">Der Typ des Schlüssels.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasMany``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}})">
      <summary> Konfiguriert eine m:n-Beziehung von diesem Entitätstyp. </summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
      <param name="navigationPropertyExpression"> Ein Lambdaausdruck, der die Navigationseigenschaft für die Beziehung darstellt. Beispielsweise t =&gt; t.MyProperty in C# und Function(t) t.MyProperty in Visual Basic .NET.</param>
      <typeparam name="TTargetEntity">Der Typ der Entität am anderen Ende der Beziehung.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasOptional``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> Konfiguriert eine optionale Beziehung von diesem Entitätstyp. Instanzen dieses Entitätstyps können in der Datenbank gespeichert werden, ohne dass diese Beziehung angegeben werden muss. Der Fremdschlüssel in der Datenbank kann NULL sein. </summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
      <param name="navigationPropertyExpression"> Ein Lambdaausdruck, der die Navigationseigenschaft für die Beziehung darstellt. Beispielsweise t =&gt; t.MyProperty in C# und Function(t) t.MyProperty in Visual Basic .NET.</param>
      <typeparam name="TTargetEntity">Der Typ der Entität am anderen Ende der Beziehung.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasRequired``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> Konfiguriert eine erforderliche Beziehung von diesem Entitätstyp. Instanzen dieses Entitätstyps können nur in der Datenbank gespeichert werden, wenn diese Beziehung angegeben wurde. Der Fremdschlüssel in der Datenbank kann nicht NULL sein. </summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
      <param name="navigationPropertyExpression"> Ein Lambdaausdruck, der die Navigationseigenschaft für die Beziehung darstellt. Beispielsweise t =&gt; t.MyProperty in C# und Function(t) t.MyProperty in Visual Basic .NET. </param>
      <typeparam name="TTargetEntity">Der Typ der Entität am anderen Ende der Beziehung.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Map``1(System.Action{System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration{``0}})">
      <summary> Ermöglicht die erweiterte Konfiguration bezüglich der Zuordnung eines abgeleiteten Entitätstyps zum Datenbankschema. Die Aufrufe dieser Methode werden ergänzend durchgeführt, d. h., Konfigurationen durch frühere Aufrufe dieser Methode werden durch nachfolgende Aufrufe nicht überschrieben. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="derivedTypeMapConfigurationAction">Eine Aktion, mit der eine Konfiguration für <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" /> durchgeführt wird.</param>
      <typeparam name="TDerived">Der abgeleitete Entitätstyp, der konfiguriert werden soll.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration{`0}})">
      <summary> Ermöglicht die erweiterte Konfiguration bezüglich der Zuordnung dieses Entitätstyps zum Datenbankschema. Die Konfiguration wird standardmäßig auch für alle Typen übernommen, die von diesem Entitätstyp abgeleitet werden.  Abgeleitete Typen können mit der spezifischen Überladung dieser Methode konfiguriert werden, mit der ein abgeleiteter Typ konfiguriert wird, oder mit einer <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" /> für den abgeleiteten Typ.  Die Eigenschaften einer Entität können durch mehrere Aufrufe dieser Methode auf mehrere Tabellen aufgeteilt werden.  Die Aufrufe werden dabei ergänzend durchgeführt, d. h., Konfigurationen durch frühere Aufrufe dieser Methode werden durch nachfolgende Aufrufe nicht überschrieben. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="entityMappingConfigurationAction">Eine Aktion, mit der eine Konfiguration für <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" /> durchgeführt wird.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToTable(System.String)">
      <summary>Konfiguriert den Namen der Tabelle, der dieser Entitätstyp zugeordnet ist. </summary>
      <param name="tableName">Der Name der Tabelle.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToTable(System.String,System.String)">
      <summary> Konfiguriert den Namen der Tabelle, der dieser Entitätstyp zugeordnet ist. </summary>
      <param name="tableName">Der Name der Tabelle.</param>
      <param name="schemaName">Das Datenbankschema der Tabelle.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.ModelValidationException">
      <summary> Vom <see cref="T:System.Data.Entity.DbModelBuilder" /> während der Modellerstellung ausgelöste Ausnahme beim Generieren eines ungültigen Modells. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor">
      <summary> Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.ModelValidationException" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.ModelValidationException" />-Klasse.</summary>
      <param name="info">Die Serialisierungsinformationen.</param>
      <param name="context">Der Kontext.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.String)">
      <summary> Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.ModelValidationException" />-Klasse. </summary>
      <param name="message">Die Ausnahmemeldung.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.String,System.Exception)">
      <summary> Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.ModelValidationException" />-Klasse. </summary>
      <param name="message">Die Ausnahmemeldung.</param>
      <param name="innerException">Die innere Ausnahme.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration">
      <summary> Basisklasse für das Konfigurieren einer Beziehung. Diese Konfigurationsfunktion wird von der Code First Fluent-API zur Verfügung gestellt. Weitere Informationen finden Sie unter <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration" />-Klasse.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration">
      <summary> Wird verwendet, um die <see cref="T:System.byte[]" />-Eigenschaft eines Entitätstyps oder eines komplexen Typs zu konfigurieren. Diese Konfigurationsfunktion wird von der Code First Fluent-API zur Verfügung gestellt. Weitere Informationen finden Sie unter <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>true, wenn die Objekte gleich sind, andernfalls false.</returns>
      <param name="obj">Ein Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.GetHashCode">
      <summary>Fungiert als Hashfunktion für einen besonderen Typ. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Ein Hashcode für den aktuellen Typ.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.GetType">
      <summary>Ruft den Typ der aktuellen Instanz ab. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnName(System.String)">
      <summary> Konfiguriert den Namen der Datenbankspalte, in der die Eigenschaft gespeichert werden soll. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="columnName">Der Name der Spalte.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> Konfiguriert die Reihenfolge der Datenbankspalte, in der die Eigenschaft gespeichert werden soll. Mit dieser Methode wird außerdem die Schlüsselsortierung bei einem Entitätstyp mit einem zusammengesetzten Schlüssel angegeben. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="columnOrder">Die Reihenfolge, in der diese Spalte in der Datenbanktabelle angezeigt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnType(System.String)">
      <summary> Konfiguriert den Datentyp der Datenbankspalte, in der die Eigenschaft gespeichert werden soll. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="columnType">Der Name des spezifischen Datentyps für den Datenbankanbieter.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>     Konfiguriert, wie Werte für die Eigenschaft von der Datenbank generiert werden. </summary>
      <returns>Die gleiche BinaryPropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="databaseGeneratedOption">     Das Muster, das zum Generieren von Werten für die Eigenschaft in der Datenbank verwendet wird.     Durch Festlegen von NULL wird das von der Datenbank generierte Musterfacet aus der Eigenschaft entfernt.     Beim Festlegen von NULL weist die Laufzeit das gleiche Verhalten wie beim Angeben von "Keine" auf. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary> Konfiguriert die angegebene maximale Länge für die Eigenschaft. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="value"> Die maximale Länge für die Eigenschaft. Bei NULL werden Beschränkungen für die maximale Länge ggf. aus der Eigenschaft entfernt. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsConcurrencyToken">
      <summary> Konfiguriert die Eigenschaft, die als Token für vollständige Parallelität verwendet werden soll. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary> Gibt an, ob die Eigenschaft als Token für vollständige Parallelität verwendet werden soll. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="concurrencyToken"> Der Wert gibt an, ob die Eigenschaft als Token für vollständige Parallelität verwendet wird. Bei NULL wird das Parallelitätstokenfacet aus der Eigenschaft entfernt. Beim Angeben von NULL weist die Laufzeit das gleiche Verhalten wie beim Angeben von False auf. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsFixedLength">
      <summary> Konfiguriert eine feste Länge für die Eigenschaft. Legen Sie mit HasMaxLength die feste Länge für die Eigenschaft fest. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsMaxLength">
      <summary> Konfiguriert die maximal zulässige und vom Datenbankanbieter unterstützte Länge für die Eigenschaft. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsOptional">
      <summary> Konfiguriert die Eigenschaft als optional. Die Datenbankspalte, in der diese Eigenschaft gespeichert wird, kann NULL-Werte enthalten. <see cref="T:System.byte[]" />-Eigenschaften sind standardmäßig optional. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsRequired">
      <summary> Konfiguriert die Eigenschaft als erforderlich. Die Datenbankspalte, in der diese Eigenschaft gespeichert wird, darf keine NULL-Werte enthalten. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsRowVersion">
      <summary> Konfiguriert die Eigenschaft als Zeilenversion in der Datenbank. Der tatsächliche Datentyp ist abhängig vom verwendeten Datenbankanbieter. Durch Festlegen der Eigenschaft auf eine Zeilenversion wird die Eigenschaft automatisch als Token für vollständige Parallelität konfiguriert. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsVariableLength">
      <summary> Konfiguriert eine variable Länge für die Eigenschaft. <see cref="T:System.byte[]" />-Eigenschaften weisen standardmäßig eine variable Länge auf. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration">
      <summary> Konfiguriert eine Beziehung zur Unterstützung der Weitergabe bei Löschfunktionen. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>true, wenn die Objekte gleich sind, andernfalls false.</returns>
      <param name="obj">Ein Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.GetHashCode">
      <summary>Fungiert als Hashfunktion für einen besonderen Typ. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Ein Hashcode für den aktuellen Typ.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.GetType">
      <summary>Ruft den Typ der aktuellen Instanz ab. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.WillCascadeOnDelete">
      <summary> Konfiguriert die Verwendung der Löschweitergabe für die Beziehung. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.WillCascadeOnDelete(System.Boolean)">
      <summary> Konfiguriert die Aktivierung bzw. Deaktivierung der Löschweitergabe für die Beziehung. </summary>
      <param name="value">true, wenn die Löschweitergabe aktiviert ist, andernfalls false.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar">
      <summary> Ermöglicht das Registrieren von abgeleiteten Konfigurationsklassen für Entitäten und komplexe Typen mit einem <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Add``1(System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration{``0})">
      <summary> Fügt dem <see cref="T:System.Data.Entity.DbModelBuilder" /> eine <see cref="T:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1" /> hinzu. Jedem Modell im Typ kann nur eine <see cref="T:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1" /> hinzugefügt werden. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="complexTypeConfiguration">Die Konfiguration des komplexen Typs, die hinzugefügt werden soll.</param>
      <typeparam name="TComplexType">Der komplexe Typ, der konfiguriert wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Add``1(System.Data.Entity.ModelConfiguration.EntityTypeConfiguration{``0})">
      <summary> Fügt dem <see cref="T:System.Data.Entity.DbModelBuilder" /> eine <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" /> hinzu. Jedem Modell im Typ kann nur eine <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" /> hinzugefügt werden. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="entityTypeConfiguration">Die Konfiguration des Entitätstyps, die hinzugefügt werden soll.</param>
      <typeparam name="TEntityType">Der Entitätstyp, der konfiguriert wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>true, wenn die Objekte gleich sind, andernfalls false.</returns>
      <param name="obj">Ein Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.GetHashCode">
      <summary>Fungiert als Hashfunktion für einen besonderen Typ. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Ein Hashcode für den aktuellen Typ.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.GetType">
      <summary>Ruft den Typ der aktuellen Instanz ab. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration">
      <summary> Ermöglicht das Anpassen von Konventionen, die von einer <see cref="T:System.Data.Entity.DbModelBuilder" />-Instanz verwendet werden. Derzeit wird nur das Entfernen einer oder mehrerer Standardkonventionen unterstützt. Die Standardkonventionen sind im <see cref="N:System.Data.Entity.ModelConfiguration.Conventions" />-Namespace enthalten. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>true, wenn die Objekte gleich sind, andernfalls false.</returns>
      <param name="obj">Ein Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.GetHashCode">
      <summary>Fungiert als Hashfunktion für einen besonderen Typ. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Ein Hashcode für den aktuellen Typ.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.GetType">
      <summary>Ruft den Typ der aktuellen Instanz ab. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Remove``1">
      <summary>Deaktiviert eine Konvention für den <see cref="T:System.Data.Entity.DbModelBuilder" />. Die Standardkonventionen, die entfernt werden können, sind im <see cref="N:System.Data.Entity.ModelConfiguration.Conventions" />-Namespace enthalten. </summary>
      <typeparam name="TConvention">Der Typ der Konvention, die aktiviert werden soll.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration">
      <summary> Wird verwendet, um die <see cref="T:System.DateTime" />-Eigenschaft eines Entitätstyps oder eines komplexen Typs zu konfigurieren. Diese Konfigurationsfunktion wird von der Code First Fluent-API zur Verfügung gestellt. Weitere Informationen finden Sie unter <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>true, wenn die Objekte gleich sind, andernfalls false.</returns>
      <param name="obj">Ein Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.GetHashCode">
      <summary>Fungiert als Hashfunktion für einen besonderen Typ. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Ein Hashcode für den aktuellen Typ.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.GetType">
      <summary>Ruft den Typ der aktuellen Instanz ab. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnName(System.String)">
      <summary> Konfiguriert den Namen der Datenbankspalte, in der die Eigenschaft gespeichert werden soll. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="columnName">Der Name der Spalte.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> Konfiguriert die Reihenfolge der Datenbankspalte, in der die Eigenschaft gespeichert werden soll. Mit dieser Methode wird außerdem die Schlüsselsortierung bei einem Entitätstyp mit einem zusammengesetzten Schlüssel angegeben. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="columnOrder">Die Reihenfolge, in der diese Spalte in der Datenbanktabelle angezeigt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnType(System.String)">
      <summary> Konfiguriert den Datentyp der Datenbankspalte, in der die Eigenschaft gespeichert werden soll. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="columnType">Der Name des spezifischen Datentyps für den Datenbankanbieter.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>     Konfiguriert, wie Werte für die Eigenschaft von der Datenbank generiert werden. </summary>
      <returns>Die gleiche DateTimePropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="databaseGeneratedOption">     Das Muster, das zum Generieren von Werten für die Eigenschaft in der Datenbank verwendet wird.     Durch Festlegen von NULL wird das von der Datenbank generierte Musterfacet aus der Eigenschaft entfernt.     Beim Festlegen von NULL weist die Laufzeit das gleiche Verhalten wie beim Angeben von "Keine" auf. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasPrecision(System.Byte)">
      <summary> Konfiguriert die Genauigkeit der Eigenschaft. Wenn die Genauigkeit für den Datentyp der Spalte vom Datenbankanbieter nicht unterstützt wird, wird der Wert ignoriert. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="value">Die Genauigkeit der Eigenschaft.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsConcurrencyToken">
      <summary> Konfiguriert die Eigenschaft, die als Token für vollständige Parallelität verwendet werden soll. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary> Gibt an, ob die Eigenschaft als Token für vollständige Parallelität verwendet werden soll. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="concurrencyToken"> Der Wert gibt an, ob die Eigenschaft als Token für vollständige Parallelität verwendet wird. Bei NULL wird das Parallelitätstokenfacet aus der Eigenschaft entfernt. Beim Angeben von NULL weist die Laufzeit das gleiche Verhalten wie beim Angeben von False auf. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsOptional">
      <summary> Konfiguriert die Eigenschaft als optional. Die Datenbankspalte, in der diese Eigenschaft gespeichert wird, kann NULL-Werte enthalten. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsRequired">
      <summary> Konfiguriert die Eigenschaft als erforderlich. Die Datenbankspalte, in der diese Eigenschaft gespeichert wird, darf keine NULL-Werte enthalten. <see cref="T:System.DateTime" />-Eigenschaften sind standardmäßig erforderlich. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration">
      <summary> Wird verwendet, um die <see cref="T:System.decimal" />-Eigenschaft eines Entitätstyps oder eines komplexen Typs zu konfigurieren.  Diese Konfigurationsfunktion wird von der Code First Fluent-API zur Verfügung gestellt. Weitere Informationen finden Sie unter <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>true, wenn die Objekte gleich sind, andernfalls false.</returns>
      <param name="obj">Ein Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.GetHashCode">
      <summary>Fungiert als Hashfunktion für einen besonderen Typ. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Ein Hashcode für den aktuellen Typ.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.GetType">
      <summary>Ruft den Typ der aktuellen Instanz ab. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnName(System.String)">
      <summary> Konfiguriert den Namen der Datenbankspalte, in der die Eigenschaft gespeichert werden soll. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="columnName">Der Name der Spalte.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> Konfiguriert die Reihenfolge der Datenbankspalte, in der die Eigenschaft gespeichert werden soll. Mit dieser Methode wird außerdem die Schlüsselsortierung bei einem Entitätstyp mit einem zusammengesetzten Schlüssel angegeben. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="columnOrder">Die Reihenfolge, in der diese Spalte in der Datenbanktabelle angezeigt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnType(System.String)">
      <summary> Konfiguriert den Datentyp der Datenbankspalte, in der die Eigenschaft gespeichert werden soll. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="columnType">Der Name des spezifischen Datentyps für den Datenbankanbieter.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>     Konfiguriert, wie Werte für die Eigenschaft von der Datenbank generiert werden. </summary>
      <returns>Die gleiche DecimalPropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="databaseGeneratedOption">     Das Muster, das zum Generieren von Werten für die Eigenschaft in der Datenbank verwendet wird.     Durch Festlegen von NULL wird das von der Datenbank generierte Musterfacet aus der Eigenschaft entfernt.     Beim Festlegen von NULL weist die Laufzeit das gleiche Verhalten wie beim Angeben von "Keine" auf. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasPrecision(System.Byte,System.Byte)">
      <summary> Konfiguriert die Genauigkeit und Skalierung der Eigenschaft. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="precision">Die Genauigkeit der Eigenschaft.</param>
      <param name="scale">Die Skalierung der Eigenschaft.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsConcurrencyToken">
      <summary> Konfiguriert die Eigenschaft, die als Token für vollständige Parallelität verwendet werden soll. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary> Gibt an, ob die Eigenschaft als Token für vollständige Parallelität verwendet werden soll. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="concurrencyToken"> Der Wert gibt an, ob die Eigenschaft als Token für vollständige Parallelität verwendet wird. Bei NULL wird das Parallelitätstokenfacet aus der Eigenschaft entfernt. Beim Angeben von NULL weist die Laufzeit das gleiche Verhalten wie beim Angeben von False auf. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsOptional">
      <summary> Konfiguriert die Eigenschaft als optional. Die Datenbankspalte, in der diese Eigenschaft gespeichert wird, kann NULL-Werte enthalten. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsRequired">
      <summary> Konfiguriert die Eigenschaft als erforderlich. Die Datenbankspalte, in der diese Eigenschaft gespeichert wird, darf keine NULL-Werte enthalten. <see cref="T:System.decimal" />-Eigenschaften sind standardmäßig erforderlich. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1">
      <summary> Konfiguriert eine Beziehung, von der Fremdschlüsseleigenschaften unterstützt werden können, die im Objektmodell verfügbar gemacht werden. Diese Konfigurationsfunktion wird von der Code First Fluent-API zur Verfügung gestellt. Weitere Informationen finden Sie unter <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
      <typeparam name="TDependentEntityType">Der abhängige Entitätstyp.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>true, wenn die Objekte gleich sind, andernfalls false.</returns>
      <param name="obj">Ein Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.GetHashCode">
      <summary>Fungiert als Hashfunktion für einen besonderen Typ. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Ein Hashcode für den aktuellen Typ.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.GetType">
      <summary>Ruft den Typ der aktuellen Instanz ab. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.HasForeignKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> Konfiguriert die Beziehung zur Verwendung von Fremdschlüsseleigenschaften, die im Objektmodell verfügbar gemacht werden. Wenn die Fremdschlüsseleigenschaften nicht im Objektmodell verfügbar gemacht werden, muss die Map-Methode verwendet werden.</summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
      <param name="foreignKeyExpression">Ein Lambdaausdruck, der die Eigenschaft darstellt, die als Fremdschlüssel verwendet werden soll. Wenn der Fremdschlüssel aus mehreren Eigenschaften besteht, geben Sie einen anonymen Typ einschließlich der Eigenschaften an. Bei Verwendung mehrerer Fremdschlüsseleigenschaften müssen die Eigenschaften in der gleichen Reihenfolge angegeben werden, in der die Primärschlüsseleigenschaften für den Prinzipalentitätstyp konfiguriert wurden.</param>
      <typeparam name="TKey">Der Typ des Schlüssels.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1">
      <summary> Konfiguriert die Tabellen- und Spaltenzuordnung für einen Entitätstyp oder eine Teilmenge von Eigenschaften eines Entitätstyps. Diese Konfigurationsfunktion wird von der Code First Fluent-API zur Verfügung gestellt. Weitere Informationen finden Sie unter <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
      <typeparam name="TEntityType">Der Entitätstyp, der zugeordnet werden soll.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>true, wenn die Objekte gleich sind, andernfalls false.</returns>
      <param name="obj">Ein Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.GetHashCode">
      <summary>Fungiert als Hashfunktion für einen besonderen Typ. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Ein Hashcode für den aktuellen Typ.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.GetType">
      <summary>Ruft den Typ der aktuellen Instanz ab. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.MapInheritedProperties">
      <summary> Ordnet alle von Basistypen geerbten Eigenschaften neu zu.  Beim Konfigurieren eines abgeleiteten Typs, der einer separaten Tabelle zugeordnet werden soll, werden alle Eigenschaften in die Tabelle eingeschlossen, nicht nur Eigenschaften, die nicht geerbt wurden. Dies wird auch als Tabelle pro konkreten Typ-Zuordnung (TPC) bezeichnet. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Properties``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> Konfiguriert die Eigenschaften, die in diesem Mappingfragment enthalten sind. Wenn diese Methode nicht aufgerufen wird, werden alle Eigenschaften konfiguriert, die noch nicht in ein Mappingfragment eingeschlossen wurden. </summary>
      <param name="propertiesExpression"> Ein Lambdaausdruck für einen anonymen Typ, der die zuzuordnenden Eigenschaften enthält.</param>
      <typeparam name="TObject">Ein anonymer Typ, der die zuzuordnenden Eigenschaften enthält.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Requires``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> Konfiguriert die Unterscheidungsbedingung zur Differenzierung von Typen in einer Vererbungshierarchie. </summary>
      <returns>Ein Konfigurationsobjekt zum weiteren Konfigurieren der Unterscheidungsbedingung.</returns>
      <param name="property"> Ein Lambdaausdruck, der die Eigenschaft zur Unterscheidung zwischen Typen darstellt. </param>
      <typeparam name="TProperty">Der Typ der Eigenschaft, der für die Unterscheidung zwischen Typen verwendet wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Requires(System.String)">
      <summary> Konfiguriert die Unterscheidungsspalte zur Differenzierung von Typen in einer Vererbungshierarchie. </summary>
      <returns>Ein Konfigurationsobjekt zum weiteren Konfigurieren der Unterscheidungsspalten und -werte.</returns>
      <param name="discriminator">Der Name der Unterscheidungsspalte.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToTable(System.String)">
      <summary> Konfiguriert den Namen der Tabelle für die Zuordnung. </summary>
      <param name="tableName">Name der Tabelle.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToTable(System.String,System.String)">
      <summary> Konfiguriert den Namen und das Schema der Tabelle für die Zuordnung. </summary>
      <param name="tableName">Name der Tabelle.</param>
      <param name="schemaName">Das Schema der Tabelle.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration">
      <summary>Stellt eine Zuordnungskonfiguration für eine Fremdschlüsselzuordnung dar.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.Equals(System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration)">
      <summary>Bestimmt, ob das angegebene <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration" />-Objekt gleich dem aktuellen Objekt ist.</summary>
      <returns>true, wenn die Objekte gleich sind, andernfalls false.</returns>
      <param name="other">Eine <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration" />, die mit dem aktuellen Objekt verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>true, wenn die Objekte gleich sind, andernfalls false.</returns>
      <param name="obj">Ein Objekt, das mit dem aktuellen Objekt verglichen werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.GetHashCode">
      <summary>Fungiert als Hashfunktion für einen besonderen Typ. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Ein Hashcode für den aktuellen Typ.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.GetType">
      <summary>Ruft den Typ der aktuellen Instanz ab. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.MapKey(System.String[])">
      <summary> Konfiguriert die Namen der Spalten für den Fremdschlüssel. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="keyColumnNames"> Die Namen der Spalten für den Fremdschlüssel. Bei Verwendung mehrerer Fremdschlüsseleigenschaften müssen die Eigenschaften in der gleichen Reihenfolge angegeben werden, in der die Primärschlüsseleigenschaften für den Zielentitätstyp konfiguriert wurden. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToTable(System.String)">
      <summary>Konfiguriert den Namen der Tabelle, in der sich die Fremdschlüsselspalten befinden.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="tableName">Der Name der zu konfigurierenden Tabelle.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToTable(System.String,System.String)">
      <summary>Konfiguriert den Namen und das Schema der Tabelle, in der sich die Fremdschlüsselspalten befinden. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="tableName">Der Name der Tabelle.</param>
      <param name="schemaName">Das Schema der Tabelle.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration">
      <summary>Konfiguriert eine Beziehung, von der nur Fremdschlüsseleigenschaften unterstützt werden können, die nicht im Objektmodell verfügbar gemacht werden. Diese Konfigurationsfunktion wird von der Code First Fluent-API zur Verfügung gestellt. Weitere Informationen finden Sie unter <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>true, wenn die Objekte gleich sind, andernfalls false.</returns>
      <param name="obj">Ein Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.GetHashCode">
      <summary>Fungiert als Hashfunktion für einen besonderen Typ. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Ein Hashcode für den aktuellen Typ.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.GetType">
      <summary>Ruft den Typ der aktuellen Instanz ab. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration})">
      <summary>Konfiguriert die Beziehung zur Verwendung von Fremdschlüsseleigenschaften, die nicht im Objektmodell verfügbar gemacht werden. Die Spalten und die Tabelle können durch Angeben einer Konfigurationsaktion angepasst werden. Wenn eine leere Konfigurationsaktion angegeben wird, werden die Spaltennamen gemäß Konvention generiert. Wenn Fremdschlüsseleigenschaften im Objektmodell verfügbar gemacht werden, muss die HasForeignKey-Methode verwendet werden. Das Verfügbarmachen von Fremdschlüsseleigenschaften im Objektmodell wird nicht von allen Beziehungen unterstützt.</summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
      <param name="configurationAction">Aktion zum Konfigurieren der Fremdschlüsselspalten und der Tabelle.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration">
      <summary> Wird verwendet, um eine Spalte mit Längenfacets für einen Entitätstyp oder einen komplexen Typ zu konfigurieren.  Diese Konfigurationsfunktion wird von der Code First Fluent-API zur Verfügung gestellt. Weitere Informationen finden Sie unter <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>TRUE, wenn die Objekte gleich sind, andernfalls FALSE.</returns>
      <param name="obj">Ein Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.GetHashCode">
      <summary>Fungiert als Hashfunktion für einen besonderen Typ. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Ein Hashcode für den aktuellen Typ.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.GetType">
      <summary>Ruft den Typ der aktuellen Instanz ab. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary> Konfiguriert die Spalte für die angegebene maximale Länge. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="value"> Die maximale Länge für diese Spalte. Durch Festlegen dieses Werts auf NULL werden alle Beschränkungen mit Blick auf die maximale Länge aus der Spalte entfernt, und eine Standardlänge wird für die Datenbankspalte verwendet. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsFixedLength">
      <summary>Konfiguriert die Spalte für eine feste Länge. </summary>
      <returns>TRUE, wenn die Spalte eine feste Länge aufweist, andernfalls False.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsMaxLength">
      <summary> Konfiguriert die Spalte für die maximal zulässige und vom Datenbankanbieter unterstützte Länge. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsVariableLength">
      <summary> Konfiguriert die Spalte für eine variable Länge. </summary>
      <returns>TRUE, wenn die Spalte eine variable Länge aufweist, andernfalls False.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration">
      <summary> Wird verwendet, um eine Eigenschaft mit Längenfacets für einen Entitätstyp oder einen komplexen Typ zu konfigurieren.  Diese Konfigurationsfunktion wird von der Code First Fluent-API zur Verfügung gestellt. Weitere Informationen finden Sie unter <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>TRUE, wenn die Objekte gleich sind, andernfalls FALSE.</returns>
      <param name="obj">Ein Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.GetHashCode">
      <summary>Fungiert als Hashfunktion für einen besonderen Typ. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Ein Hashcode für den aktuellen Typ.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.GetType">
      <summary>Ruft den Typ der aktuellen Instanz ab. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary> Konfiguriert die angegebene maximale Länge für die Eigenschaft. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="value"> Die maximale Länge für die Eigenschaft. Durch Festlegen dieses Werts auf NULL werden alle Beschränkungen mit Blick auf die maximale Länge aus der Eigenschaft entfernt, und eine Standardlänge wird für die Datenbankspalte verwendet.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsFixedLength">
      <summary> Konfiguriert eine feste Länge für die Eigenschaft. Legen Sie mit HasMaxLength die feste Länge für die Eigenschaft fest. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsMaxLength">
      <summary> Konfiguriert die maximal zulässige und vom Datenbankanbieter unterstützte Länge für die Eigenschaft. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsVariableLength">
      <summary> Konfiguriert eine variable Länge für die Eigenschaft. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2">
      <summary> Konfiguriert eine m:n-Beziehung von einem Entitätstyp. </summary>
      <typeparam name="TEntityType">Der Entitätstyp, der Ursprung der Beziehung ist.</typeparam>
      <typeparam name="TTargetEntityType">Der Entitätstyp, der Ziel der Beziehung ist.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>TRUE, wenn die Objekte gleich sind, andernfalls FALSE.</returns>
      <param name="obj">Ein Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.GetHashCode">
      <summary>Fungiert als Hashfunktion für einen besonderen Typ. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Ein Hashcode für den aktuellen Typ.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.GetType">
      <summary>Ruft den Typ der aktuellen Instanz ab. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithMany">
      <summary> Konfiguriert die Beziehung als m:n-Beziehung ohne Navigationseigenschaft auf der anderen Seite der Beziehung. </summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary> Konfiguriert die Beziehung als m:n-Beziehung mit einer Navigationseigenschaft auf der anderen Seite der Beziehung. </summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
      <param name="navigationPropertyExpression"> Ein Lambdaausdruck, der die Navigationseigenschaft auf der anderen Seite der Beziehung darstellt. Beispielsweise t =&gt; t.MyProperty in C# und Function(t) t.MyProperty in Visual Basic .NET.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithOptional">
      <summary> Konfiguriert die Beziehung als m:optional-Beziehung ohne Navigationseigenschaft auf der anderen Seite der Beziehung. </summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithOptional(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> Konfiguriert die Beziehung als m:optional-Beziehung mit einer Navigationseigenschaft auf der anderen Seite der Beziehung. </summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
      <param name="navigationPropertyExpression"> Ein Lambdaausdruck, der die Navigationseigenschaft auf der anderen Seite der Beziehung darstellt. Beispielsweise t =&gt; t.MyProperty in C# und Function(t) t.MyProperty in Visual Basic .NET. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithRequired">
      <summary> Konfiguriert die Beziehung als m:erforderlich-Beziehung ohne Navigationseigenschaft auf der anderen Seite der Beziehung. </summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithRequired(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> Konfiguriert die Beziehung als m:erforderlich-Beziehung mit einer Navigationseigenschaft auf der anderen Seite der Beziehung. </summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
      <param name="navigationPropertyExpression"> Ein Lambdaausdruck, der die Navigationseigenschaft auf der anderen Seite der Beziehung darstellt. Beispielsweise t =&gt; t.MyProperty in C# und Function(t) t.MyProperty in Visual Basic .NET. </param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration">
      <summary> Konfiguriert die Tabellen- und Spaltenzuordnung einer m:n-Beziehung. Diese Konfigurationsfunktion wird von der Code First Fluent-API zur Verfügung gestellt. Weitere Informationen finden Sie unter <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.Equals(System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration)">
      <summary>Bestimmt, ob das angegebene <see cref="System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.IndependentAssociationMappingConfiguration" />-Objekt gleich dem aktuellen Objekt ist.</summary>
      <returns>TRUE, wenn die Objekte gleich sind, andernfalls FALSE.</returns>
      <param name="other">Ein <see cref="System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.IndependentAssociationMappingConfiguration" />-Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>TRUE, wenn die Objekte gleich sind, andernfalls FALSE.</returns>
      <param name="obj">Ein Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.GetHashCode">
      <summary>Fungiert als Hashfunktion für einen besonderen Typ. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Ein Hashcode für den aktuellen Typ.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.GetType">
      <summary>Ruft den Typ der aktuellen Instanz ab. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.MapLeftKey(System.String[])">
      <summary> Konfiguriert die Namen der Spalten für den linken Fremdschlüssel. Der linke Fremdschlüssel stellt die im Aufruf von HasMany für <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" /> angegebene Navigationseigenschaft dar. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="keyColumnNames"> Die Namen der Spalten für den Fremdschlüssel. Bei Verwendung mehrerer Fremdschlüsseleigenschaften müssen die Eigenschaften in der gleichen Reihenfolge angegeben werden, in der die Primärschlüsseleigenschaften für den Zielentitätstyp konfiguriert wurden. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.MapRightKey(System.String[])">
      <summary> Konfiguriert die Namen der Spalten für den rechten Fremdschlüssel. Der rechte Fremdschlüssel stellt die im WithMany-Aufruf angegebene Navigationseigenschaft dar. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="keyColumnNames"> Die Namen der Spalten für den Fremdschlüssel. Bei Verwendung mehrerer Fremdschlüsseleigenschaften müssen die Eigenschaften in der gleichen Reihenfolge angegeben werden, in der die Primärschlüsseleigenschaften für den Zielentitätstyp konfiguriert wurden. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToTable(System.String)">
      <summary> Konfiguriert den Namen der Jointabelle für die Beziehung. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="tableName">Name der Tabelle.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToTable(System.String,System.String)">
      <summary> Konfiguriert den Namen und das Schema der Jointabelle für die Beziehung. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="tableName">Name der Tabelle.</param>
      <param name="schemaName">Das Schema der Tabelle.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration">
      <summary> Konfiguriert eine m:n-Beziehung. Diese Konfigurationsfunktion wird von der Code First Fluent-API zur Verfügung gestellt. Weitere Informationen finden Sie unter <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>TRUE, wenn die Objekte gleich sind, andernfalls FALSE.</returns>
      <param name="obj">Ein Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.GetHashCode">
      <summary>Fungiert als Hashfunktion für einen besonderen Typ. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Ein Hashcode für den aktuellen Typ.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.GetType">
      <summary>Ruft den Typ der aktuellen Instanz ab. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration})">
      <summary> Konfiguriert die Fremdschlüsselspalten und die Tabelle, in denen die Beziehung gespeichert wird. </summary>
      <param name="configurationAction">Aktion zum Konfigurieren der Fremdschlüsselspalten und der Tabelle.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration">
      <summary> Konfiguriert eine Bedingung zur Unterscheidung zwischen Typen in einer Vererbungshierarchie anhand von einer Eigenschaft zugewiesenen Werten. Diese Konfigurationsfunktion wird von der Code First Fluent-API zur Verfügung gestellt. Weitere Informationen finden Sie unter <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>TRUE, wenn die Objekte gleich sind, andernfalls FALSE.</returns>
      <param name="obj">Ein Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.GetHashCode">
      <summary>Fungiert als Hashfunktion für einen besonderen Typ. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Ein Hashcode für den aktuellen Typ.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.GetType">
      <summary>Ruft den Typ der aktuellen Instanz ab. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.HasValue">
      <summary> Konfiguriert die Bedingung für die Verwendung eines Werts in der Eigenschaft.  Zeilen, denen kein Wert für Spalten zugewiesen wurde, in denen diese Eigenschaft gespeichert wird, werden als Basistyp für diesen Entitätstyp behandelt. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2">
      <summary>Konfiguriert eine optionale Beziehung von einem Entitätstyp. </summary>
      <typeparam name="TEntityType">Der Entitätstyp, der Ursprung der Beziehung ist.</typeparam>
      <typeparam name="TTargetEntityType">Der Entitätstyp, der Ziel der Beziehung ist.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>TRUE, wenn die Objekte gleich sind, andernfalls FALSE.</returns>
      <param name="obj">Ein Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.GetHashCode">
      <summary>Fungiert als Hashfunktion für einen besonderen Typ. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Ein Hashcode für den aktuellen Typ.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.GetType">
      <summary>Ruft den Typ der aktuellen Instanz ab. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithMany">
      <summary> Konfiguriert die Beziehung als optional:n-Beziehung ohne Navigationseigenschaft auf der anderen Seite der Beziehung. </summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary> Konfiguriert die Beziehung als optional:n-Beziehung mit einer Navigationseigenschaft auf der anderen Seite der Beziehung. </summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
      <param name="navigationPropertyExpression"> Ein Lambdaausdruck, der die Navigationseigenschaft auf der anderen Seite der Beziehung darstellt. Beispielsweise t =&gt; t.MyProperty in C# und Function(t) t.MyProperty in Visual Basic .NET. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalDependent">
      <summary> Konfiguriert die Beziehung als optional:optional-Beziehung ohne Navigationseigenschaft auf der anderen Seite der Beziehung. Der konfigurierte Entitätstyp ist vom Prinzipal abhängig und enthält einen Fremdschlüssel für diesen.  Der Entitätstyp, der Ziel der Beziehung ist, ist der Prinzipal in der Beziehung. </summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalDependent(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> Konfiguriert die Beziehung als optional:optional-Beziehung mit einer Navigationseigenschaft auf der anderen Seite der Beziehung. Der konfigurierte Entitätstyp ist vom Prinzipal abhängig und enthält einen Fremdschlüssel für diesen.  Der Entitätstyp, der Ziel der Beziehung ist, ist der Prinzipal in der Beziehung. </summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
      <param name="navigationPropertyExpression"> Ein Lambdaausdruck, der die Navigationseigenschaft auf der anderen Seite der Beziehung darstellt. Beispielsweise t =&gt; t.MyProperty in C# und Function(t) t.MyProperty in Visual Basic .NET.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalPrincipal">
      <summary> Konfiguriert die Beziehung als optional:optional-Beziehung ohne Navigationseigenschaft auf der anderen Seite der Beziehung. Der konfigurierte Entitätstyp ist der Prinzipal in der Beziehung.  Der Entitätstyp, der Ziel der Beziehung ist, ist vom Prinzipal abhängig und enthält einen Fremdschlüssel für diesen. </summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalPrincipal(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> Konfiguriert die Beziehung als optional:optional-Beziehung mit einer Navigationseigenschaft auf der anderen Seite der Beziehung. Der konfigurierte Entitätstyp ist der Prinzipal in der Beziehung.  Der Entitätstyp, der Ziel der Beziehung ist, ist vom Prinzipal abhängig und enthält einen Fremdschlüssel für diesen. </summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
      <param name="navigationPropertyExpression"> Ein Lambdaausdruck, der die Navigationseigenschaft auf der anderen Seite der Beziehung darstellt. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithRequired">
      <summary>Konfiguriert die angegebene Seite der Beziehung so, dass sie ohne eine Navigationseigenschaft auf der anderen Seite der Beziehung erforderlich ist. </summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithRequired(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>Konfiguriert die angegebene Seite der Beziehung so, dass sie mit einer Navigationseigenschaft auf der anderen Seite der Beziehung erforderlich ist. </summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
      <param name="navigationPropertyExpression"> Ein Lambdaausdruck, der die Navigationseigenschaft auf der anderen Seite der Beziehung darstellt. Beispielsweise t =&gt; t.MyProperty in C# und Function(t) t.MyProperty in Visual Basic .NET.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration">
      <summary>Konfiguriert eine primitive Spalte von einem Entitätstyp.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>TRUE, wenn die Objekte gleich sind, andernfalls FALSE.</returns>
      <param name="obj">Ein Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.GetHashCode">
      <summary>Fungiert als Hashfunktion für einen besonderen Typ. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Ein Hashcode für den aktuellen Typ.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.GetType">
      <summary>Ruft den Typ der aktuellen Instanz ab. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> Konfiguriert die Reihenfolge der primitiven Spalte, in der die Eigenschaft gespeichert werden soll. Mit dieser Methode wird außerdem die Schlüsselsortierung bei einem Entitätstyp mit einem zusammengesetzten Schlüssel angegeben. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="columnOrder">Die Reihenfolge, in der diese Spalte in der Datenbanktabelle angezeigt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.HasColumnType(System.String)">
      <summary> Konfiguriert den Datentyp der primitiven Spalte, in der die Eigenschaft gespeichert werden soll. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="columnType">Der Name des spezifischen Datentyps für den Datenbankanbieter.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.IsOptional">
      <summary>Konfiguriert die primitive Spalte als optional.</summary>
      <returns>TRUE, wenn die Spalte optional ist, andernfalls FALSE.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.IsRequired">
      <summary>Konfiguriert die primitive Spalte als erforderlich.</summary>
      <returns>TRUE, wenn die Spalte erforderlich ist, andernfalls FALSE.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration">
      <summary> Wird verwendet, um die primitive Eigenschaft eines Entitätstyps oder eines komplexen Typs zu konfigurieren.  Diese Konfigurationsfunktion wird von der Code First Fluent-API zur Verfügung gestellt. Weitere Informationen finden Sie unter <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>TRUE, wenn die Objekte gleich sind, andernfalls FALSE.</returns>
      <param name="obj">Ein Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.GetHashCode">
      <summary>Fungiert als Hashfunktion für einen besonderen Typ. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Ein Hashcode für den aktuellen Typ.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.GetType">
      <summary>Ruft den Typ der aktuellen Instanz ab. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnName(System.String)">
      <summary> Konfiguriert den Namen der Datenbankspalte, in der die Eigenschaft gespeichert werden soll. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="columnName">Der Name der Spalte.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> Konfiguriert die Reihenfolge der Datenbankspalte, in der die Eigenschaft gespeichert werden soll. Mit dieser Methode wird außerdem die Schlüsselsortierung bei einem Entitätstyp mit einem zusammengesetzten Schlüssel angegeben. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="columnOrder">Die Reihenfolge, in der diese Spalte in der Datenbanktabelle angezeigt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnType(System.String)">
      <summary> Konfiguriert den Datentyp der Datenbankspalte, in der die Eigenschaft gespeichert werden soll. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="columnType">Der Name des spezifischen Datentyps für den Datenbankanbieter.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>     Konfiguriert, wie Werte für die Eigenschaft von der Datenbank generiert werden. </summary>
      <returns>Die gleiche PrimitivePropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="databaseGeneratedOption">     Das Muster, das zum Generieren von Werten für die Eigenschaft in der Datenbank verwendet wird.     Durch Festlegen von NULL wird das von der Datenbank generierte Musterfacet aus der Eigenschaft entfernt.     Beim Festlegen von NULL weist die Laufzeit das gleiche Verhalten wie beim Angeben von "Keine" auf. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsConcurrencyToken">
      <summary> Konfiguriert die Eigenschaft, die als Token für vollständige Parallelität verwendet werden soll. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary> Gibt an, ob die Eigenschaft als Token für vollständige Parallelität verwendet werden soll. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="concurrencyToken"> Der Wert gibt an, ob die Eigenschaft als Token für vollständige Parallelität verwendet wird. Bei NULL wird das Parallelitätstokenfacet aus der Eigenschaft entfernt. Beim Angeben von NULL weist die Laufzeit das gleiche Verhalten wie beim Angeben von False auf. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsOptional">
      <summary> Konfiguriert die Eigenschaft als optional. Die Datenbankspalte, in der diese Eigenschaft gespeichert wird, kann nullable-Werte enthalten. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsRequired">
      <summary> Konfiguriert die Eigenschaft als erforderlich. Die Datenbankspalte, in der diese Eigenschaft gespeichert wird, darf keine nullable-Werte enthalten. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2">
      <summary> Konfiguriert eine erforderliche Beziehung von einem Entitätstyp. </summary>
      <typeparam name="TEntityType">Der Entitätstyp, der Ursprung der Beziehung ist.</typeparam>
      <typeparam name="TTargetEntityType">Der Entitätstyp, der Ziel der Beziehung ist.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>TRUE, wenn die Objekte gleich sind, andernfalls FALSE.</returns>
      <param name="obj">Ein Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.GetHashCode">
      <summary>Fungiert als Hashfunktion für einen besonderen Typ. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Ein Hashcode für den aktuellen Typ.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.GetType">
      <summary>Ruft den Typ der aktuellen Instanz ab. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithMany">
      <summary> Konfiguriert die Beziehung als erforderlich:n-Beziehung ohne Navigationseigenschaft auf der anderen Seite der Beziehung. </summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary> Konfiguriert die Beziehung als erforderlich:n-Beziehung mit einer Navigationseigenschaft auf der anderen Seite der Beziehung. </summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
      <param name="navigationPropertyExpression"> Ein Lambdaausdruck, der die Navigationseigenschaft auf der anderen Seite der Beziehung darstellt. Beispielsweise t =&gt; t.MyProperty in C# und Function(t) t.MyProperty in Visual Basic .NET. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithOptional">
      <summary> Konfiguriert die Beziehung als erforderlich:optional-Beziehung ohne Navigationseigenschaft auf der anderen Seite der Beziehung. </summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithOptional(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> Konfiguriert die Beziehung als erforderlich:optional-Beziehung mit einer Navigationseigenschaft auf der anderen Seite der Beziehung. </summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
      <param name="navigationPropertyExpression"> Ein Lambdaausdruck, der die Navigationseigenschaft auf der anderen Seite der Beziehung darstellt. Beispielsweise t =&gt; t.MyProperty in C# und Function(t) t.MyProperty in Visual Basic .NET.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredDependent">
      <summary> Konfiguriert die Beziehung als erforderlich:erforderlich-Beziehung ohne Navigationseigenschaft auf der anderen Seite der Beziehung. Der konfigurierte Entitätstyp ist vom Prinzipal abhängig und enthält einen Fremdschlüssel für diesen.  Der Entitätstyp, der Ziel der Beziehung ist, ist der Prinzipal in der Beziehung. </summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredDependent(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> Konfiguriert die Beziehung als erforderlich:erforderlich-Beziehung mit einer Navigationseigenschaft auf der anderen Seite der Beziehung. Der konfigurierte Entitätstyp ist vom Prinzipal abhängig und enthält einen Fremdschlüssel für diesen.  Der Entitätstyp, der Ziel der Beziehung ist, ist der Prinzipal in der Beziehung. </summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
      <param name="navigationPropertyExpression"> Ein Lambdaausdruck, der die Navigationseigenschaft auf der anderen Seite der Beziehung darstellt. Beispielsweise t =&gt; t.MyProperty in C# und Function(t) t.MyProperty in Visual Basic .NET.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredPrincipal">
      <summary> Konfiguriert die Beziehung als erforderlich:erforderlich-Beziehung ohne Navigationseigenschaft auf der anderen Seite der Beziehung. Der konfigurierte Entitätstyp ist der Prinzipal in der Beziehung.  Der Entitätstyp, der Ziel der Beziehung ist, ist vom Prinzipal abhängig und enthält einen Fremdschlüssel für diesen. </summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredPrincipal(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> Konfiguriert die Beziehung als erforderlich:erforderlich-Beziehung mit einer Navigationseigenschaft auf der anderen Seite der Beziehung. Der konfigurierte Entitätstyp ist der Prinzipal in der Beziehung.  Der Entitätstyp, der Ziel der Beziehung ist, ist vom Prinzipal abhängig und enthält einen Fremdschlüssel für diesen. </summary>
      <returns>Ein Konfigurationsobjekt, das für die weitere Konfiguration der Beziehung verwendet werden kann.</returns>
      <param name="navigationPropertyExpression"> Ein Lambdaausdruck, der die Navigationseigenschaft auf der anderen Seite der Beziehung darstellt. Beispielsweise t =&gt; t.MyProperty in C# und Function(t) t.MyProperty in Visual Basic .NET.  </param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration">
      <summary> Konfiguriert eine Datenbankspalte zum Speichern von Zeichenfolgenwerten. Diese Konfigurationsfunktion wird von der Code First Fluent-API zur Verfügung gestellt. Weitere Informationen finden Sie unter <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>TRUE, wenn die Objekte gleich sind, andernfalls FALSE.</returns>
      <param name="obj">Ein Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.GetHashCode">
      <summary>Fungiert als Hashfunktion für einen besonderen Typ. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Ein Hashcode für den aktuellen Typ.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.GetType">
      <summary>Ruft den Typ der aktuellen Instanz ab. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> Konfiguriert die Reihenfolge der Datenbankspalte. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="columnOrder">Die Reihenfolge, in der diese Spalte in der Datenbanktabelle angezeigt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasColumnType(System.String)">
      <summary> Konfiguriert den Datentyp der Datenbankspalte. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="columnType">Der Name des spezifischen Datentyps für den Datenbankanbieter.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>Konfiguriert die angegebene maximale Länge für die Eigenschaft.</summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="value">Die maximale Länge für die Eigenschaft. Durch Festlegen dieses Werts auf NULL wird eine Standardlänge für die Spalte verwendet.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsFixedLength">
      <summary> Konfiguriert die Spalte für eine feste Länge. Legen Sie mit HasMaxLength die feste Länge für die Eigenschaft fest. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsMaxLength">
      <summary> Konfiguriert die Spalte für die maximal zulässige und vom Datenbankanbieter unterstützte Länge. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsOptional">
      <summary> Konfiguriert die Spalte als optional. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsRequired">
      <summary> Konfiguriert die Spalte als erforderlich. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsUnicode">
      <summary> Konfiguriert die Unterstützung von Unicode-Zeichenfolgen durch die Spalte. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsUnicode(System.Nullable{System.Boolean})">
      <summary> Gibt an, ob Unicode-Zeichenfolgen von der Spalte unterstützt werden. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="unicode"> Dieser Wert gibt an, ob Unicode-Zeichenfolgen von der Spalte unterstützt werden. Bei NULL wird das Unicode-Facet aus der Spalte entfernt. Beim Angeben von NULL weist die Laufzeit das gleiche Verhalten wie beim Angeben von False auf. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsVariableLength">
      <summary> Konfiguriert die Spalte für eine variable Länge. Spalten weisen standardmäßig eine variable Länge auf. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration">
      <summary>Wird verwendet, um die <see cref="T:System.string" />-Eigenschaft eines Entitätstyps oder eines komplexen Typs zu konfigurieren. Diese Konfigurationsfunktion wird von der Code First Fluent-API zur Verfügung gestellt. Weitere Informationen finden Sie unter <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>TRUE, wenn die Objekte gleich sind, andernfalls FALSE.</returns>
      <param name="obj">Ein Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.GetHashCode">
      <summary>Fungiert als Hashfunktion für einen besonderen Typ. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Ein Hashcode für den aktuellen Typ.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.GetType">
      <summary>Ruft den Typ der aktuellen Instanz ab. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnName(System.String)">
      <summary>Konfiguriert den Namen der Datenbankspalte, in der die Eigenschaft gespeichert werden soll. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="columnName">Der Name der Spalte.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> Konfiguriert die Reihenfolge der Datenbankspalte, in der die Eigenschaft gespeichert werden soll. Mit dieser Methode wird außerdem die Schlüsselsortierung bei einem Entitätstyp mit einem zusammengesetzten Schlüssel angegeben. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="columnOrder">Die Reihenfolge, in der diese Spalte in der Datenbanktabelle angezeigt werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnType(System.String)">
      <summary> Konfiguriert den Datentyp der Datenbankspalte, in der die Eigenschaft gespeichert werden soll. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="columnType">Der Name des spezifischen Datentyps für den Datenbankanbieter.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>     Konfiguriert, wie Werte für die Eigenschaft von der Datenbank generiert werden. </summary>
      <returns>Die gleiche StringPropertyConfiguration-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="databaseGeneratedOption">     Das Muster, das zum Generieren von Werten für die Eigenschaft in der Datenbank verwendet wird.     Durch Festlegen von NULL wird das von der Datenbank generierte Musterfacet aus der Eigenschaft entfernt.     Beim Festlegen von NULL weist die Laufzeit das gleiche Verhalten wie beim Angeben von "Keine" auf. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>Konfiguriert die angegebene maximale Länge für die Eigenschaft. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="value">Die maximale Länge für die Eigenschaft. Durch Festlegen dieser Eigenschaft auf NULL werden alle Beschränkungen mit Blick auf die maximale Länge aus der Eigenschaft entfernt, und eine Standardlänge wird für die Datenbankspalte verwendet. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsConcurrencyToken">
      <summary> Konfiguriert die Eigenschaft, die als Token für vollständige Parallelität verwendet werden soll. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary> Gibt an, ob die Eigenschaft als Token für vollständige Parallelität verwendet werden soll. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="concurrencyToken"> Gibt an, ob die Eigenschaft ein Parallelitätstoken ist. Bei NULL wird das Parallelitätstokenfacet aus der Eigenschaft entfernt. Beim Angeben von NULL weist die Laufzeit das gleiche Verhalten wie beim Angeben von False auf. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsFixedLength">
      <summary>Konfiguriert eine feste Länge für die Eigenschaft. Legen Sie mit HasMaxLength die feste Länge für die Eigenschaft fest. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsMaxLength">
      <summary>Konfiguriert die maximal zulässige und vom Datenbankanbieter unterstützte Länge für die Eigenschaft. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsOptional">
      <summary>Konfiguriert die Eigenschaft als optional. Die Datenbankspalte, in der diese Eigenschaft gespeichert wird, kann nullable-Werte enthalten. <see cref="T:System.string" />-Eigenschaften sind standardmäßig optional. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsRequired">
      <summary> Konfiguriert die Eigenschaft als erforderlich. Die Datenbankspalte, in der diese Eigenschaft gespeichert wird, darf keine nullable-Werte enthalten. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsUnicode">
      <summary>Konfiguriert die Eigenschaft zur Unterstützung von Unicode-Zeichenfolgen. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsUnicode(System.Nullable{System.Boolean})">
      <summary>Gibt an, ob Unicode-Zeichenfolgen von der Eigenschaft unterstützt werden. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
      <param name="unicode"> Dieser Wert gibt an, ob Unicode-Zeichenfolgen von der Eigenschaft unterstützt werden. Bei NULL wird das Unicode-Facet aus der Eigenschaft entfernt. Beim Angeben von NULL weist die Laufzeit das gleiche Verhalten wie beim Angeben von False auf. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsVariableLength">
      <summary>Konfiguriert eine variable Länge für die Eigenschaft. <see cref="T:System.string" />-Eigenschaften weisen standardmäßig eine variable Länge auf. </summary>
      <returns>Die gleiche <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" />-Instanz, sodass mehrere Aufrufe verkettet werden können.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1">
      <summary>Ermöglicht das Konfigurieren eines Typs in einem Modell. </summary>
      <typeparam name="TStructuralType">Der zu konfigurierende Typ.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>TRUE, wenn die Objekte gleich sind, andernfalls FALSE.</returns>
      <param name="obj">Ein Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.GetHashCode">
      <summary>Fungiert als Hashfunktion für einen besonderen Typ. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Ein Hashcode für den aktuellen Typ.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.GetType">
      <summary>Ruft den Typ der aktuellen Instanz ab. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Ignore``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> Schließt eine Eigenschaft aus dem Modell aus, sodass diese nicht der Datenbank zugeordnet werden kann. </summary>
      <param name="propertyExpression"> Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt. Beispielsweise t =&gt; t.MyProperty in C# und Function(t) t.MyProperty in Visual Basic .NET. </param>
      <typeparam name="TProperty">Der Typ der Eigenschaft, die ignoriert werden soll.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}})">
      <summary> Konfiguriert eine <see cref="T:System.byte[]" />-Eigenschaft, die für diesen Typ definiert wird. </summary>
      <returns>Ein Konfigurationsobjekt, das für die Konfiguration der Eigenschaft verwendet werden kann.</returns>
      <param name="propertyExpression"> Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt. Beispielsweise t =&gt; t.MyProperty in C# und Function(t) t.MyProperty in Visual Basic .NET. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Spatial.DbGeography}})">
      <summary>   Konfiguriert eine <see cref="T:DbGeography" />-Eigenschaft, die für diesen Typ definiert wird. </summary>
      <returns>Ein Konfigurationsobjekt, das für die Konfiguration der Eigenschaft verwendet werden kann.</returns>
      <param name="propertyExpression">   Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt.   C#: t =&amp;gt; t.MyProperty      VB.Net: Function(t) t.MyProperty </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Spatial.DbGeometry}})">
      <summary>   Konfiguriert eine <see cref="T:DbGeometry" />-Eigenschaft, die für diesen Typ definiert wird. </summary>
      <returns>Ein Konfigurationsobjekt, das für die Konfiguration der Eigenschaft verwendet werden kann.</returns>
      <param name="propertyExpression">   Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt.   C#: t =&amp;gt; t.MyProperty      VB.Net: Function(t) t.MyProperty </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}})">
      <summary> Konfiguriert eine <see cref="T:System.DateTime" />-Eigenschaft, die für diesen Typ definiert wird. </summary>
      <returns>Ein Konfigurationsobjekt, das für die Konfiguration der Eigenschaft verwendet werden kann.</returns>
      <param name="propertyExpression"> Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt. Beispielsweise t =&gt; t.MyProperty in C# und Function(t) t.MyProperty in Visual Basic .NET.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTimeOffset}})">
      <summary> Konfiguriert eine <see cref="T:System.DateTimeOffset" />-Eigenschaft, die für diesen Typ definiert wird. </summary>
      <returns>Ein Konfigurationsobjekt, das für die Konfiguration der Eigenschaft verwendet werden kann.</returns>
      <param name="propertyExpression"> Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt. Beispielsweise t =&gt; t.MyProperty in C# und Function(t) t.MyProperty in Visual Basic .NET. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
      <summary> Konfiguriert eine <see cref="T:System.decimal" />-Eigenschaft, die für diesen Typ definiert wird. </summary>
      <returns>Ein Konfigurationsobjekt, das für die Konfiguration der Eigenschaft verwendet werden kann.</returns>
      <param name="propertyExpression"> Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt. Beispielsweise t =&gt; t.MyProperty in C# und Function(t) t.MyProperty in Visual Basic .NET. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTime}}})">
      <summary> Konfiguriert eine Nullable(<see cref="T:System.DateTime" />)-Eigenschaft, die für diesen Typ definiert wird. </summary>
      <returns>Ein Konfigurationsobjekt, das für die Konfiguration der Eigenschaft verwendet werden kann.</returns>
      <param name="propertyExpression"> Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt. Beispielsweise t =&gt; t.MyProperty in C# und Function(t) t.MyProperty in Visual Basic .NET. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTimeOffset}}})">
      <summary> Konfiguriert eine Nullable(<see cref="T:System.DateTimeOffset" />)-Eigenschaft, die für diesen Typ definiert wird. </summary>
      <returns>Ein Konfigurationsobjekt, das für die Konfiguration der Eigenschaft verwendet werden kann.</returns>
      <param name="propertyExpression"> Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt. Beispielsweise t =&gt; t.MyProperty in C# und Function(t) t.MyProperty in Visual Basic .NET.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})">
      <summary> Konfiguriert eine Nullable(<see cref="T:System.Decimal" />)-Eigenschaft, die für diesen Typ definiert wird. </summary>
      <returns>Ein Konfigurationsobjekt, das für die Konfiguration der Eigenschaft verwendet werden kann.</returns>
      <param name="propertyExpression"> Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt. Beispielsweise t =&gt; t.MyProperty in C# und Function(t) t.MyProperty in Visual Basic .NET. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.TimeSpan}}})">
      <summary> Konfiguriert eine Nullable(<see cref="T:System.TimeSpan" />)-Eigenschaft, die für diesen Typ definiert wird. </summary>
      <returns>Ein Konfigurationsobjekt, das für die Konfiguration der Eigenschaft verwendet werden kann.</returns>
      <param name="propertyExpression"> Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt. Beispielsweise t =&gt; t.MyProperty in C# und Function(t) t.MyProperty in Visual Basic .NET.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}})">
      <summary> Konfiguriert eine Nullable(<see cref="T:System.struct" />)-Eigenschaft, die für diesen Typ definiert wird. </summary>
      <returns>Ein Konfigurationsobjekt, das für die Konfiguration der Eigenschaft verwendet werden kann.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt. Beispielsweise t =&gt; t.MyProperty in C# und Function(t) t.MyProperty in Visual Basic .NET. </param>
      <typeparam name="T">Der Typ der Eigenschaft, der konfiguriert wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
      <summary> Konfiguriert eine <see cref="T:System.string" />-Eigenschaft, die für diesen Typ definiert wird. </summary>
      <returns>Ein Konfigurationsobjekt, das für die Konfiguration der Eigenschaft verwendet werden kann.</returns>
      <param name="propertyExpression">Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt. Beispielsweise t =&gt; t.MyProperty in C# und Function(t) t.MyProperty in Visual Basic .NET.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.TimeSpan}})">
      <summary> Konfiguriert eine <see cref="T:System.TimeSpan" />-Eigenschaft, die für diesen Typ definiert wird. </summary>
      <returns>Ein Konfigurationsobjekt, das für die Konfiguration der Eigenschaft verwendet werden kann.</returns>
      <param name="propertyExpression"> Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt. Beispielsweise t =&gt; t.MyProperty in C# und Function(t) t.MyProperty in Visual Basic .NET.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> Konfiguriert eine <see cref="T:System.struct" />-Eigenschaft, die für diesen Typ definiert wird. </summary>
      <returns>Ein Konfigurationsobjekt, das für die Konfiguration der Eigenschaft verwendet werden kann.</returns>
      <param name="propertyExpression"> Ein Lambdaausdruck, der die zu konfigurierende Eigenschaft darstellt. Beispielsweise t =&gt; t.MyProperty in C# und Function(t) t.MyProperty in Visual Basic .NET. </param>
      <typeparam name="T">Der Typ der Eigenschaft, der konfiguriert wird.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration">
      <summary> Konfiguriert eine Unterscheidungsspalte zur Differenzierung von Typen in einer Vererbungshierarchie. Diese Konfigurationsfunktion wird von der Code First Fluent-API zur Verfügung gestellt. Weitere Informationen finden Sie unter <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt gleich dem aktuellen Objekt ist. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>TRUE, wenn die Objekte gleich sind, andernfalls FALSE.</returns>
      <param name="obj">Ein Objekt.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.GetHashCode">
      <summary>Fungiert als Hashfunktion für einen besonderen Typ. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Ein Hashcode für den aktuellen Typ.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.GetType">
      <summary>Ruft den Typ der aktuellen Instanz ab. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Der genaue Laufzeittyp der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue``1(System.Nullable{``0})">
      <summary>Konfiguriert den Unterscheidungswert zur Identifizierung des von anderen Typen in der Vererbungshierarchie konfigurierten Entitätstyps. </summary>
      <returns>Ein Konfigurationsobjekt zum Konfigurieren der Spalte, in der die Unterscheidungswerte gespeichert werden.</returns>
      <param name="value">Der Wert, mit dem der Entitätstyp identifiziert werden soll.</param>
      <typeparam name="T">Der Typ des Unterscheidungswerts.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue(System.String)">
      <summary>Konfiguriert den Unterscheidungswert zur Identifizierung des von anderen Typen in der Vererbungshierarchie konfigurierten Entitätstyps. </summary>
      <returns>Ein Konfigurationsobjekt zum Konfigurieren der Spalte, in der die Unterscheidungswerte gespeichert werden.</returns>
      <param name="value">Der Wert, mit dem der Entitätstyp identifiziert werden soll.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue``1(``0)">
      <summary> Konfiguriert den Unterscheidungswert zur Identifizierung des von anderen Typen in der Vererbungshierarchie konfigurierten Entitätstyps. </summary>
      <returns>Ein Konfigurationsobjekt zum Konfigurieren der Spalte, in der die Unterscheidungswerte gespeichert werden.</returns>
      <param name="value">Der Wert, mit dem der Entitätstyp identifiziert werden soll.</param>
      <typeparam name="T">Der Typ des Unterscheidungswerts.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt. Diese Methode wird für IntelliSense ausgeblendet.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.AssociationInverseDiscoveryConvention">
      <summary>Konvention zur Erkennung von Navigationseigenschaften als Gegenstücke voneinander, wenn nur ein Paar von Navigationseigenschaften zwischen den verwandten Typen vorhanden ist.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnAttributeConvention">
      <summary>Konvention zur Verarbeitung von <see cref="T:System.ComponentModel.DataAnnotations.ColumnAttribute" />-Instanzen in Eigenschaften des Modells.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnTypeCasingConvention">
      <summary> Konvention zur Konvertierung von Datentypen in Kleinbuchstaben, die explizit mit Datenanmerkungen oder mit der <see cref="T:System.Data.Entity.DbModelBuilder" />-API angegeben wurden. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeAttributeConvention">
      <summary>Konvention zur Verarbeitung von <see cref="T:System.ComponentModel.DataAnnotations.ComplexTypeAttribute" />-Instanzen in Typen des Modells. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeDiscoveryConvention">
      <summary>Konvention zum Konfigurieren eines Typs als komplexer Typ, wenn kein primärer Schlüssel, kein zugeordneter Basistyp und keine Navigationseigenschaften vorhanden sind. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ConcurrencyCheckAttributeConvention">
      <summary>Konvention zur Verarbeitung von <see cref="T:System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute" />-Instanzen in Eigenschaften des Modells.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DatabaseGeneratedAttributeConvention">
      <summary> Konvention zur Verarbeitung von <see cref="T:System.ComponentModel.DataAnnotations.DatabaseGeneratedAttribute" />-Instanzen in Eigenschaften des Modells. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention">
      <summary>Konvention für Dezimaleigenschaften zum Festlegen der Genauigkeit auf 18 und der Skalierung auf 2. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DeclaredPropertyOrderingConvention">
      <summary>Konvention zum Verschieben von Primärschlüsseleigenschaften an die erste Stelle. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyAssociationMultiplicityConvention">
      <summary>Konvention zur Unterscheidung zwischen optionalen und erforderlichen Beziehungen auf Grundlage Zulässigkeit von NULL-Werten der CLR in der Fremdschlüsseleigenschaft. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyNavigationPropertyAttributeConvention">
      <summary>Konvention zur Verarbeitung von <see cref="T:System.ComponentModel.DataAnnotations.ForeignKeyAttribute" />-Instanzen in Navigationseigenschaften des Modells.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyPrimitivePropertyAttributeConvention">
      <summary>Konvention zur Verarbeitung von <see cref="T:System.ComponentModel.DataAnnotations.ForeignKeyAttribute" />-Instanzen in Fremdschlüsseleigenschaften des Modells.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IConvention">
      <summary>Identifiziert Konventionen, die aus einer <see cref="T:System.Data.Entity.DbModelBuilder" />-Instanz entfernt werden können. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IdKeyDiscoveryConvention">
      <summary>Konvention zur Erkennung von Primärschlüsseleigenschaften.  </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.InversePropertyAttributeConvention">
      <summary>Konvention zur Verarbeitung von <see cref="T:System.ComponentModel.DataAnnotations.InversePropertyAttribute" />-Instanzen in Eigenschaften des Modells. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.KeyAttributeConvention">
      <summary>Konvention zur Verarbeitung von <see cref="T:System.ComponentModel.DataAnnotations.KeyAttribute" />-Instanzen in Eigenschaften des Modells. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ManyToManyCascadeDeleteConvention">
      <summary>Konvention zum Hinzufügen einer Löschweitergabe zur Jointabelle aus beiden Tabellen einer m:n-Beziehung.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.MappingInheritedPropertiesSupportConvention">
      <summary>Stellt sicher, dass die geerbten Eigenschaften der Zuordnung keine ungültigen oder nicht unterstützten Zuordnungen ergeben.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.MaxLengthAttributeConvention">
      <summary>Konvention zur Verarbeitung von <see cref="T:System.ComponentModel.DataAnnotations.MaxLengthAttribute" />-Instanzen in Eigenschaften des Modells. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention">
      <summary>Konvention zur Erkennung von Fremdschlüsseleigenschaften, deren Name aus dem Namen der abhängigen Navigationseigenschaft und dem bzw. den Namen der Eigenschaften des primären Schlüssels für den Prinzipaltyp zusammengesetzt ist. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedPropertyAttributeConvention">
      <summary>Konvention zur Verarbeitung von <see cref="T:System.ComponentModel.DataAnnotations.NotMappedAttribute" />-Instanzen in Eigenschaften des Modells. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedTypeAttributeConvention">
      <summary>Konvention zur Verarbeitung von <see cref="T:System.ComponentModel.DataAnnotations.NotMappedAttribute" />-Instanzen in Typen des Modells. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.OneToManyCascadeDeleteConvention">
      <summary>Konvention zum Aktivieren der Löschweitergabe für erforderliche Beziehungen. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.OneToOneConstraintIntroductionConvention">
      <summary>Konvention zum Konfigurieren der primären Schlüssel des abhängigen Entitätstyps als Fremdschlüssel in einer 1:1-Beziehung. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingEntitySetNameConvention">
      <summary>Konvention zum Festlegen des Namens der Entitätsmenge auf eine pluralisierte Version des Namens des Entitätstyps. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingTableNameConvention">
      <summary>Konvention zum Festlegen des Tabellennamens der Entitätsmenge auf eine pluralisierte Version des Namens des Entitätstyps. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PrimaryKeyNameForeignKeyDiscoveryConvention">
      <summary>Konvention zur Erkennung von Fremdschlüsseleigenschaften, deren Namen mit dem bzw. Eigenschaftennamen des primären Schlüssels für den Prinzipaltyp übereinstimmen. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention">
      <summary>Konvention zum Festlegen maximaler Längen für Eigenschaftentypen, die Längenfacets unterstützen. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredNavigationPropertyAttributeConvention">
      <summary>Konvention zur Verarbeitung von <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute" />-Instanzen in Navigationseigenschaften des Modells. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredPrimitivePropertyAttributeConvention">
      <summary>Konvention zur Verarbeitung von <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute" />-Instanzen in primitiven Eigenschaften des Modells. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention">
      <summary>Legt eine maximale Standardlänge von 4000 für Eigenschaften fest, deren Typ Längenfacets unterstützt, wenn SqlCE als Anbieter fungiert.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.StoreGeneratedIdentityKeyConvention">
      <summary>Konvention zum Konfigurieren von Primärschlüsseln ganzer Zahlen als Identität. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.StringLengthAttributeConvention">
      <summary>Konvention zur Verarbeitung von <see cref="T:System.ComponentModel.DataAnnotations.StringLengthAttribute" />-Instanzen in Eigenschaften des Modells. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TableAttributeConvention">
      <summary>Konvention zur Verarbeitung von <see cref="T:System.ComponentModel.DataAnnotations.TableAttribute" />-Instanzen in Typen des Modells. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TimestampAttributeConvention">
      <summary>Konvention zur Verarbeitung von <see cref="T:System.ComponentModel.DataAnnotations.TimestampAttribute" />-Instanzen in Eigenschaften des Modells. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TypeNameForeignKeyDiscoveryConvention">
      <summary>Konvention zur Erkennung von Fremdschlüsseleigenschaften, deren Name aus dem Namen des Prinzipaltyps und dem bzw. den Namen der Eigenschaften des primären Schlüssels für den Prinzipaltyp zusammengesetzt ist. </summary>
    </member>
    <member name="T:System.Data.Entity.Validation.DbEntityValidationException">
      <summary>Eine Ausnahme wird von <see cref="M:System.Data.Entity.DbContext.SaveChanges" /> ausgelöst, wenn die Validierung einer Entität fehlschlägt.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" />-Klasse.</summary>
      <param name="message">Die Ausnahmemeldung.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbEntityValidationResult})">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" />-Klasse.</summary>
      <param name="message">Die Ausnahmemeldung.</param>
      <param name="entityValidationResults">Validierungsergebnisse.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbEntityValidationResult},System.Exception)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" />-Klasse.</summary>
      <param name="message">Die Ausnahmemeldung.</param>
      <param name="entityValidationResults">Validierungsergebnisse.</param>
      <param name="innerException">Die innere Ausnahme.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Exception)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" />-Klasse.</summary>
      <param name="message">Die Ausnahmemeldung.</param>
      <param name="innerException">Die innere Ausnahme.</param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationException.EntityValidationErrors">
      <summary>Gibt ggf. Validierungsfehler zurück.</summary>
      <returns>Die Validierungsfehler, sofern vorhanden.</returns>
    </member>
    <member name="T:System.Data.Entity.Validation.DbEntityValidationResult">
      <summary>Stellt Validierungsergebnisse für eine einzelne Entität dar.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationResult.#ctor(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbValidationError})">
      <summary>Erstellt eine Instanz der <see cref="T:System.Data.Entity.Validation.DbEntityValidationResult" />-Klasse. </summary>
      <param name="entry">Der Entitätseintrag, auf den sich die Ergebnisse beziehen. Nie NULL.</param>
      <param name="validationErrors">Eine Liste von <see cref="T:System.Data.Entity.Validation.DbValidationError" />-Instanzen. Diese ist nie NULL, kann jedoch leer sein, d. h., die Entität ist gültig. </param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.Entry">
      <summary>Ruft die Instanz von <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> ab, auf die sich die Ergebnisse beziehen.</summary>
      <returns>Der <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.IsValid">
      <summary>Ruft einen Indikator ab, der angibt, ob die Entität gültig ist.</summary>
      <returns>true, wenn die Entität gültig ist, andernfalls false.</returns>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.ValidationErrors">
      <summary>Ruft Validierungsfehler ab. Diese Eigenschaft ist nie null. </summary>
      <returns>Die Validierungsfehler.</returns>
    </member>
    <member name="T:System.Data.Entity.Validation.DbUnexpectedValidationException">
      <summary>Eine Ausnahme wird von <see cref="M:System.Data.Entity.DbContext.GetValidationErrors" /> ausgelöst, wenn eine Ausnahme vom Validierungscode ausgelöst wird.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Validation.DbUnexpectedValidationException" />-Klasse.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Validation.DbUnexpectedValidationException" />-Klasse mit den angegebenen Serialisierungsinformationen und dem angegebenen Kontext. </summary>
      <param name="info">Die Serialisierungsinformationen.</param>
      <param name="context">Der Streamingkontext.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Validation.DbUnexpectedValidationException" />-Klasse.</summary>
      <param name="message">Die Ausnahmemeldung.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.String,System.Exception)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.Entity.Validation.DbUnexpectedValidationException" />-Klasse.</summary>
      <param name="message">Die Ausnahmemeldung.</param>
      <param name="innerException">Die innere Ausnahme.</param>
    </member>
    <member name="T:System.Data.Entity.Validation.DbValidationError">
      <summary>Validierungsfehler. Dies kann ein Validierungsfehler auf Entitäts- oder Eigenschaftenebene sein. </summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbValidationError.#ctor(System.String,System.String)">
      <summary>Erstellt eine Instanz von <see cref="T:System.Data.Entity.Validation.DbValidationError" />.</summary>
      <param name="propertyName">Der Name der ungültigen Eigenschaft. Kann NULL sein.</param>
      <param name="errorMessage">Validierungsfehlermeldung. Kann NULL sein.</param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbValidationError.ErrorMessage">
      <summary>Ruft die Validierungsfehlermeldung ab.</summary>
      <returns>Die Validierungsfehlermeldung.</returns>
    </member>
    <member name="P:System.Data.Entity.Validation.DbValidationError.PropertyName">
      <summary>Ruft den Namen der ungültigen Eigenschaft ab. </summary>
      <returns>Der Name der ungültigen Eigenschaft.</returns>
    </member>
  </members>
</doc>