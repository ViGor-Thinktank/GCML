<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Net.Http.Formatting</name>
  </assembly>
  <members>
    <member name="T:System.Net.Http.HttpClientExtensions">
      <summary>Erweiterungsmethoden, die die Ausführung formatierter Anforderungen mithilfe von <see cref="T:System.Net.Http.HttpClient" /> unterstützen.</summary>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsJsonAsync``1(System.Net.Http.HttpClient,System.String,``0)">
      <summary>Sendet eine POST-Anforderung als asynchronen Vorgang mit einem angegebenen Wert, der als JSON serialisiert ist.</summary>
      <returns>Ein Aufgabenobjekt, das den asynchronen Vorgang darstellt.</returns>
      <param name="client">Der Client, der zum Ausführen der Anforderung verwendet wird.</param>
      <param name="requestUri">Der URI, an den die Anforderung gesendet wird.</param>
      <param name="value">Der Wert, der in den Entitätsnachrichtentext der Anforderung geschrieben werden soll.</param>
      <typeparam name="T">Der Typ des zu serialisierenden Objekts.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsJsonAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Threading.CancellationToken)">
      <summary>Sendet eine POST-Anforderung als asynchronen Vorgang mit einem angegebenen Wert, der als JSON serialisiert ist. Enthält ein Abbruchtoken zum Abbrechen der Anforderung.</summary>
      <returns>Ein Aufgabenobjekt, das den asynchronen Vorgang darstellt.</returns>
      <param name="client">Der Client, der zum Ausführen der Anforderung verwendet wird.</param>
      <param name="requestUri">Der URI, an den die Anforderung gesendet wird.</param>
      <param name="value">Der Wert, der in den Entitätsnachrichtentext der Anforderung geschrieben werden soll.</param>
      <param name="cancellationToken">Ein Abbruchtoken, das von anderen Objekten oder Threads für den Empfang einer Benachrichtigung über den Abbruch verwendet werden kann.</param>
      <typeparam name="T">Der Typ des zu serialisierenden Objekts.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsXmlAsync``1(System.Net.Http.HttpClient,System.String,``0)">
      <summary>Sendet eine POST-Anforderung als asynchronen Vorgang mit einem angegebenen Wert, der als XML serialisiert ist.</summary>
      <returns>Ein Aufgabenobjekt, das den asynchronen Vorgang darstellt.</returns>
      <param name="client">Der Client, der zum Ausführen der Anforderung verwendet wird.</param>
      <param name="requestUri">Der URI, an den die Anforderung gesendet wird.</param>
      <param name="value">Der Wert, der in den Entitätsnachrichtentext der Anforderung geschrieben werden soll.</param>
      <typeparam name="T">Der Typ des zu serialisierenden Objekts.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsXmlAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Threading.CancellationToken)">
      <summary>Sendet eine POST-Anforderung als asynchronen Vorgang mit einem angegebenen Wert, der als XML serialisiert ist. Enthält ein Abbruchtoken zum Abbrechen der Anforderung.</summary>
      <returns>Ein Aufgabenobjekt, das den asynchronen Vorgang darstellt.</returns>
      <param name="client">Der Client, der zum Ausführen der Anforderung verwendet wird.</param>
      <param name="requestUri">Der URI, an den die Anforderung gesendet wird.</param>
      <param name="value">Der Wert, der in den Entitätsnachrichtentext der Anforderung geschrieben werden soll.</param>
      <param name="cancellationToken">Ein Abbruchtoken, das von anderen Objekten oder Threads für den Empfang einer Benachrichtigung über den Abbruch verwendet werden kann.</param>
      <typeparam name="T">Der Typ des zu serialisierenden Objekts.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Sendet eine POST-Anforderung als asynchronen Vorgang mit einem angegebenen Wert, der mithilfe des angegebenen Formatierers serialisiert wird.</summary>
      <returns>Ein Aufgabenobjekt, das den asynchronen Vorgang darstellt.</returns>
      <param name="client">Der Client, der zum Ausführen der Anforderung verwendet wird.</param>
      <param name="requestUri">Der URI, an den die Anforderung gesendet wird.</param>
      <param name="value">Der Wert, der in den Entitätsnachrichtentext der Anforderung geschrieben werden soll.</param>
      <param name="formatter">Der Formatierer, der zum Serialisieren des Werts verwendet wird.</param>
      <typeparam name="T">Der Typ des zu serialisierenden Objekts.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,System.Threading.CancellationToken)">
      <summary>Sendet eine POST-Anforderung als asynchronen Vorgang mit einem angegebenen Wert, der mithilfe des angegebenen Formatierers und Medientyps serialisiert wird.</summary>
      <returns>Ein Aufgabenobjekt, das den asynchronen Vorgang darstellt.</returns>
      <param name="client">Der Client, der zum Ausführen der Anforderung verwendet wird.</param>
      <param name="requestUri">Der URI, an den die Anforderung gesendet wird.</param>
      <param name="value">Der Wert, der in den Entitätsnachrichtentext der Anforderung geschrieben werden soll.</param>
      <param name="formatter">Der Formatierer, der zum Serialisieren des Werts verwendet wird.</param>
      <param name="mediaType">Der autorisierende Wert des Content-Type-Headers. Dieser Wert kann null sein. In diesem Fall wird der Standardinhaltstyp des Formatierers verwendet.</param>
      <param name="cancellationToken">Ein Abbruchtoken, das von anderen Objekten oder Threads für den Empfang einer Benachrichtigung über den Abbruch verwendet werden kann.</param>
      <typeparam name="T">Der Typ des zu serialisierenden Objekts.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
      <summary>Sendet eine POST-Anforderung als asynchronen Vorgang mit einem angegebenen Wert, der mithilfe des angegebenen Formatierers und der Medientypzeichenfolge serialisiert wird.</summary>
      <returns>Ein Aufgabenobjekt, das den asynchronen Vorgang darstellt.</returns>
      <param name="client">Der Client, der zum Ausführen der Anforderung verwendet wird.</param>
      <param name="requestUri">Der URI, an den die Anforderung gesendet wird.</param>
      <param name="value">Der Wert, der in den Entitätsnachrichtentext der Anforderung geschrieben werden soll.</param>
      <param name="formatter">Der Formatierer, der zum Serialisieren des Werts verwendet wird.</param>
      <param name="mediaType">Der autorisierende Wert des Content-Type-Headers. Dieser Wert kann null sein. In diesem Fall wird der Standardinhaltstyp des Formatierers verwendet.</param>
      <typeparam name="T">Der Typ des zu serialisierenden Objekts.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.Threading.CancellationToken)">
      <summary>Sendet eine POST-Anforderung als asynchronen Vorgang mit einem angegebenen Wert, der mithilfe des angegebenen Formatierers und der Medientypzeichenfolge serialisiert wird. Enthält ein Abbruchtoken zum Abbrechen der Anforderung.</summary>
      <returns>Ein Aufgabenobjekt, das den asynchronen Vorgang darstellt.</returns>
      <param name="client">Der Client, der zum Ausführen der Anforderung verwendet wird.</param>
      <param name="requestUri">Der URI, an den die Anforderung gesendet wird.</param>
      <param name="value">Der Wert, der in den Entitätsnachrichtentext der Anforderung geschrieben werden soll.</param>
      <param name="formatter">Der Formatierer, der zum Serialisieren des Werts verwendet wird.</param>
      <param name="mediaType">Der autorisierende Wert des Content-Type-Headers. Dieser Wert kann null sein. In diesem Fall wird der Standardinhaltstyp des Formatierers verwendet.</param>
      <param name="cancellationToken">Ein Abbruchtoken, das von anderen Objekten oder Threads für den Empfang einer Benachrichtigung über den Abbruch verwendet werden kann.</param>
      <typeparam name="T">Der Typ des zu serialisierenden Objekts.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Threading.CancellationToken)">
      <summary>Sendet eine POST-Anforderung als asynchronen Vorgang mit einem angegebenen Wert, der mithilfe des angegebenen Formatierers serialisiert wird. Enthält ein Abbruchtoken zum Abbrechen der Anforderung.</summary>
      <returns>Ein Aufgabenobjekt, das den asynchronen Vorgang darstellt.</returns>
      <param name="client">Der Client, der zum Ausführen der Anforderung verwendet wird.</param>
      <param name="requestUri">Der URI, an den die Anforderung gesendet wird.</param>
      <param name="value">Der Wert, der in den Entitätsnachrichtentext der Anforderung geschrieben werden soll.</param>
      <param name="formatter">Der Formatierer, der zum Serialisieren des Werts verwendet wird.</param>
      <param name="cancellationToken">Ein Abbruchtoken, das von anderen Objekten oder Threads für den Empfang einer Benachrichtigung über den Abbruch verwendet werden kann.</param>
      <typeparam name="T">Der Typ des zu serialisierenden Objekts.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsJsonAsync``1(System.Net.Http.HttpClient,System.String,``0)">
      <summary>Sendet eine PUT-Anforderung als asynchronen Vorgang mit einem angegebenen Wert, der als JSON serialisiert ist.</summary>
      <returns>Ein Aufgabenobjekt, das den asynchronen Vorgang darstellt.</returns>
      <param name="client">Der Client, der zum Ausführen der Anforderung verwendet wird.</param>
      <param name="requestUri">Der URI, an den die Anforderung gesendet wird.</param>
      <param name="value">Der Wert, der in den Entitätsnachrichtentext der Anforderung geschrieben werden soll.</param>
      <typeparam name="T">Der Typ des zu serialisierenden Objekts.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsJsonAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Threading.CancellationToken)">
      <summary>Sendet eine PUT-Anforderung als asynchronen Vorgang mit einem angegebenen Wert, der als JSON serialisiert ist. Enthält ein Abbruchtoken zum Abbrechen der Anforderung.</summary>
      <returns>Ein Aufgabenobjekt, das den asynchronen Vorgang darstellt.</returns>
      <param name="client">Der Client, der zum Ausführen der Anforderung verwendet wird.</param>
      <param name="requestUri">Der URI, an den die Anforderung gesendet wird.</param>
      <param name="value">Der Wert, der in den Entitätsnachrichtentext der Anforderung geschrieben werden soll.</param>
      <param name="cancellationToken">Ein Abbruchtoken, das von anderen Objekten oder Threads für den Empfang einer Benachrichtigung über den Abbruch verwendet werden kann. </param>
      <typeparam name="T">Der Typ des zu serialisierenden Objekts.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsXmlAsync``1(System.Net.Http.HttpClient,System.String,``0)">
      <summary>Sendet eine PUT-Anforderung als asynchronen Vorgang mit einem angegebenen Wert, der als XML serialisiert ist.</summary>
      <returns>Ein Aufgabenobjekt, das den asynchronen Vorgang darstellt.</returns>
      <param name="client">Der Client, der zum Ausführen der Anforderung verwendet wird.</param>
      <param name="requestUri">Der URI, an den die Anforderung gesendet wird.</param>
      <param name="value">Der Wert, der in den Entitätsnachrichtentext der Anforderung geschrieben werden soll.</param>
      <typeparam name="T">Der Typ des zu serialisierenden Objekts.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsXmlAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Threading.CancellationToken)">
      <summary>Sendet eine PUT-Anforderung als asynchronen Vorgang mit einem angegebenen Wert, der als XML serialisiert ist. Enthält ein Abbruchtoken zum Abbrechen der Anforderung.</summary>
      <returns>Ein Aufgabenobjekt, das den asynchronen Vorgang darstellt.</returns>
      <param name="client">Der Client, der zum Ausführen der Anforderung verwendet wird.</param>
      <param name="requestUri">Der URI, an den die Anforderung gesendet wird.</param>
      <param name="value">Der Wert, der in den Entitätsnachrichtentext der Anforderung geschrieben werden soll.</param>
      <param name="cancellationToken">Ein Abbruchtoken, das von anderen Objekten oder Threads für den Empfang einer Benachrichtigung über den Abbruch verwendet werden kann.</param>
      <typeparam name="T">Der Typ des zu serialisierenden Objekts.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Sendet eine PUT-Anforderung als asynchronen Vorgang mit einem angegebenen Wert, der mithilfe des angegebenen Formatierers serialisiert wird.</summary>
      <returns>Ein Aufgabenobjekt, das den asynchronen Vorgang darstellt.</returns>
      <param name="client">Der Client, der zum Ausführen der Anforderung verwendet wird.</param>
      <param name="requestUri">Der URI, an den die Anforderung gesendet wird.</param>
      <param name="value">Der Wert, der in den Entitätsnachrichtentext der Anforderung geschrieben werden soll.</param>
      <param name="formatter">Der Formatierer, der zum Serialisieren des Werts verwendet wird.</param>
      <typeparam name="T">Der Typ des zu serialisierenden Objekts.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,System.Threading.CancellationToken)">
      <summary> Sendet eine PUT-Anforderung als asynchronen Vorgang mit einem angegebenen Wert, der mithilfe des angegebenen Formatierers und Medientyps serialisiert wird. Enthält ein Abbruchtoken zum Abbrechen der Anforderung.</summary>
      <returns>Ein Aufgabenobjekt, das den asynchronen Vorgang darstellt.</returns>
      <param name="client">Der Client, der zum Ausführen der Anforderung verwendet wird.</param>
      <param name="requestUri">Der URI, an den die Anforderung gesendet wird.</param>
      <param name="value">Der Wert, der in den Entitätsnachrichtentext der Anforderung geschrieben werden soll.</param>
      <param name="formatter">Der Formatierer, der zum Serialisieren des Werts verwendet wird.</param>
      <param name="mediaType">Der autorisierende Wert des Content-Type-Headers. Dieser Wert kann null sein. In diesem Fall wird der Standardinhaltstyp des Formatierers verwendet.</param>
      <param name="cancellationToken">Ein Abbruchtoken, das von anderen Objekten oder Threads für den Empfang einer Benachrichtigung über den Abbruch verwendet werden kann.</param>
      <typeparam name="T">Der Typ des zu serialisierenden Objekts.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
      <summary>Sendet eine PUT-Anforderung als asynchronen Vorgang mit einem angegebenen Wert, der mithilfe des angegebenen Formatierers und der Medientypzeichenfolge serialisiert wird.</summary>
      <returns>Ein Aufgabenobjekt, das den asynchronen Vorgang darstellt.</returns>
      <param name="client">Der Client, der zum Ausführen der Anforderung verwendet wird.</param>
      <param name="requestUri">Der URI, an den die Anforderung gesendet wird.</param>
      <param name="value">Der Wert, der in den Entitätsnachrichtentext der Anforderung geschrieben werden soll.</param>
      <param name="formatter">Der Formatierer, der zum Serialisieren des Werts verwendet wird.</param>
      <param name="mediaType">Der autorisierende Wert des Content-Type-Headers. Dieser Wert kann null sein. In diesem Fall wird der Standardinhaltstyp des Formatierers verwendet.</param>
      <typeparam name="T">Der Typ des zu serialisierenden Objekts.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.Threading.CancellationToken)">
      <summary>Sendet eine PUT-Anforderung als asynchronen Vorgang mit einem angegebenen Wert, der mithilfe des angegebenen Formatierers und der Medientypzeichenfolge serialisiert wird. Enthält ein Abbruchtoken zum Abbrechen der Anforderung.</summary>
      <returns>Ein Aufgabenobjekt, das den asynchronen Vorgang darstellt.</returns>
      <param name="client">Der Client, der zum Ausführen der Anforderung verwendet wird.</param>
      <param name="requestUri">Der URI, an den die Anforderung gesendet wird.</param>
      <param name="value">Der Wert, der in den Entitätsnachrichtentext der Anforderung geschrieben werden soll.</param>
      <param name="formatter">Der Formatierer, der zum Serialisieren des Werts verwendet wird.</param>
      <param name="mediaType">Der autorisierende Wert des Content-Type-Headers. Dieser Wert kann null sein. In diesem Fall wird der Standardinhaltstyp des Formatierers verwendet.</param>
      <param name="cancellationToken">Ein Abbruchtoken, das von anderen Objekten oder Threads für den Empfang einer Benachrichtigung über den Abbruch verwendet werden kann.</param>
      <typeparam name="T">Der Typ des zu serialisierenden Objekts.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Threading.CancellationToken)">
      <summary>Sendet eine PUT-Anforderung als asynchronen Vorgang mit einem angegebenen Wert, der mithilfe des angegebenen Formatierers und der Medientypzeichenfolge serialisiert wird. Enthält ein Abbruchtoken zum Abbrechen der Anforderung.</summary>
      <returns>Ein Aufgabenobjekt, das den asynchronen Vorgang darstellt.</returns>
      <param name="client">Der Client, der zum Ausführen der Anforderung verwendet wird.</param>
      <param name="requestUri">Der URI, an den die Anforderung gesendet wird.</param>
      <param name="value">Der Wert, der in den Entitätsnachrichtentext der Anforderung geschrieben werden soll.</param>
      <param name="formatter">Der Formatierer, der zum Serialisieren des Werts verwendet wird.</param>
      <param name="cancellationToken">Ein Abbruchtoken, das von anderen Objekten oder Threads für den Empfang einer Benachrichtigung über den Abbruch verwendet werden kann.</param>
      <typeparam name="T">Der Typ des zu serialisierenden Objekts.</typeparam>
    </member>
    <member name="T:System.Net.Http.HttpClientFactory">
      <summary>Stellt eine Factory zum Erstellen einer neuen Instanz von <see cref="T:System.Net.Http.HttpClient" /> dar.</summary>
    </member>
    <member name="M:System.Net.Http.HttpClientFactory.Create(System.Net.Http.DelegatingHandler[])">
      <summary>Erstellt eine neue Instanz des <see cref="T:System.Net.Http.HttpClient" />-Objekts.</summary>
      <returns>Eine neue Instanz des <see cref="T:System.Net.Http.HttpClient" />-Objekts.</returns>
      <param name="handlers">Die Liste der HTTP-Handler, die die Verarbeitung von HTTP-Antwortnachrichten an einen anderen Handler delegiert.</param>
    </member>
    <member name="M:System.Net.Http.HttpClientFactory.Create(System.Net.Http.HttpMessageHandler,System.Net.Http.DelegatingHandler[])">
      <summary>Erstellt eine neue Instanz des <see cref="T:System.Net.Http.HttpClient" />-Objekts.</summary>
      <returns>Eine neue Instanz des <see cref="T:System.Net.Http.HttpClient" />-Objekts.</returns>
      <param name="innerHandler">Der interne Handler, der für die Verarbeitung der HTTP-Antwortnachrichten verantwortlich ist.</param>
      <param name="handlers">Die Liste der HTTP-Handler, die die Verarbeitung von HTTP-Antwortnachrichten an einen anderen Handler delegiert.</param>
    </member>
    <member name="M:System.Net.Http.HttpClientFactory.CreatePipeline(System.Net.Http.HttpMessageHandler,System.Collections.Generic.IEnumerable{System.Net.Http.DelegatingHandler})">
      <summary>Erstellt eine neue Instanz des <see cref="T:System.Net.Http.HttpClient" />-Objekts, für die eine Pipeline verwendet werden sollte.</summary>
      <returns>Eine neue Instanz des <see cref="T:System.Net.Http.HttpClient" />-Objekts, für die eine Pipeline verwendet werden sollte.</returns>
      <param name="innerHandler">Der interne Handler, der für die Verarbeitung der HTTP-Antwortnachrichten verantwortlich ist.</param>
      <param name="handlers">Die Liste der HTTP-Handler, die die Verarbeitung von HTTP-Antwortnachrichten an einen anderen Handler delegiert.</param>
    </member>
    <member name="T:System.Net.Http.HttpContentExtensions">
      <summary>Gibt Erweiterungsmethoden an, die es ermöglichen, dass stark typisierte Objekte aus HttpContent-Instanzen gelesen werden können.</summary>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync``1(System.Net.Http.HttpContent)">
      <summary> Gibt einen Task zurück, der ein Objekt des angegebenen Typs &lt;typeparamref name="T" /&gt; aus der content-Instanz generiert. </summary>
      <returns>Eine Objektinstanz des angegebenen Typs.</returns>
      <param name="content">Die HttpContent-Instanz, aus der gelesen werden soll.</param>
      <typeparam name="T">Der Typ des zu lesenden Objekts.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync``1(System.Net.Http.HttpContent,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary> Gibt einen Task zurück, der ein Objekt des angegebenen Typs &lt;typeparamref name="T" /&gt; aus der content-Instanz generiert. </summary>
      <returns>Eine Objektinstanz des angegebenen Typs.</returns>
      <param name="content">Die HttpContent-Instanz, aus der gelesen werden soll.</param>
      <param name="formatters">Die Auflistung der zu verwendenden MediaTypeFormatter-Instanzen.</param>
      <typeparam name="T">Der Typ des zu lesenden Objekts.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync``1(System.Net.Http.HttpContent,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Net.Http.Formatting.IFormatterLogger)">
      <summary> Gibt einen Task zurück, der ein Objekt des angegebenen Typs &lt;typeparamref name="T" /&gt; aus der content-Instanz generiert. </summary>
      <returns>Eine Objektinstanz des angegebenen Typs.</returns>
      <param name="content">Die HttpContent-Instanz, aus der gelesen werden soll.</param>
      <param name="formatters">Die Auflistung der zu verwendenden MediaTypeFormatter-Instanzen.</param>
      <param name="formatterLogger">Das IFormatterLogger-Objekt, in das Ereignisse protokolliert werden sollen.</param>
      <typeparam name="T">Der Typ des zu lesenden Objekts.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync(System.Net.Http.HttpContent,System.Type)">
      <summary> Gibt einen Task zurück, der ein Objekt des angegebenen Typs aus der content-Instanz generiert. </summary>
      <returns>Ein Task, der eine Objektinstanz des angegebenen Typs ergibt.</returns>
      <param name="content">Die HttpContent-Instanz, aus der gelesen werden soll.</param>
      <param name="type">Der Typ des zu lesenden Objekts.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync(System.Net.Http.HttpContent,System.Type,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary> Gibt einen Task zurück, der mithilfe der bereitgestellten Formatierer ein Objekt des angegebenen Typs aus der content-Instanz generiert, um den Inhalt zu deserialisieren. </summary>
      <returns>Eine Objektinstanz des angegebenen Typs.</returns>
      <param name="content">Die HttpContent-Instanz, aus der gelesen werden soll.</param>
      <param name="type">Der Typ des zu lesenden Objekts.</param>
      <param name="formatters">Die Auflistung der zu verwendenden MediaTypeFormatter-Instanzen.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync(System.Net.Http.HttpContent,System.Type,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Net.Http.Formatting.IFormatterLogger)">
      <summary> Gibt einen Task zurück, der mithilfe der bereitgestellten Formatierer ein Objekt des angegebenen Typs aus der content-Instanz generiert, um den Inhalt zu deserialisieren. </summary>
      <returns>Eine Objektinstanz des angegebenen Typs.</returns>
      <param name="content">Die HttpContent-Instanz, aus der gelesen werden soll.</param>
      <param name="type">Der Typ des zu lesenden Objekts.</param>
      <param name="formatters">Die Auflistung der zu verwendenden MediaTypeFormatter-Instanzen.</param>
      <param name="formatterLogger">Das IFormatterLogger-Objekt, in das Ereignisse protokolliert werden sollen.</param>
    </member>
    <member name="T:System.Net.Http.HttpContentFormDataExtensions">
      <summary>Erweiterungsmethoden zum Lesen von URL-codierten HTML-Formulardaten aus <see cref="T:System.Net.Http.HttpContent" />-Instanzen.</summary>
    </member>
    <member name="M:System.Net.Http.HttpContentFormDataExtensions.IsFormData(System.Net.Http.HttpContent)">
      <summary>Ermittelt, ob es sich bei dem angegebenen Inhalt um URL-codierte HTML-Formulardaten handelt.</summary>
      <returns>true, wenn es sich bei dem angegebenen Inhalt um URL-codierte HTML-Formulardaten handelt, andernfalls false.</returns>
      <param name="content">Der Inhalt.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentFormDataExtensions.ReadAsFormDataAsync(System.Net.Http.HttpContent)">
      <summary>Liest asynchron URL-codierte HTML-Formulardaten aus einer <see cref="T:System.Net.Http.HttpContent" />-Instanz und speichert die Ergebnisse in einem <see cref="T:System.Collections.Specialized.NameValueCollection" />-Objekt.</summary>
      <returns>Ein Aufgabenobjekt, das den asynchronen Vorgang darstellt.</returns>
      <param name="content">Der Inhalt.</param>
    </member>
    <member name="T:System.Net.Http.HttpContentMessageExtensions">
      <summary>Stellt Erweiterungsmethoden zum Lesen von <see cref="T:System.Net.Http.HttpRequestMessage" />- und <see cref="T:System.Net.Http.HttpResponseMessage" />-Entitäten aus <see cref="T:System.Net.Http.HttpContent" />-Instanzen bereit. </summary>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.IsHttpRequestMessageContent(System.Net.Http.HttpContent)">
      <summary>Bestimmt, ob der angegebene Inhalt HTTP-Anforderungsnachrichteninhalt ist.</summary>
      <returns>True, wenn der angegebene Inhalt HTTP-Nachrichteninhalt ist, andernfalls False.</returns>
      <param name="content">Der zu prüfende Inhalt.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.IsHttpResponseMessageContent(System.Net.Http.HttpContent)">
      <summary>Bestimmt, ob der angegebene Inhalt HTTP-Antwortnachrichteninhalt ist.</summary>
      <returns>True, wenn der angegebene Inhalt HTTP-Nachrichteninhalt ist, andernfalls False.</returns>
      <param name="content">Der zu prüfende Inhalt.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent)">
      <summary> Liest den <see cref="T:System.Net.Http.HttpContent" /> als eine <see cref="T:System.Net.Http.HttpRequestMessage" />. </summary>
      <returns>Die analysierte <see cref="T:System.Net.Http.HttpRequestMessage" />-Instanz.</returns>
      <param name="content">Der zu lesende Inhalt.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent,System.String)">
      <summary> Liest den <see cref="T:System.Net.Http.HttpContent" /> als eine <see cref="T:System.Net.Http.HttpRequestMessage" />. </summary>
      <returns>Die analysierte <see cref="T:System.Net.Http.HttpRequestMessage" />-Instanz.</returns>
      <param name="content">Der zu lesende Inhalt.</param>
      <param name="uriScheme">Das URI-Schema, das für den Anforderungs-URI verwendet werden soll.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent,System.String,System.Int32)">
      <summary> Liest den <see cref="T:System.Net.Http.HttpContent" /> als eine <see cref="T:System.Net.Http.HttpRequestMessage" />. </summary>
      <returns>Die analysierte <see cref="T:System.Net.Http.HttpRequestMessage" />-Instanz.</returns>
      <param name="content">Der zu lesende Inhalt.</param>
      <param name="uriScheme">Das URI-Schema, das für den Anforderungs-URI verwendet werden soll.</param>
      <param name="bufferSize">Die Größe des Puffers.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent,System.String,System.Int32,System.Int32)">
      <summary>Liest den <see cref="T:System.Net.Http.HttpContent" /> als eine <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
      <returns>Die analysierte <see cref="T:System.Net.Http.HttpRequestMessage" />-Instanz.</returns>
      <param name="content">Der zu lesende Inhalt.</param>
      <param name="uriScheme">Das URI-Schema, das für den Anforderungs-URI verwendet werden soll.</param>
      <param name="bufferSize">Die Größe des Puffers.</param>
      <param name="maxHeaderSize">Die maximale Länge des HTTP-Headers.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpResponseMessageAsync(System.Net.Http.HttpContent)">
      <summary> Liest den <see cref="T:System.Net.Http.HttpContent" /> als eine <see cref="T:System.Net.Http.HttpResponseMessage" />. </summary>
      <returns>Die analysierte <see cref="T:System.Net.Http.HttpResponseMessage" />-Instanz.</returns>
      <param name="content">Der zu lesende Inhalt.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpResponseMessageAsync(System.Net.Http.HttpContent,System.Int32)">
      <summary>Liest den <see cref="T:System.Net.Http.HttpContent" /> als eine <see cref="T:System.Net.Http.HttpResponseMessage" />. </summary>
      <returns>Die analysierte <see cref="T:System.Net.Http.HttpResponseMessage" />-Instanz.</returns>
      <param name="content">Der zu lesende Inhalt.</param>
      <param name="bufferSize">Die Größe des Puffers.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpResponseMessageAsync(System.Net.Http.HttpContent,System.Int32,System.Int32)">
      <summary>Liest den <see cref="T:System.Net.Http.HttpContent" /> als eine <see cref="T:System.Net.Http.HttpResponseMessage" />.</summary>
      <returns>Die analysierte <see cref="T:System.Net.Http.HttpResponseMessage" />-Instanz.</returns>
      <param name="content">Der zu lesende Inhalt.</param>
      <param name="bufferSize">Die Größe des Puffers.</param>
      <param name="maxHeaderSize">Die maximale Länge des HTTP-Headers.</param>
    </member>
    <member name="T:System.Net.Http.HttpContentMultipartExtensions">
      <summary>Erweiterungsmethoden zum Lesen von mehrteiligen MIME-Entitäten aus <see cref="T:System.Net.Http.HttpContent" />-Instanzen.</summary>
    </member>
    <member name="M:System.Net.Http.HttpContentMultipartExtensions.IsMimeMultipartContent(System.Net.Http.HttpContent)">
      <summary>Bestimmt, ob der angegebene Inhalt mehrteiliger MIME-Inhalt ist.</summary>
      <returns>True, wenn der angegebene Inhalt mehrteiliger MIME-Inhalt ist, andernfalls False.</returns>
      <param name="content">Der Inhalt.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMultipartExtensions.IsMimeMultipartContent(System.Net.Http.HttpContent,System.String)">
      <summary>Bestimmt, ob der angegebene Inhalt mehrteiliger MIME-Inhalt mit dem angegebenen Untertyp ist.</summary>
      <returns>True, wenn der angegebene Inhalt mehrteiliger MIME-Inhalt mit dem angegebenen Untertyp ist, andernfalls False.</returns>
      <param name="content">Der Inhalt.</param>
      <param name="subtype">Der abzugleichend mehrteilige MIME-Untertyp.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMultipartExtensions.ReadAsMultipartAsync(System.Net.Http.HttpContent)">
      <summary>Liest alle Textteile in einer mehrteiligen MIME-Nachricht und generiert als Ergebnis eine Sammlung von <see cref="T:System.Net.Http.HttpContent" />-Instanzen.</summary>
      <returns>Ein &lt;siehe cref="T:System.Threading.Tasks.Task`1" /&gt; stellt die Aufgaben des Abrufens der Auflistung der <see cref="T:System.Net.Http.HttpContent" />-Instanzen dar, wobei jede Instanz einen Textteil darstellt.</returns>
      <param name="content">Eine vorhandene <see cref="T:System.Net.Http.HttpContent" />-Instanz, die für den Inhalt des Objekts verwendet wird.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMultipartExtensions.ReadAsMultipartAsync``1(System.Net.Http.HttpContent,``0)">
      <summary>Liest alle Textteile in einer mehrteiligen MIME-Nachricht und generiert als Ergebnis mithilfe der streamProvider-Instanz eine Sammlung von <see cref="T:System.Net.Http.HttpContent" />-Instanzen, um zu ermitteln, wo der Inhalt jedes Textteils geschrieben wird.</summary>
      <returns>Ein <see cref="T:System.Threading.Tasks.Task`1" /> stellt die Aufgaben des Abrufens der Auflistung der <see cref="T:System.Net.Http.HttpContent" />-Instanzen dar, wobei jede Instanz einen Textteil darstellt.</returns>
      <param name="content">Eine vorhandene <see cref="T:System.Net.Http.HttpContent" />-Instanz, die für den Inhalt des Objekts verwendet wird.</param>
      <param name="streamProvider">Ein Anbieter von Datenströmen, der Ausgabedatenströme für das Schreiben von Textteilen bereitstellt, während diese analysiert werden.</param>
      <typeparam name="T">Der Typ der mehrteiligen MIME-Nachricht.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpContentMultipartExtensions.ReadAsMultipartAsync``1(System.Net.Http.HttpContent,``0,System.Int32)">
      <summary>Liest alle Textteile in einer mehrteiligen MIME-Nachricht und generiert als Ergebnis mithilfe der streamProvider-Instanz eine Sammlung von <see cref="T:System.Net.Http.HttpContent" />-Instanzen, um zu ermitteln, wo der Inhalt jedes Textteils geschrieben wird, sowie bufferSize als Lesepuffergröße.</summary>
      <returns>Ein <see cref="T:System.Threading.Tasks.Task`1" /> stellt die Aufgaben des Abrufens der Auflistung der <see cref="T:System.Net.Http.HttpContent" />-Instanzen dar, wobei jede Instanz einen Textteil darstellt.</returns>
      <param name="content">Eine vorhandene <see cref="T:System.Net.Http.HttpContent" />-Instanz, die für den Inhalt des Objekts verwendet wird.</param>
      <param name="streamProvider">Ein Anbieter von Datenströmen, der Ausgabedatenströme für das Schreiben von Textteilen bereitstellt, während diese analysiert werden.</param>
      <param name="bufferSize">Die Größe des Puffers, der zum Lesen des Inhalts verwendet wird.</param>
      <typeparam name="T">Der Typ der mehrteiligen MIME-Nachricht.</typeparam>
    </member>
    <member name="T:System.Net.Http.HttpMessageContent">
      <summary> Abgeleitete <see cref="T:System.Net.Http.HttpContent" />-Klasse, eine <see cref="P:System.Net.Http.HttpMessageContent.HttpResponseMessage" /> oder <see cref="P:System.Net.Http.HttpMessageContent.HttpRequestMessage" /> als Entität mit dem Medientyp "application/http" kapseln kann. </summary>
    </member>
    <member name="M:System.Net.Http.HttpMessageContent.#ctor(System.Net.Http.HttpRequestMessage)">
      <summary> Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.HttpMessageContent" />-Klasse, die eine <see cref="P:System.Net.Http.HttpMessageContent.HttpRequestMessage" /> kapselt. </summary>
      <param name="httpRequest">Die zu kapselnde <see cref="P:System.Net.Http.HttpMessageContent.HttpResponseMessage" />-Instanz.</param>
    </member>
    <member name="M:System.Net.Http.HttpMessageContent.#ctor(System.Net.Http.HttpResponseMessage)">
      <summary> Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.HttpMessageContent" />-Klasse, die eine <see cref="P:System.Net.Http.HttpMessageContent.HttpResponseMessage" /> kapselt. </summary>
      <param name="httpResponse">Die zu kapselnde <see cref="P:System.Net.Http.HttpMessageContent.HttpResponseMessage" />-Instanz.</param>
    </member>
    <member name="M:System.Net.Http.HttpMessageContent.Dispose(System.Boolean)">
      <summary> Gibt nicht verwaltete und optional verwaltete Ressourcen frei. </summary>
      <param name="disposing">True, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben. False, um ausschließlich nicht verwaltete Ressourcen freizugeben.</param>
    </member>
    <member name="P:System.Net.Http.HttpMessageContent.HttpRequestMessage">
      <summary> Ruft die HTTP-Anforderungsnachricht ab. </summary>
    </member>
    <member name="P:System.Net.Http.HttpMessageContent.HttpResponseMessage">
      <summary> Ruft die HTTP-Antwortnachricht ab. </summary>
    </member>
    <member name="M:System.Net.Http.HttpMessageContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
      <summary> Serialisiert den Inhalt des Objekts asynchron mit dem angegebenen stream. </summary>
      <returns>Eine <see cref="T:System.Threading.Tasks.Task" />-Instanz, die den Inhalt des Objekts asynchron serialisiert.</returns>
      <param name="stream">Der <see cref="T:System.IO.Stream" />, in den geschrieben werden soll.</param>
      <param name="context">Der zugeordnete <see cref="T:System.Net.TransportContext" />.</param>
    </member>
    <member name="M:System.Net.Http.HttpMessageContent.TryComputeLength(System.Int64@)">
      <summary> Berechnet die Länge des Datenstroms, falls möglich. </summary>
      <returns>True, wenn die Länge berechnet wurde, andernfalls False.</returns>
      <param name="length">Die berechnete Länge des Datenstroms.</param>
    </member>
    <member name="T:System.Net.Http.HttpRequestHeadersExtensions">
      <summary>Stellt Erweiterungsmethoden für die <see cref="T:System.Net.Http.Headers.HttpRequestHeaders" />-Klasse bereit.</summary>
    </member>
    <member name="M:System.Net.Http.HttpRequestHeadersExtensions.GetCookies(System.Net.Http.Headers.HttpRequestHeaders)">
      <summary>Ruft alle Cookieheader ab, die in der Anforderung vorhanden sind.</summary>
      <returns>Eine Auflistung von <see cref="T:System.Net.Http.Headers.CookieHeaderValue" />-Instanzen.</returns>
      <param name="headers">Die Anforderungsheader.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestHeadersExtensions.GetCookies(System.Net.Http.Headers.HttpRequestHeaders,System.String)">
      <summary>Ruft alle Cookieheader ab, die in der Anforderung vorhanden sind, die einen Cookiestatus enthalten, dessen Name mit dem angegebenen Wert übereinstimmt.</summary>
      <returns>Eine Auflistung von <see cref="T:System.Net.Http.Headers.CookieHeaderValue" />-Instanzen.</returns>
      <param name="headers">Die Anforderungsheader.</param>
      <param name="name">Der Cookiestatusname, mit dem eine Übereinstimmung vorliegen soll.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse(System.Net.Http.HttpRequestMessage)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode)"></member>
    <member name="T:System.Net.Http.HttpResponseHeadersExtensions">
      <summary> Stellt Erweiterungsmethoden für die <see cref="T:System.Net.Http.Headers.HttpResponseHeaders" />-Klasse bereit. </summary>
    </member>
    <member name="M:System.Net.Http.HttpResponseHeadersExtensions.AddCookies(System.Net.Http.Headers.HttpResponseHeaders,System.Collections.Generic.IEnumerable{System.Net.Http.Headers.CookieHeaderValue})">
      <summary> Fügt einer Antwort Cookies hinzu. Jeder Set-Cookie-Header wird als eine <see cref="T:System.Net.Http.Headers.CookieHeaderValue" />-Instanz dargestellt. Ein <see cref="T:System.Net.Http.Headers.CookieHeaderValue" /> enthält Informationen zur Domäne, dem Pfad und anderen Cookieinformationen sowie mindestens eine <see cref="T:System.Net.Http.Headers.CookieState" />-Instanz. Jede <see cref="T:System.Net.Http.Headers.CookieState" />-Instanz enthält einen Cookienamen und den jeweiligen Cookiestatus, der diesem Namen zugeordnet ist. Der Status besitzt die Form einer <see cref="T:System.Collections.Specialized.NameValueCollection" />, die im Netzwerk als URL-codierte HTML-Formulardaten codiert werden.  Diese Darstellung ermöglicht, dass mehrere verwandte "Cookies" im gleichen Cookie-Header übertragen werden können, während die Trennung der einzelnen Cookiestatus gewahrt bleibt. Im Folgenden wird ein Beispiel für einen Cookie-Header bereitgestellt. In diesem Beispiel sind zwei <see cref="T:System.Net.Http.Headers.CookieState" /> mit den Namen "state1" bzw. "state2" vorhanden. Außerdem enthält jeder Cookiestatus zwei Name-Wert-Paare (name1/value1 und name2/value2 und name3/value3 und name4/value4). &lt;code&gt; Set-Cookie: state1:name1=value1&amp;amp;name2=value2; state2:name3=value3&amp;amp;name4=value4; domain=domain1; path=path1; &lt;/code&gt;</summary>
      <param name="headers">Die Antwortheader</param>
      <param name="cookies">Die Cookiewerte, die der Antwort hinzugefügt werden sollen.</param>
    </member>
    <member name="T:System.Net.Http.MultipartFileData">
      <summary>Stellt Daten einer mehrteiligen Datei dar.</summary>
    </member>
    <member name="M:System.Net.Http.MultipartFileData.#ctor(System.Net.Http.Headers.HttpContentHeaders,System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.MultipartFileData" />-Klasse.</summary>
      <param name="headers">Die Header der Daten einer mehrteiligen Datei.</param>
      <param name="localFileName">Der Name der lokalen Datei für die Daten einer mehrteiligen Datei.</param>
    </member>
    <member name="P:System.Net.Http.MultipartFileData.Headers">
      <summary>Ruft die Header der Daten einer mehrteiligen Datei ab oder legt diese fest.</summary>
      <returns>Die Header der Daten einer mehrteiligen Datei.</returns>
    </member>
    <member name="P:System.Net.Http.MultipartFileData.LocalFileName">
      <summary>Ruft den Namen der lokalen Datei für die Daten einer mehrteiligen Datei ab oder legt diesen fest.</summary>
      <returns>Der Name der lokalen Datei für die Daten einer mehrteiligen Datei.</returns>
    </member>
    <member name="T:System.Net.Http.MultipartFileStreamProvider">
      <summary>Stellt einen <see cref="T:System.Net.Http.IMultipartStreamProvider" /> dar, der dafür geeignet ist, alle MIME-Textteile der mehrteiligen MIME-Nachricht mithilfe eines <see cref="T:System.IO.FileStream" /> in eine Datei zu schreiben.</summary>
    </member>
    <member name="M:System.Net.Http.MultipartFileStreamProvider.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.MultipartFileStreamProvider" />-Klasse.</summary>
      <param name="rootPath">Der Stammpfad, in den der Inhalt von mehrteiligen MIME-Textteilen geschrieben wird.</param>
    </member>
    <member name="M:System.Net.Http.MultipartFileStreamProvider.#ctor(System.String,System.Int32)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.MultipartFileStreamProvider" />-Klasse.</summary>
      <param name="rootPath">Der Stammpfad, in den der Inhalt von mehrteiligen MIME-Textteilen geschrieben wird.</param>
      <param name="bufferSize">Die Anzahl der für das Schreiben in die Datei gepufferten Bytes.</param>
    </member>
    <member name="P:System.Net.Http.MultipartFileStreamProvider.BufferSize">
      <summary>Ruft die Anzahl der für das Schreiben in die Datei gepufferten Bytes ab oder legt diese fest.</summary>
      <returns>Die Anzahl der für das Schreiben in die Datei gepufferten Bytes.</returns>
    </member>
    <member name="P:System.Net.Http.MultipartFileStreamProvider.FileData">
      <summary>Ruft die Daten der mehrteiligen Datei ab bzw. legt diese fest.</summary>
      <returns>Die Daten einer mehrteiligen Datei.</returns>
    </member>
    <member name="M:System.Net.Http.MultipartFileStreamProvider.GetLocalFileName(System.Net.Http.Headers.HttpContentHeaders)">
      <summary>Ruft den Namen der lokalen Datei ab, die mit dem Stammpfad kombiniert wird, um einen absoluten Namen einer Datei zu bilden, in der der Inhalt des aktuellen MIME-Textteils gespeichert wird.</summary>
      <returns>Ein relativer Dateiname ohne Pfadkomponente.</returns>
      <param name="headers">Die Header für den aktuellen MIME-Textteil.</param>
    </member>
    <member name="M:System.Net.Http.MultipartFileStreamProvider.GetStream(System.Net.Http.HttpContent,System.Net.Http.Headers.HttpContentHeaders)">
      <summary>Ruft die Datenstrominstanz ab, in die der Nachrichtentextteil geschrieben wird.</summary>
      <returns>Die <see cref="T:System.IO.Stream" />-Instanz, in die der Nachrichtentextteil geschrieben wird.</returns>
      <param name="parent">Der Inhalt der HTTP-Anforderung.</param>
      <param name="headers">Die den Nachrichtentextteil beschreibenden Headerfelder.</param>
    </member>
    <member name="P:System.Net.Http.MultipartFileStreamProvider.RootPath">
      <summary>Ruft den Stammpfad ab, in den der Inhalt von mehrteiligen MIME-Textteilen geschrieben wird, oder legt diesen fest.</summary>
      <returns>Der Stammpfad, in den der Inhalt von mehrteiligen MIME-Textteilen geschrieben wird.</returns>
    </member>
    <member name="T:System.Net.Http.MultipartFormDataStreamProvider">
      <summary> Ein <see cref="T:System.Net.Http.IMultipartStreamProvider" />, der geeignet ist, um mit HTML-Dateiuploads zum Schreiben von Inhalt in einen <see cref="T:System.IO.FileStream" /> verwendet zu werden. Der Datenstromanbieter prüft das &lt;b&gt;Content-Disposition&lt;/b&gt;-Headerfeld und bestimmt einen <see cref="T:System.IO.Stream" /> für die Ausgabe auf Grundlage des Vorhandenseins eines &lt;b&gt;filename&lt;/b&gt;-Parameters. Wenn ein &lt;b&gt;filename&lt;/b&gt;-Parameter im &lt;b&gt;Content-Disposition&lt;/b&gt;-Headerfeld vorhanden ist, wird der Textteil in einen <see cref="T:System.IO.FileStream" /> geschrieben, andernfalls wird er in einen <see cref="T:System.IO.MemoryStream" /> geschrieben. Dies vereinfacht die Verarbeitung von mehrteiligen MIME-HTML-Formulardaten, die eine Kombination aus Formulardaten und Dateiinhalt sind. </summary>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataStreamProvider.#ctor(System.String)">
      <summary> Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.MultipartFormDataStreamProvider" />-Klasse. </summary>
      <param name="rootPath">Der Stammpfad, in den der Inhalt von mehrteiligen MIME-Textteilen geschrieben wird.</param>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataStreamProvider.#ctor(System.String,System.Int32)">
      <summary> Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.MultipartFormDataStreamProvider" />-Klasse. </summary>
      <param name="rootPath">Der Stammpfad, in den der Inhalt von mehrteiligen MIME-Textteilen geschrieben wird.</param>
      <param name="bufferSize">Die Anzahl der für das Schreiben in die Datei gepufferten Bytes.</param>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataStreamProvider.ExecutePostProcessingAsync">
      <summary>Liest die Inhalte, die keine Dateiinhalte sind, als Formulardaten.</summary>
      <returns>Eine Aufgabe, die den asynchronen Vorgang darstellt.</returns>
    </member>
    <member name="P:System.Net.Http.MultipartFormDataStreamProvider.FormData">
      <summary>Ruft eine <see cref="T:System.Collections.Specialized.NameValueCollection" /> von Formulardaten ab, die als Teil der mehrteiligen Formulardaten übergeben wird.</summary>
      <returns>Die <see cref="T:System.Collections.Specialized.NameValueCollection" /> der Formulardaten.</returns>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataStreamProvider.GetStream(System.Net.Http.HttpContent,System.Net.Http.Headers.HttpContentHeaders)">
      <returns>Die <see cref="T:System.IO.Stream" />-Instanz, in die der Nachrichtentextteil geschrieben wird.</returns>
      <param name="parent">Der HTTP-Inhalt, der diesen Nachrichtentextteil enthält.</param>
      <param name="headers">Den Textteil beschreibende Headerfelder.</param>
    </member>
    <member name="T:System.Net.Http.MultipartMemoryStreamProvider">
      <summary>Stellt einen mehrteiligen Speicherstreamanbieter dar.</summary>
    </member>
    <member name="M:System.Net.Http.MultipartMemoryStreamProvider.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.MultipartMemoryStreamProvider" />-Klasse.</summary>
    </member>
    <member name="M:System.Net.Http.MultipartMemoryStreamProvider.GetStream(System.Net.Http.HttpContent,System.Net.Http.Headers.HttpContentHeaders)">
      <summary>Gibt den <see cref="T:System.IO.Stream" /> für den <see cref="T:System.Net.Http.MultipartMemoryStreamProvider" /> zurück.</summary>
      <returns>Die <see cref="T:System.IO.Stream" /> für den <see cref="T:System.Net.Http.MultipartMemoryStreamProvider" />.</returns>
      <param name="parent">Ein <see cref="T:System.Net.Http.HttpContent" />-Objekt.</param>
      <param name="headers">Die HTTP-Inhaltsheader.</param>
    </member>
    <member name="T:System.Net.Http.MultipartRelatedStreamProvider">
      <summary>Stellt den Anbieter für den mehrteiligen Mehrfachdatenstrom dar.</summary>
    </member>
    <member name="M:System.Net.Http.MultipartRelatedStreamProvider.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.MultipartRelatedStreamProvider" />-Klasse.</summary>
    </member>
    <member name="M:System.Net.Http.MultipartRelatedStreamProvider.GetStream(System.Net.Http.HttpContent,System.Net.Http.Headers.HttpContentHeaders)">
      <summary>Ruft den verwandten Datenstrom für den Anbieter ab.</summary>
      <returns>Die Inhaltsheader.</returns>
      <param name="parent">Der übergeordnete Inhalt.</param>
      <param name="headers">Die HTTP-Inhaltsheader.</param>
    </member>
    <member name="P:System.Net.Http.MultipartRelatedStreamProvider.RootContent">
      <summary>Ruft den Stamminhalt des <see cref="T:System.Net.Http.MultipartRelatedStreamProvider" />-Objekts ab.</summary>
      <returns>Der Stamminhalt des <see cref="T:System.Net.Http.MultipartRelatedStreamProvider" />-Objekts.</returns>
    </member>
    <member name="T:System.Net.Http.MultipartStreamProvider">
      <summary>Stellt einen Datenstromanbieter dar, der die Header untersucht, die vom Parser für mehrteiliges MIME als Teil der mehrteiligen MIME-Erweiterungsmethoden bereitgestellt werden (siehe <see cref="T:System.Net.Http.HttpContentMultipartExtensions" />), und entscheidet, welche Art von Datenstrom für den Textteil zurückgegeben wird, in den geschrieben werden soll.</summary>
    </member>
    <member name="M:System.Net.Http.MultipartStreamProvider.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.MultipartStreamProvider" />-Klasse.</summary>
    </member>
    <member name="P:System.Net.Http.MultipartStreamProvider.Contents">
      <summary>Ruft den Inhalt für diesen <see cref="T:System.Net.Http.MultipartStreamProvider" /> ab oder legt diesen fest.</summary>
      <returns>Der Inhalt für diesen <see cref="T:System.Net.Http.MultipartStreamProvider" />.</returns>
    </member>
    <member name="M:System.Net.Http.MultipartStreamProvider.ExecutePostProcessingAsync">
      <summary>Führt den Nachverarbeitungsvorgang für diesen <see cref="T:System.Net.Http.MultipartStreamProvider" /> aus.</summary>
      <returns>Die asynchrone Aufgabe für diesen Vorgang.</returns>
    </member>
    <member name="M:System.Net.Http.MultipartStreamProvider.GetStream(System.Net.Http.HttpContent,System.Net.Http.Headers.HttpContentHeaders)">
      <summary>Ruft den Datenstrom ab, in den der Nachrichtentext geschrieben werden soll. Diese Methode wird aufgerufen, wenn ein mehrteiliger MIME-Nachrichtentext analysiert wurde.</summary>
      <returns>Die <see cref="T:System.IO.Stream" />-Instanz, in die der Nachrichtentextteil geschrieben wird.</returns>
      <param name="parent">Der Inhalt der HTTP-Anforderung.</param>
      <param name="headers">Die den Nachrichtentextteil beschreibenden Headerfelder.</param>
    </member>
    <member name="T:System.Net.Http.ObjectContent">
      <summary> Enthält einen Wert sowie einen zugehörigen <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />, der zum Serialisieren des Werts verwendet wird, wenn dieser Inhalt geschrieben wird. </summary>
    </member>
    <member name="M:System.Net.Http.ObjectContent.#ctor(System.Type,System.Object,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.ObjectContent" />-Klasse.</summary>
      <param name="type">Der Objekttyp, den diese Instanz enthält.</param>
      <param name="value">Der Wert des Objekts, den diese Instanz enthält.</param>
      <param name="formatter">Der bei der Serialisierung des Werts zu verwendende Formatierer.</param>
    </member>
    <member name="M:System.Net.Http.ObjectContent.#ctor(System.Type,System.Object,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.ObjectContent" />-Klasse. </summary>
      <param name="type">Der Objekttyp, den diese Instanz enthält.</param>
      <param name="value">Der Wert des Objekts, den diese Instanz enthält.</param>
      <param name="formatter">Der bei der Serialisierung des Werts zu verwendende Formatierer.</param>
      <param name="mediaType">Der autorisierende Wert des Content-Type-Headers. Dieser Wert kann null sein. In diesem Fall wird der Standardinhaltstyp des Formatierers verwendet.</param>
    </member>
    <member name="M:System.Net.Http.ObjectContent.#ctor(System.Type,System.Object,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.ObjectContent" />-Klasse.</summary>
      <param name="type">Der Objekttyp, den diese Instanz enthält.</param>
      <param name="value">Der Wert des Objekts, den diese Instanz enthält.</param>
      <param name="formatter">Der bei der Serialisierung des Werts zu verwendende Formatierer.</param>
      <param name="mediaType">Der autorisierende Wert des Content-Type-Headers.</param>
    </member>
    <member name="P:System.Net.Http.ObjectContent.Formatter">
      <summary>Ruft den Medientypformatierer ab, die dieser Inhaltsinstanz zugeordnet ist.</summary>
      <returns>Der <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />.</returns>
    </member>
    <member name="P:System.Net.Http.ObjectContent.ObjectType">
      <summary>Ruft den Objekttyp ab, der von dieser <see cref="T:System.Net.Http.ObjectContent" />-Instanz verwaltet wird.</summary>
      <returns>Der Objekttyp.</returns>
    </member>
    <member name="M:System.Net.Http.ObjectContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
      <summary>Serialisiert den Inhalt des Objekts asynchron mit dem angegebenen Datenstrom.</summary>
      <returns>Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</returns>
      <param name="stream">Der Datenstrom, in den geschrieben werden soll.</param>
      <param name="context">Der zugeordnete <see cref="T:System.Net.TransportContext" />.</param>
    </member>
    <member name="M:System.Net.Http.ObjectContent.TryComputeLength(System.Int64@)">
      <summary>Berechnet die Länge des Datenstroms, falls möglich.</summary>
      <returns>true, wenn die Länge berechnet wurde, andernfalls false.</returns>
      <param name="length">Empfängt die berechnete Länge des Datenstroms.</param>
    </member>
    <member name="P:System.Net.Http.ObjectContent.Value">
      <summary>Ruft den Wert des Inhalts ab bzw. legt diesen fest.</summary>
      <returns>Der Inhaltswert.</returns>
    </member>
    <member name="T:System.Net.Http.ObjectContent`1">
      <summary> Generische Form von <see cref="T:System.Net.Http.ObjectContent" />. </summary>
      <typeparam name="T">Der Objekttyp, den diese Klasse enthält.</typeparam>
    </member>
    <member name="M:System.Net.Http.ObjectContent`1.#ctor(`0,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.ObjectContent`1" />-Klasse.</summary>
      <param name="value">Der Wert des Objekts, den diese Instanz enthält.</param>
      <param name="formatter">Der bei der Serialisierung des Werts zu verwendende Formatierer.</param>
    </member>
    <member name="M:System.Net.Http.ObjectContent`1.#ctor(`0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Initialisiert eine neue Instanz der &lt;see cref="T:System.Net.Http.ObjectContent`1" /&gt;-Klasse. </summary>
      <param name="value">Der Wert des Objekts, den diese Instanz enthält.</param>
      <param name="formatter">Der bei der Serialisierung des Werts zu verwendende Formatierer.</param>
      <param name="mediaType">Der autorisierende Wert des Content-Type-Headers. Dieser Wert kann null sein. In diesem Fall wird der Standardinhaltstyp des Formatierers verwendet.</param>
    </member>
    <member name="M:System.Net.Http.ObjectContent`1.#ctor(`0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.ObjectContent`1" />-Klasse.</summary>
      <param name="value">Der Wert des Objekts, den diese Instanz enthält.</param>
      <param name="formatter">Der bei der Serialisierung des Werts zu verwendende Formatierer.</param>
      <param name="mediaType">Der autorisierende Wert des Content-Type-Headers.</param>
    </member>
    <member name="T:System.Net.Http.PushStreamContent">
      <summary>Ermöglicht Szenarien, in denen ein Datenproduzent direkt (synchron oder asynchron) mithilfe eines Datenstroms schreiben möchte.</summary>
    </member>
    <member name="M:System.Net.Http.PushStreamContent.#ctor(System.Action{System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext})">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.PushStreamContent" />-Klasse.</summary>
      <param name="onStreamAvailable">Eine Aktion, die aufgerufen wird, wenn ein Ausgabedatenstrom verfügbar ist und ermöglicht, direkt in diesen zu schreiben. </param>
    </member>
    <member name="M:System.Net.Http.PushStreamContent.#ctor(System.Action{System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext},System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.PushStreamContent" />-Klasse.</summary>
      <param name="onStreamAvailable">Eine Aktion, die aufgerufen wird, wenn ein Ausgabedatenstrom verfügbar ist und ermöglicht, direkt in diesen zu schreiben.</param>
      <param name="mediaType">Der Medientyp.</param>
    </member>
    <member name="M:System.Net.Http.PushStreamContent.#ctor(System.Action{System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext},System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.PushStreamContent" />-Klasse.</summary>
      <param name="onStreamAvailable">Eine Aktion, die aufgerufen wird, wenn ein Ausgabedatenstrom verfügbar ist und ermöglicht, direkt in diesen zu schreiben.</param>
      <param name="mediaType">Der Medientyp.</param>
    </member>
    <member name="M:System.Net.Http.PushStreamContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
      <summary>Serialisiert den Pushinhalt asynchron in den Datenstrom.</summary>
      <returns>Der serialisierte Pushinhalt.</returns>
      <param name="stream">Der Datenstrom, in dem der Pushinhalt serialisiert wird.</param>
      <param name="context">Der Kontext.</param>
    </member>
    <member name="M:System.Net.Http.PushStreamContent.TryComputeLength(System.Int64@)">
      <summary>Ermittelt, ob der Datenstrominhalt eine gültige Länge in Bytes aufweist.</summary>
      <returns>true, wenn die Länge gültig ist, andernfalls false.</returns>
      <param name="length">Die Länge des Datenstrominhalts in Bytes.</param>
    </member>
    <member name="T:System.Net.Http.UriExtensions">
      <summary>Enthält Erweiterungsmethoden, die es ermöglichen, dass stark typisierte Objekte aus der Abfragekomponente von <see cref="T:System.Uri" />-Instanzen gelesen werden können. </summary>
    </member>
    <member name="M:System.Net.Http.UriExtensions.ParseQueryString(System.Uri)">
      <summary>Analysiert den Abfrageteil des angegebenen URIs.</summary>
      <returns>Eine <see cref="T:System.Collections.Specialized.NameValueCollection" />, die die Abfrageparameter enthält.</returns>
      <param name="address">Der zu analysierende URI.</param>
    </member>
    <member name="M:System.Net.Http.UriExtensions.TryReadQueryAs(System.Uri,System.Type,System.Object@)">
      <summary>Liest URL-codierte HTML-Formulardaten, die in der URI-Abfragezeichenfolge als ein Objekt eines angegebenen Typs bereitgestellt werden.</summary>
      <returns>true, wenn die Abfragekomponente des URIs als der angegebene Typ gelesen werden kann, andernfalls false.</returns>
      <param name="address">Der zu lesende URI.</param>
      <param name="type">Der Typ des zu lesenden Objekts</param>
      <param name="value">Der Rückgabewert dieser Methode ist ein Objekt, das aus der Abfragekomponente des URIs initialisiert wird. Dieser Parameter wird als nicht initialisiert behandelt.</param>
    </member>
    <member name="M:System.Net.Http.UriExtensions.TryReadQueryAs``1(System.Uri,``0@)">
      <summary>Liest URL-codierte HTML-Formulardaten, die in der URI-Abfragezeichenfolge als ein Objekt eines angegebenen Typs bereitgestellt werden.</summary>
      <returns>true, wenn die Abfragekomponente des URIs als der angegebene Typ gelesen werden kann, andernfalls false.</returns>
      <param name="address">Der zu lesende URI.</param>
      <param name="value">Der Rückgabewert dieser Methode ist ein Objekt, das aus der Abfragekomponente des URIs initialisiert wird. Dieser Parameter wird als nicht initialisiert behandelt.</param>
      <typeparam name="T">Der Typ des zu lesenden Objekts</typeparam>
    </member>
    <member name="M:System.Net.Http.UriExtensions.TryReadQueryAsJson(System.Uri,Newtonsoft.Json.Linq.JObject@)">
      <summary>Liest URL-codierte HTML-Formulardaten, die in der <see cref="T:System.Uri" />-Abfragekomponente als <see cref="T:Newtonsoft.Json.Linq.JObject" />-Objekt bereitgestellt werden.</summary>
      <returns>True, wenn die Abfragekomponente als <see cref="T:Newtonsoft.Json.Linq.JObject" /> gelesen werden kann, andernfalls False.</returns>
      <param name="address">Die <see cref="T:System.Uri" />-Instanz, aus der gelesen werden soll.</param>
      <param name="value">Ein Objekt, das mit dieser Instanz initialisiert werden soll bzw. mit null, wenn die Konvertierung nicht ausgeführt werden kann.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.BufferedMediaTypeFormatter">
      <summary>Stellt eine Hilfsklasse dar, die einen synchronen Formatierer über der asynchronen Formatiererinfrastruktur ermöglicht.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.BufferedMediaTypeFormatter.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.Formatting.BufferedMediaTypeFormatter" />-Klasse.</summary>
    </member>
    <member name="P:System.Net.Http.Formatting.BufferedMediaTypeFormatter.BufferSize">
      <summary>Ruft die vorgeschlagene Puffergröße in Bytes zur Verwendung mit Datenströmen ab oder legt diese fest.</summary>
      <returns>Die vorgeschlagene Puffergröße in Bytes zur Verwendung mit Datenströmen.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.BufferedMediaTypeFormatter.ReadFromStream(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
      <summary>Liest synchron den gepufferten Datenstrom.</summary>
      <returns>Ein Objekt vom angegebenen <paramref name="type" />.</returns>
      <param name="type">Der Typ des zu deserialisierenden Objekts.</param>
      <param name="readStream">Der Datenstrom, aus dem gelesen werden soll.</param>
      <param name="content">Der <see cref="T:System.Net.Http.HttpContent" />, falls verfügbar. Dieser kann null sein.</param>
      <param name="formatterLogger">Die <see cref="T:System.Net.Http.Formatting.IFormatterLogger" />, in der Ereignisse protokolliert werden sollen.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BufferedMediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
      <summary>Liest asynchron den gepufferten Datenstrom.</summary>
      <returns>Ein Aufgabenobjekt, das den asynchronen Vorgang darstellt.</returns>
      <param name="type">Der Typ des zu deserialisierenden Objekts.</param>
      <param name="readStream">Der Datenstrom, aus dem gelesen werden soll.</param>
      <param name="content">Der <see cref="T:System.Net.Http.HttpContent" />, falls verfügbar. Dieser kann null sein.</param>
      <param name="formatterLogger">Die <see cref="T:System.Net.Http.Formatting.IFormatterLogger" />, in der Ereignisse protokolliert werden sollen.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BufferedMediaTypeFormatter.WriteToStream(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent)">
      <summary>Schreibt synchron in den gepufferten Datenstrom.</summary>
      <param name="type">Der Typ des zu serialisierenden Objekts.</param>
      <param name="value">Der zu schreibende Objektwert. Dieser kann null sein.</param>
      <param name="writeStream">Der Datenstrom, in den geschrieben werden soll.</param>
      <param name="content">Der <see cref="T:System.Net.Http.HttpContent" />, falls verfügbar. Dieser kann null sein.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BufferedMediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext)">
      <summary>Schreibt asynchron in den gepufferten Datenstrom.</summary>
      <returns>Ein Aufgabenobjekt, das den asynchronen Vorgang darstellt.</returns>
      <param name="type">Der Typ des zu serialisierenden Objekts.</param>
      <param name="value">Der zu schreibende Objektwert.  Sie kann "null" sein.</param>
      <param name="writeStream">Der Datenstrom, in den geschrieben werden soll.</param>
      <param name="content">Der <see cref="T:System.Net.Http.HttpContent" />, falls verfügbar. Dieser kann null sein.</param>
      <param name="transportContext">Der Transportkontext.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.ContentNegotiationResult">
      <summary> Stellt das Ergebnis der Inhaltsaushandlung dar, die mithilfe von &lt;siehe cref="M:System.Net.Http.Formatting.IContentNegotiator.Negotiate(System.Type,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})" /&gt; ausgeführt wird.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.ContentNegotiationResult.#ctor(System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Erstellt das Ergebnisobjekt der Inhaltsaushandlung. </summary>
      <param name="formatter">Der Formatierer.</param>
      <param name="mediaType">Der bevorzugte Medientyp. Dieser kann null sein.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.ContentNegotiationResult.Formatter">
      <summary> Der für die Serialisierung ausgewählte Formatierer. </summary>
    </member>
    <member name="P:System.Net.Http.Formatting.ContentNegotiationResult.MediaType">
      <summary> Der Medientyp, der dem für die Serialisierung ausgewählten Formatierer zugeordnet ist. Dieser kann null sein. </summary>
    </member>
    <member name="T:System.Net.Http.Formatting.DefaultContentNegotiator">
      <summary>Die Standardimplementierung von <see cref="T:System.Net.Http.Formatting.IContentNegotiator" />, die zum Auswählen eines <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> für eine <see cref="T:System.Net.Http.HttpRequestMessage" /> oder eine <see cref="T:System.Net.Http.HttpResponseMessage" /> verwendet wird. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.Formatting.DefaultContentNegotiator" />-Klasse.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.#ctor(System.Boolean)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.Formatting.DefaultContentNegotiator" />-Klasse.</summary>
      <param name="excludeMatchOnTypeOnly">true, um Formatierer auszuschließen, die nur für den Objekttyp übereinstimmen, andernfalls false.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.ComputeFormatterMatches(System.Type,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>Bestimmt, wie gut jeder Formatierer mit einer HTTP-Anforderung übereinstimmt.</summary>
      <returns>Gibt eine Auflistung von <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" />-Objekten zurück, die alle Übereinstimmungen darstellen.</returns>
      <param name="type">Der Typ, der serialisiert werden soll.</param>
      <param name="request">Die Anforderung.</param>
      <param name="formatters">Die Gruppe von <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />-Objekten, aus der ausgewählt werden kann.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.DefaultContentNegotiator.ExcludeMatchOnTypeOnly">
      <summary>Wenn der Wert true ist, werden Formatierer ausgeschlossen, die nur für den Objekttyp übereinstimmen, andernfalls false.</summary>
      <returns>Gibt ein <see cref="T:System.Boolean" />-Objekt zurück.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.MatchAcceptHeader(System.Collections.Generic.IEnumerable{System.Net.Http.Headers.MediaTypeWithQualityHeaderValue},System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Vergleicht eine Sammlung von Accept-Headerfeldern mit den Medientypen, die ein Formatierer unterstützt.</summary>
      <returns>Gibt ein <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" />-Objekt zurück, das die Qualität der Übereinstimmung oder null angibt, wenn keine Übereinstimmung vorliegt.</returns>
      <param name="sortedAcceptValues">Eine Liste der Accept-Headerwerte, sortiert in absteigender Reihenfolge des Q-Faktors. Sie können diese Liste durch einen Aufruf der Methode <see cref="M:System.Net.Http.Formatting.DefaultContentNegotiator.SortMediaTypeWithQualityHeaderValuesByQFactor(System.Collections.Generic.ICollection{System.Net.Http.Headers.MediaTypeWithQualityHeaderValue})" /> erstellen.</param>
      <param name="formatter">Der Formatierer, mit dem eine Übereinstimmung vorliegen soll.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.MatchMediaTypeMapping(System.Net.Http.HttpRequestMessage,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Vergleicht eine Anforderung mit den <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" />-Objekten in einem Medientypformatierer.</summary>
      <returns>Gibt ein <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" />-Objekt zurück, das die Qualität der Übereinstimmung oder null angibt, wenn keine Übereinstimmung vorliegt.</returns>
      <param name="request">Die Anforderung.</param>
      <param name="formatter">Der Medientypformatierer.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.MatchRequestMediaType(System.Net.Http.HttpRequestMessage,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Vergleicht den Inhaltstyp einer Anforderung mit den Medientypen, die ein Formatierer unterstützt.</summary>
      <returns>Gibt ein <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" />-Objekt zurück, das die Qualität der Übereinstimmung oder null angibt, wenn keine Übereinstimmung vorliegt.</returns>
      <param name="request">Die Anforderung.</param>
      <param name="formatter">Der Formatierer, mit dem eine Übereinstimmung vorliegen soll.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.MatchType(System.Type,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Wählt den ersten unterstützten Medientyp eines Formatierer aus.</summary>
      <returns>Gibt ein <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" />-Objekt zurück, für das <see cref="P:System.Net.Http.Formatting.MediaTypeFormatterMatch.Ranking" /> auf <see cref="F:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking.MatchOnCanWriteType" /> oder auf null festgelegt ist, wenn keine Übereinstimmung vorhanden ist. </returns>
      <param name="type">Der Typ, mit der eine Übereinstimmung vorliegen soll.</param>
      <param name="formatter">Der Formatierer, mit dem eine Übereinstimmung vorliegen soll.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.Negotiate(System.Type,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary> Führt die Inhaltsaushandlung aus, indem der geeignetste <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> aus den übergebenen <paramref name="formatters" /> für die angegebene <paramref name="request" /> ausgewählt wird, der ein Objekt mit dem angegebenen <paramref name="type" /> serialisieren kann. </summary>
      <returns>Das Ergebnis der Aushandlung, das die geeignetste <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />-Instanz enthält oder null, wenn kein geeigneter Formatierer vorhanden ist.</returns>
      <param name="type">Der Typ, der serialisiert werden soll.</param>
      <param name="request">Die Anforderung.</param>
      <param name="formatters">Die Gruppe von <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />-Objekten, aus der ausgewählt werden kann.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.SelectResponseCharacterEncoding(System.Net.Http.HttpRequestMessage,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Bestimmt die beste Zeichencodierung zum Schreiben der Antwort.</summary>
      <returns>Gibt die <see cref="T:System.Text.Encoding" /> zurück, die die beste Übereinstimmung bietet.</returns>
      <param name="request">Die Anforderung.</param>
      <param name="formatter">Der ausgewählte Medienformatierer.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.SelectResponseMediaTypeFormatter(System.Collections.Generic.ICollection{System.Net.Http.Formatting.MediaTypeFormatterMatch})">
      <summary>Wählt die beste Übereinstimmung aus den gefundenen Übereinstimmungskandidaten aus.</summary>
      <returns>Gibt das <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" />-Objekt zurück, das die beste Übereinstimmung bietet.</returns>
      <param name="matches">Die Auflistung der Übereinstimmungen.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.SortMediaTypeWithQualityHeaderValuesByQFactor(System.Collections.Generic.ICollection{System.Net.Http.Headers.MediaTypeWithQualityHeaderValue})">
      <summary>Sortiert Accept-Headerwerte in absteigender Reihenfolge des Q-Faktors.</summary>
      <returns>Gibt die sortierte Liste der MediaTypeWithQualityHeaderValue-Objekte zurück.</returns>
      <param name="headerValues">Eine Auflistung von MediaTypeWithQualityHeaderValue-Objekten, die die Accept-Headerwerte darstellen.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.SortStringWithQualityHeaderValuesByQFactor(System.Collections.Generic.ICollection{System.Net.Http.Headers.StringWithQualityHeaderValue})">
      <summary>Sortiert eine Liste von Accept-Charset-, Accept-Encoding-, Accept-Language- und anderen verwandten Headerwerten in absteigender Reihenfolge des Q-Faktors. </summary>
      <returns>Gibt die sortierte Liste der StringWithQualityHeaderValue-Objekte zurück.</returns>
      <param name="headerValues">Eine Auflistung von StringWithQualityHeaderValue-Objekten, die die die Headerfelder darstellen.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.UpdateBestMatch(System.Net.Http.Formatting.MediaTypeFormatterMatch,System.Net.Http.Formatting.MediaTypeFormatterMatch)">
      <summary>Wertet aus, ob eine Übereinstimmung besser als die aktuelle Übereinstimmung ist.</summary>
      <returns>Gibt das <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" />-Objekt zurück, das die bessere Übereinstimmung darstellt.</returns>
      <param name="current">Die aktuelle Übereinstimmung.</param>
      <param name="potentialReplacement">Die Übereinstimmung, die im Vergleich mit der aktuellen Übereinstimmung ausgewertet werden soll.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.DelegatingEnumerable`1">
      <summary> Hilfsklasse zum Serialisieren von &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;-Typen, indem diese durch eine konkrete Implementierung delegiert werden."/&amp;gt;. </summary>
      <typeparam name="T">Die Schnittstellenimplementierung, die über einen Proxy geleitet werden soll.</typeparam>
    </member>
    <member name="M:System.Net.Http.Formatting.DelegatingEnumerable`1.#ctor">
      <summary> Initialisiert einen DelegatingEnumerable. Dieser Konstruktor ist erforderlich, damit <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> funktioniert. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.DelegatingEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary> Initialisiert einen DelegatingEnumerable mit einem &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;. Dies ist eine Hilfsklasse, mit der &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;-Schnittstellen für <see cref="T:System.Xml.Serialization.XmlSerializer" /> über einen Proxy geleitet werden. </summary>
      <param name="source">Die &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;-Instanz, von der der Enumerator abgerufen wird.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DelegatingEnumerable`1.Add(System.Object)">
      <summary> Diese Methode ist nicht implementiert, aber erforderlich, damit die Serialisierung funktioniert. Nicht verwenden. </summary>
      <param name="item">Das hinzuzufügende Element. Nicht verwendet.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DelegatingEnumerable`1.GetEnumerator">
      <summary> Ruft den Enumerator der zugeordneten &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt; ab. </summary>
      <returns>Der Enumerator der &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;-Quelle.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.DelegatingEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
      <summary> Ruft den Enumerator der zugeordneten &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt; ab. </summary>
      <returns>Der Enumerator der &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;-Quelle.</returns>
    </member>
    <member name="T:System.Net.Http.Formatting.FormDataCollection">
      <summary>Stellt die Auflistung von Formulardaten dar.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.FormDataCollection.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.Formatting.FormDataCollection" />-Klasse.</summary>
      <param name="pairs">Die Paare.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.FormDataCollection.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.Formatting.FormDataCollection" />-Klasse.</summary>
      <param name="query">Die Abfrage.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.FormDataCollection.#ctor(System.Uri)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.Formatting.FormDataCollection" />-Klasse.</summary>
      <param name="uri">Der URI.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.FormDataCollection.Get(System.String)">
      <summary>Ruft die Auflistung von Formulardaten ab.</summary>
      <returns>Die Auflistung von Formulardaten.</returns>
      <param name="key">Der Schlüssel.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.FormDataCollection.GetEnumerator">
      <summary>Ruft ein aufzählbares Element ab, das die Auflistung durchläuft.</summary>
      <returns>Das aufzählbare Element, das die Auflistung durchläuft.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.FormDataCollection.GetValues(System.String)">
      <summary>Ruft die Werte der Auflistung von Formulardaten ab.</summary>
      <returns>Die Werte der Auflistung von Formulardaten.</returns>
      <param name="key">Der Schlüssel.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.FormDataCollection.ReadAsNameValueCollection">
      <summary>Liest die Auflistung von Formulardaten als Auflistung von Namenswerten.</summary>
      <returns>Die Auflistung von Formulardaten als Auflistung von Namenswerten.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.FormDataCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Ruft ein aufzählbares Element ab, das die Auflistung durchläuft.</summary>
      <returns>Das aufzählbare Element, das die Auflistung durchläuft.</returns>
    </member>
    <member name="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter">
      <summary>
        <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />-Klasse für die Verarbeitung von HTML-Formulardaten mit URL-Endung, auch als application/x-www-form-urlencoded bezeichnet.  </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter" />-Klasse.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.CanReadType(System.Type)">
      <summary>Fragt ab, ob der <see cref="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter" /> ein Objekt des angegebenen Typs deserialisieren kann.</summary>
      <returns>true, wenn der <see cref="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter" /> den Typ deserialisieren kann, andernfalls false.</returns>
      <param name="type">Der zu deserialisierende Typ.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.CanWriteType(System.Type)">
      <summary>Fragt ab, ob der <see cref="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter" /> ein Objekt des angegebenen Typs serialisieren kann.</summary>
      <returns>true, wenn der <see cref="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter" /> den Typ serialisieren kann, andernfalls false.</returns>
      <param name="type">Der zu serialisierende Typ.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.DefaultMediaType">
      <summary>Ruft den Standardmedientyp für URL-codierte HTML-Formulardaten ab, der application/x-www-form-urlencoded lautet.</summary>
      <returns>Der Standardmedientyp für URL-codierte HTML-Formulardaten.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.MaxDepth">
      <summary>Ruft die für diesen Formatierer zulässige maximale Tiefe ab oder legt diese fest.</summary>
      <returns>Die maximal zulässige Tiefe.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.ReadBufferSize">
      <summary>Ruft die Größe des Puffers beim Lesen des eingehenden Datenstroms ab oder legt diese fest.</summary>
      <returns>Die Puffergröße.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
      <summary> Deserialisiert asynchron ein Objekt des angegebenen Typs.</summary>
      <returns>Ein <see cref="T:System.Threading.Tasks.Task" />, dessen Ergebnis die gelesene Objektinstanz ist.</returns>
      <param name="type">Der Typ des zu deserialisierenden Objekts</param>
      <param name="readStream">Der zu lesende <see cref="T:System.IO.Stream" />.</param>
      <param name="content">Die <see cref="T:System.Net.Http.HttpContent" /> für den Inhalt, der gelesen wird.</param>
      <param name="formatterLogger">Die <see cref="T:System.Net.Http.Formatting.IFormatterLogger" />, in der Ereignisse protokolliert werden sollen.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.IContentNegotiator">
      <summary> Führt Inhaltsaushandlung aus.  Dieser Vorgang besteht in der Auswahl eines Antwortwriters (Formatierers), der mit den Headerwerten in der Anforderung kompatibel ist. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.IContentNegotiator.Negotiate(System.Type,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary> Führt die Inhaltsaushandlung aus, indem der geeignetste <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> aus den empfangenen Formatierern (formatters) für die angegebene Anforderung (request) ausgewählt wird, der ein Objekt des angegebenen Typs (type) serialisieren kann. </summary>
      <returns>Das Ergebnis der Aushandlung, das die geeignetste <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />-Instanz enthält oder "null", wenn kein geeigneter Formatierer vorhanden ist.</returns>
      <param name="type">Der Typ, der serialisiert werden soll.</param>
      <param name="request">Die Anforderungsnachricht, die die Headerwerte enthält, die für die Aushandlung verwendet werden.</param>
      <param name="formatters">Die Gruppe von <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />-Objekten, aus der ausgewählt werden kann.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.IFormatterLogger">
      <summary>Gibt eine Rückrufschnittstelle an, die ein Formatierer zum Protokollieren von Fehlern während des Lesevorgangs verwenden kann.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.IFormatterLogger.LogError(System.String,System.Exception)">
      <summary>Protokolliert einen Fehler.</summary>
      <param name="errorPath">Der Pfad zu dem Member, für den der Fehler protokolliert wird.</param>
      <param name="exception">Die Fehlermeldung.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.IFormatterLogger.LogError(System.String,System.String)">
      <summary>Protokolliert einen Fehler.</summary>
      <param name="errorPath">Der Pfad zu dem Member, für den der Fehler protokolliert wird.</param>
      <param name="errorMessage">Die zu protokollierende Fehlermeldung.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.IRequiredMemberSelector">
      <summary>Definiert eine Methode, die ermittelt, ob ein bestimmtes Element für die Deserialisierung erforderlich ist.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.IRequiredMemberSelector.IsRequiredMember(System.Reflection.MemberInfo)">
      <summary>Ermittelt, ob ein bestimmtes Element für die Deserialisierung erforderlich ist.</summary>
      <returns>true, wenn <paramref name="member" /> als erforderliches Element behandelt werden soll, andernfalls false.</returns>
      <param name="member">Die zu deserialisierende <see cref="T:System.Reflection.MemberInfo" />.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.JsonMediaTypeFormatter">
      <summary>Stellt die <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />-Klasse zur Verarbeitung von JSON dar. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.#ctor">
      <summary> Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.Formatting.JsonMediaTypeFormatter" />-Klasse. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.CanReadType(System.Type)">
      <summary>Bestimmt, ob dieser <see cref="T:System.Net.Http.Formatting.JsonMediaTypeFormatter" /> Objekte des angegebenen <paramref name="type" /> lesen kann.</summary>
      <returns>True, wenn Objekte dieses <paramref name="type" /> gelesen werden können, andernfalls False.</returns>
      <param name="type">Der Objekttyp, der gelesen wird.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.CanWriteType(System.Type)">
      <summary>Bestimmt, ob dieser <see cref="T:System.Net.Http.Formatting.JsonMediaTypeFormatter" /> Objekte des angegebenen <paramref name="type" /> schreiben kann.</summary>
      <returns>True, wenn Objekte dieses <paramref name="type" /> geschrieben werden können, andernfalls False.</returns>
      <param name="type">Der Objekttyp, der geschrieben wird.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.CreateDefaultSerializerSettings">
      <summary> Erstellt eine JsonSerializerSettings-Instanz mit den von <see cref="T:System.Net.Http.Formatting.JsonMediaTypeFormatter" /> verwendeten Standardeinstellungen. </summary>
      <returns>Eine neu erstellte JsonSerializerSettings-Instanz mit den von <see cref="T:System.Net.Http.Formatting.JsonMediaTypeFormatter" /> verwendeten Standardeinstellungen.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.JsonMediaTypeFormatter.DefaultMediaType">
      <summary>Ruft den Standardmedientyp für JSON ab, nämlich "application/json".</summary>
      <returns>Der <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> für JSON.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.JsonMediaTypeFormatter.Indent">
      <summary> Ruft einen Wert ab, der angibt, ob Elemente beim Schreiben von Daten eingerückt werden sollen, oder legt diesen fest.  </summary>
      <returns>True, wenn Elemente beim Schreiben von Daten eingerückt werden sollen, andernfalls False.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.JsonMediaTypeFormatter.MaxDepth">
      <summary>Ruft die für diesen Formatierer zulässige maximale Tiefe ab oder legt diese fest.</summary>
      <returns>Die maximale Tiefe, die von diesem Formatierer zugelassen wird.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
      <summary>Liest ein Objekt des angegebenen <paramref name="type" /> aus dem angegebenen <paramref name="stream" />. Diese Methode wird während der Deserialisierung aufgerufen.</summary>
      <returns>Gibt <see cref="T:System.Threading.Tasks.Task`1" /> zurück.</returns>
      <param name="type">Der Typ des zu lesenden Objekts</param>
      <param name="readStream">Der Datenstrom, aus dem gelesen werden soll.</param>
      <param name="content">Der Inhalt, der geschrieben wird.</param>
      <param name="formatterLogger">Die <see cref="T:System.Net.Http.Formatting.IFormatterLogger" />, in der Ereignisse protokolliert werden sollen.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.JsonMediaTypeFormatter.SerializerSettings">
      <summary> Ruft die JsonSerializerSettings ab, die zum Konfigurieren von JsonSerializer verwendet werden, oder legt sie fest. </summary>
      <returns> Die JsonSerializerSettings, die zum Konfigurieren von JsonSerializer verwendet werden. </returns>
    </member>
    <member name="P:System.Net.Http.Formatting.JsonMediaTypeFormatter.UseDataContractJsonSerializer">
      <summary> Ruft einen Wert ab, der angibt, ob <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> standardmäßig verwendet werden soll, oder legt diesen fest. </summary>
      <returns>True, wenn der <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> standardmäßig verwendet werden soll, andernfalls False.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext)">
      <summary>Schreibt ein Objekt des angegebenen <paramref name="type" /> in den angegebenen <paramref name="stream" />. Diese Methode wird während der Serialisierung aufgerufen.</summary>
      <returns>Eine <see cref="T:System.Threading.Tasks.Task" />, die den Wert in den Datenstrom schreibt.</returns>
      <param name="type">Der Typ des zu schreibenden Objekts.</param>
      <param name="value">Das zu schreibende Objekt.</param>
      <param name="writeStream">Der <see cref="T:System.IO.Stream" />, in den geschrieben werden soll.</param>
      <param name="content">Das <see cref="T:System.Net.Http.HttpContent" />-Objekt, in das der Inhalt geschrieben wird.</param>
      <param name="transportContext">Der <see cref="T:System.Net.TransportContext" />.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.MediaTypeFormatter">
      <summary> Basisklasse zur Verarbeitung der Serialisierung und Deserialisierung von stark typisierten Objekten, die <see cref="T:System.Net.Http.ObjectContent" /> verwenden. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />-Klasse.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.CanReadType(System.Type)">
      <summary>Fragt ab, ob dieser <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> ein Objekt des angegebenen Typs deserialisieren kann.</summary>
      <returns>true, wenn der <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> den Typ deserialisieren kann, andernfalls false.</returns>
      <param name="type">Der zu deserialisierende Typ.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.CanWriteType(System.Type)">
      <summary>Fragt ab, ob dieser <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> ein Objekt des angegebenen Typs serialisieren kann.</summary>
      <returns>true, wenn der <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> den Typ serialisieren kann, andernfalls false.</returns>
      <param name="type">Der zu serialisierende Typ.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.GetDefaultValueForType(System.Type)">
      <summary>Ruft den Standardwert für den angegebenen Typ ab.</summary>
      <returns>Der Standardwert.</returns>
      <param name="type">Der Typ, für den Sie der Standardwert abgerufen werden soll.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.GetPerRequestFormatterInstance(System.Type,System.Net.Http.HttpRequestMessage,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary>Gibt eine spezialisierte Instanz von <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> zurück, die eine Antwort für die angegebenen Parameter formatieren kann.</summary>
      <returns>Gibt <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> zurück.</returns>
      <param name="type">Der zu formatierende Typ.</param>
      <param name="request">Die Anforderung.</param>
      <param name="mediaType">Der Medientyp.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatter.MaxHttpCollectionKeys">
      <summary>Ruft die maximale Anzahl der in einer T:<see cref="System.Collections.Specialized.NameValueCollection" /> gespeicherten Schlüssel ab oder legt diese fest.</summary>
      <returns>Die maximale Anzahl der Schlüssel.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatter.MediaTypeMappings">
      <summary>Ruft die änderbare Auflistung der <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" />-Objekte ab, die HTTP-Anforderungen Medientypen zuordnen.</summary>
      <returns>Die <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" />-Auflistung.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
      <summary>Deserialisiert asynchron ein Objekt des angegebenen Typs.</summary>
      <returns>Ein <see cref="T:System.Threading.Tasks.Task" />, dessen Ergebnis ein Objekt des angegebenen Typs ist.</returns>
      <param name="type">Der Typ des zu deserialisierenden Objekts.</param>
      <param name="readStream">Der zu lesende <see cref="T:System.IO.Stream" />.</param>
      <param name="content">Der <see cref="T:System.Net.Http.HttpContent" />, falls verfügbar. Sie kann "null" sein.</param>
      <param name="formatterLogger">Die <see cref="T:System.Net.Http.Formatting.IFormatterLogger" />, in der Ereignisse protokolliert werden sollen.</param>
      <exception cref="T:System.NotSupportedException">Abgeleitete Typen müssen Lesevorgänge unterstützen.</exception>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatter.RequiredMemberSelector">
      <summary>Ruft die <see cref="T:System.Net.Http.Formatting.IRequiredMemberSelector" />-Instanz ab, die zum Bestimmen erforderlicher Elemente verwendet wird, oder legt diese fest.</summary>
      <returns>Die <see cref="T:System.Net.Http.Formatting.IRequiredMemberSelector" />-Instanz.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.SelectCharacterEncoding(System.Net.Http.Headers.HttpContentHeaders)">
      <summary>Bestimmt die beste Zeichencodierung zum Lesen bzw. Schreiben eines HTTP-Entitätstextteils auf der Grundlage der bereitgestellten Inhaltsheader.</summary>
      <returns>Die Codierung, die die beste Übereinstimmung bietet.</returns>
      <param name="contentHeaders">Die Inhaltsheader.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.SetDefaultContentHeaders(System.Type,System.Net.Http.Headers.HttpContentHeaders,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Legt die Standardheader für Inhalt fest, der mithilfe dieses Formatierers formatiert wird. Diese Methode wird vom <see cref="T:System.Net.Http.ObjectContent" />-Konstruktor aufgerufen. Diese Implementierung legt den Inhaltstypheader (Content-Type) auf den Wert mediaType fest, wenn er nicht null ist. Wenn er null ist, wird der Inhaltstyp auf den Standardmedientyp dieses Formatierers festgelegt. Wenn im Inhaltstyp kein Zeichensatz angegeben ist, wird dieser mithilfe der für diesen Formatierer konfigurierten <see cref="T:System.Text.Encoding" /> festgelegt. </summary>
      <param name="type">Der Typ des Objekts, das serialisiert wird. Weitere Informationen finden Sie unter <see cref="T:System.Net.Http.ObjectContent" />.</param>
      <param name="headers">Die Inhaltsheader, die konfiguriert werden sollen.</param>
      <param name="mediaType">Der autorisierende Medientyp. Dieser kann null sein.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatter.SupportedEncodings">
      <summary>Ruft die änderbare Auflistung von Zeichencodierungen ab, die von diesem <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> unterstützt werden.</summary>
      <returns>Die Auflistung von <see cref="T:System.Text.Encoding" />-Objekten.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatter.SupportedMediaTypes">
      <summary>Ruft die änderbare Auflistung von Medientypen ab, die von diesem <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> unterstützt werden.</summary>
      <returns>Die Auflistung von <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" />-Objekten.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext)">
      <summary>Schreibt asynchron ein Objekt des angegebenen Typs.</summary>
      <returns>Eine <see cref="T:System.Threading.Tasks.Task" />, die den Schreibvorgang ausführt.</returns>
      <param name="type">Der Typ des zu schreibenden Objekts.</param>
      <param name="value">Der zu schreibende Objektwert.  Sie kann "null" sein.</param>
      <param name="writeStream">Der <see cref="T:System.IO.Stream" />, in den geschrieben werden soll.</param>
      <param name="content">Die <see cref="T:System.Net.Http.HttpContent" />, falls verfügbar. Sie kann "null" sein.</param>
      <param name="transportContext">Die <see cref="T:System.Net.TransportContext" />, falls verfügbar. Sie kann "null" sein.</param>
      <exception cref="T:System.NotSupportedException">Abgeleitete Typen müssen Schreibvorgänge unterstützen.</exception>
    </member>
    <member name="T:System.Net.Http.Formatting.MediaTypeFormatterCollection">
      <summary>Stellt eine Auflistungsklasse dar, die <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />-Instanzen enthält.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterCollection.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterCollection" />-Klasse mit Standardwerten.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterCollection.#ctor(System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterCollection" />-Klasse mit den gegebenen <paramref name="formatters" />.</summary>
      <param name="formatters">Eine Auflistung von <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />-Instanzen, die in der Auflistung abgelegt werden sollen.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterCollection.FindReader(System.Type,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Durchsucht eine Auflistung nach einem Formatierer, der den .NET <paramref name="type" /> im angegebenen <paramref name="mediaType" /> lesen kann. </summary>
      <returns>Der <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />, der den Typ lesen kann, oder "null", wenn keine Formatierer gefunden wurde.</returns>
      <param name="type">Der zu lesende .NET-Typ.</param>
      <param name="mediaType">Der Medientyp, mit dem abgeglichen werden soll.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterCollection.FindWriter(System.Type,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Durchsucht eine Auflistung nach einem Formatierer, der den .NET <paramref name="type" /> im angegebenen <paramref name="mediaType" /> schreiben kann. </summary>
      <returns>Der <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />, der den Typ schreiben kann, oder "null", wenn keine Formatierer gefunden wurde.</returns>
      <param name="type">Der zu schreibende .NET-Typ.</param>
      <param name="mediaType">Der Medientyp, mit dem abgeglichen werden soll.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatterCollection.FormUrlEncodedFormatter">
      <summary> Ruft den <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> ab, der für application/x-www-form-urlencoded-Daten verwendet werden soll. </summary>
      <returns> Der <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />, der für application/x-www-form-urlencoded-Daten verwendet werden soll. </returns>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterCollection.IsTypeExcludedFromValidation(System.Type)">
      <summary> Bestimmt, ob der <paramref name="type" /> einer der lose definierten Typen ist, die aus der Überprüfung ausgeschlossen werden sollen.</summary>
      <returns>True, wenn der Wert ausgeschlossen werden soll, andernfalls False.</returns>
      <param name="type">Der zu überprüfende .NET <see cref="T:System.Type" />.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatterCollection.JsonFormatter">
      <summary> Ruft den <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> ab, der für JSON verwendet werden soll. </summary>
      <returns>Der für JSON zu verwendende <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatterCollection.XmlFormatter">
      <summary> Ruft den <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> ab, der für XML verwendet werden soll.</summary>
      <returns> Der für XML zu verwendende <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddQueryStringMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.String,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Aktualisiert den Satz von <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" />-Elementen für den angegebenen Formatierer (formatter), sodass der mediaType<see cref="T:System.Uri" />s zugeordnet wird, die einen bestimmten Abfrageparameter und -wert enthalten. </summary>
      <param name="formatter">Der <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />, der das neue <see cref="T:System.Net.Http.Formatting.QueryStringMapping" />-Element empfangen soll.</param>
      <param name="queryStringParameterName">Der Name des Abfrageparameters.</param>
      <param name="queryStringParameterValue">Der diesem Abfrageparameter zugewiesene Wert.</param>
      <param name="mediaType">Der <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" />, der einem <see cref="T:System.Uri" /> zugeordnet werden soll, der eine Abfragezeichenfolge enthält, die mit queryStringParameterName und queryStringParameterValue übereinstimmt.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddQueryStringMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.String,System.String)">
      <summary> Aktualisiert den Satz von <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" />-Elementen für den angegebenen Formatierer (formatter), sodass der mediaType<see cref="T:System.Uri" />s zugeordnet wird, die einen bestimmten Abfrageparameter und -wert enthalten. </summary>
      <param name="formatter">Der <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />, der das neue <see cref="T:System.Net.Http.Formatting.QueryStringMapping" />-Element empfangen soll.</param>
      <param name="queryStringParameterName">Der Name des Abfrageparameters.</param>
      <param name="queryStringParameterValue">Der diesem Abfrageparameter zugewiesene Wert.</param>
      <param name="mediaType">Der Medientyp, der einem <see cref="T:System.Uri" /> zugeordnet werden soll, der eine Abfragezeichenfolge enthält, die mit queryStringParameterName und queryStringParameterValue übereinstimmt.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddRequestHeaderMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.String,System.StringComparison,System.Boolean,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Aktualisiert den Satz von <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" />-Elementen für den angegebenen Formatierer (formatter), sodass der mediaType einem bestimmten HTTP-Anforderungsheaderfeld mit einem bestimmten Wert zugeordnet wird. </summary>
      <param name="formatter">Der <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />, der das neue <see cref="T:System.Net.Http.Formatting.MediaRangeMapping" />-Element empfangen soll.</param>
      <param name="headerName">Name des abzugleichenden Headers.</param>
      <param name="headerValue">Der abzugleichende Headerwert.</param>
      <param name="valueComparison">Der <see cref="T:System.StringComparison" />, der beim Abgleich von headerValue verwendet werden soll.</param>
      <param name="isValueSubstring">Bei Festlegung auf True wird headerValue als Übereinstimmung bewertet, wenn eine Übereinstimmung mit einer Teilzeichenfolge des tatsächlichen Headerwerts vorliegt.</param>
      <param name="mediaType">Der <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" />, der einem <see cref="M:HttpRequestMessage.Header" />-Eintrag mit einem Namen zugeordnet werden soll, der mit headerName übereinstimmt und einen Wert besitzt, der headerValue entspricht.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddRequestHeaderMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.String,System.StringComparison,System.Boolean,System.String)">
      <summary> Aktualisiert den Satz von <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" />-Elementen für den angegebenen Formatierer (formatter), sodass der mediaType einem bestimmten HTTP-Anforderungsheaderfeld mit einem bestimmten Wert zugeordnet wird. </summary>
      <param name="formatter">Der <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />, der das neue <see cref="T:System.Net.Http.Formatting.MediaRangeMapping" />-Element empfangen soll.</param>
      <param name="headerName">Name des abzugleichenden Headers.</param>
      <param name="headerValue">Der abzugleichende Headerwert.</param>
      <param name="valueComparison">Der <see cref="T:System.StringComparison" />, der beim Abgleich von headerValue verwendet werden soll.</param>
      <param name="isValueSubstring">Bei Festlegung auf True wird headerValue als Übereinstimmung bewertet, wenn eine Übereinstimmung mit einer Teilzeichenfolge des tatsächlichen Headerwerts vorliegt.</param>
      <param name="mediaType">Der Medientyp, der einem <see cref="M:HttpRequestMessage.Header" />-Eintrag mit einem Namen zugeordnet werden soll, der mit headerName übereinstimmt und einen Wert besitzt, der headerValue entspricht.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.MediaTypeFormatterMatch">
      <summary> Diese Klasse beschreibt, wie gut ein bestimmter <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> mit einer Anforderung übereinstimmt. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterMatch.#ctor(System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,System.Nullable{System.Double},System.Net.Http.Formatting.MediaTypeFormatterMatchRanking)">
      <summary> Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" />-Klasse. </summary>
      <param name="formatter">Der übereinstimmende Formatierer.</param>
      <param name="mediaType">Der Medientyp. Kann null sein. In diesem Fall wird der application/octet-Datenstrom des Medientyps verwendet.</param>
      <param name="quality">Die Qualität der Übereinstimmung. Kann null sein. In diesem Fall wird von einer vollständigen Übereinstimmung mit einem Wert von 1,0 ausgegangen.</param>
      <param name="ranking">Die Art der Übereinstimmung.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatterMatch.Formatter">
      <summary> Ruft den Medientypformatierer ab. </summary>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatterMatch.MediaType">
      <summary> Ruft den übereinstimmenden Medientyp ab. </summary>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatterMatch.Quality">
      <summary> Ruft die Qualität der Übereinstimmung ab. </summary>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatterMatch.Ranking">
      <summary> Ruft die Art der vorliegenden Übereinstimmung ab. </summary>
    </member>
    <member name="T:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking">
      <summary> Enthält Informationen dazu, in welchem Ausmaß ein <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> mit den expliziten oder impliziten Einstellungen in einer eingehenden Anforderung übereinstimmt. </summary>
    </member>
    <member name="F:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking.None">
      <summary> Es wurde keine Übereinstimmung gefunden. </summary>
    </member>
    <member name="F:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking.MatchOnCanWriteType">
      <summary> Übereinstimmung mit einem Typ. Dies bedeutet, dass der Formatierer den Typ serialisieren kann.</summary>
    </member>
    <member name="F:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking.MatchOnRequestAcceptHeaderLiteral">
      <summary>Übereinstimmung mit einem expliziten literalen Accept-Header, z. B. "application/json".</summary>
    </member>
    <member name="F:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking.MatchOnRequestAcceptHeaderSubtypeMediaRange">
      <summary>Übereinstimmung mit einem expliziten Untertypbereich in einem Accept-Header, z. B. "application/*".</summary>
    </member>
    <member name="F:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking.MatchOnRequestAcceptHeaderAllMediaRange">
      <summary>Übereinstimmung mit einem expliziten Bereich "*/*" im Accept-Header.</summary>
    </member>
    <member name="F:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking.MatchOnRequestWithMediaTypeMapping">
      <summary> Übereinstimmung mit <see cref="T:System.Net.Http.HttpRequestMessage" />, nachdem die verschiedenen <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" />s angewendet wurden. </summary>
    </member>
    <member name="F:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking.MatchOnRequestMediaType">
      <summary> Übereinstimmung mit dem Medientyps des Entitätsnachrichtentexts in der HTTP-Anforderungsnachricht.</summary>
    </member>
    <member name="T:System.Net.Http.Formatting.MediaTypeMapping">
      <summary> Eine abstrakte Basisklasse, die verwendet wird, um eine Zuordnung zwischen <see cref="T:System.Net.Http.HttpRequestMessage" />- oder <see cref="T:System.Net.Http.HttpResponseMessage" />-Instanzen, die bestimmte Eigenschaften besitzen, und einem bestimmten <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> herzustellen.  </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeMapping.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Initialisiert eine neue Instanz einer <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> mit dem angegebenen Wert von mediaType. </summary>
      <param name="mediaType"> Die <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" />, die den <see cref="T:System.Net.Http.HttpRequestMessage" />- oder <see cref="T:System.Net.Http.HttpResponseMessage" />-Instanzen zugeordnet ist, die die angegebenen Eigenschaften der <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> besitzen. </param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeMapping.#ctor(System.String)">
      <summary> Initialisiert eine neue Instanz einer <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> mit dem angegebenen Wert von mediaType. </summary>
      <param name="mediaType"> Die <see cref="T:System.String" />, die den <see cref="T:System.Net.Http.HttpRequestMessage" />- oder <see cref="T:System.Net.Http.HttpResponseMessage" />-Instanzen zugeordnet ist, die die angegebenen Eigenschaften der <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> besitzen. </param>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeMapping.MediaType">
      <summary> Ruft den <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> ab, der den <see cref="T:System.Net.Http.HttpRequestMessage" />- oder <see cref="T:System.Net.Http.HttpResponseMessage" />-Instanzen zugeordnet ist, die die angegebenen Eigenschaften der <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> besitzen. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeMapping.TryMatchMediaType(System.Net.Http.HttpRequestMessage)">
      <summary> Gibt die Qualität der Übereinstimmung des <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> zurück, der der Anforderung (request) zugeordnet ist. </summary>
      <returns> Die Qualität der Übereinstimmung. Der Wert muss zwischen 0.0 und 1.0 liegen. Ein Wert von 0.0 zeigt an, dass keine Übereinstimmung vorliegt. Ein Wert von 1.0 zeigt eine vollständige Übereinstimmung an. </returns>
      <param name="request"> Die <see cref="T:System.Net.Http.HttpRequestMessage" />, die hinsichtlich der Eigenschaften ausgewertet werden soll, die dem <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> der <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> zugeordnet sind. </param>
    </member>
    <member name="T:System.Net.Http.Formatting.QueryStringMapping">
      <summary> Klasse, die <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" />e aus Abfragezeichenfolgen bereitstellt. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.QueryStringMapping.#ctor(System.String,System.String,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.Formatting.QueryStringMapping" />-Klasse. </summary>
      <param name="queryStringParameterName">Der Name des Abfragezeichenfolgen-Parameters, mit dem abgeglichen werden soll, falls vorhanden.</param>
      <param name="queryStringParameterValue">Der Wert des Abfragezeichenfolgen-Parameters, der durch queryStringParameterName angegeben ist.</param>
      <param name="mediaType">Der <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" />, der verwendet werden soll, wenn der durch queryStringParameterName angegebene Abfrageparameter vorhanden und dem durch queryStringParameterValue angegebenen Wert zugewiesen ist.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.QueryStringMapping.#ctor(System.String,System.String,System.String)">
      <summary> Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.Formatting.QueryStringMapping" />-Klasse. </summary>
      <param name="queryStringParameterName">Der Name des Abfragezeichenfolgen-Parameters, mit dem abgeglichen werden soll, falls vorhanden.</param>
      <param name="queryStringParameterValue">Der Wert des Abfragezeichenfolgen-Parameters, der durch queryStringParameterName angegeben ist.</param>
      <param name="mediaType">Der Medientyp, der verwendet werden soll, wenn der durch queryStringParameterName angegebene Abfrageparameter vorhanden und dem durch queryStringParameterValue angegebenen Wert zugewiesen ist.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.QueryStringMapping.QueryStringParameterName">
      <summary> Ruft den Abfragezeichenfolgen-Parameternamen ab. </summary>
    </member>
    <member name="P:System.Net.Http.Formatting.QueryStringMapping.QueryStringParameterValue">
      <summary> Ruft den Abfragezeichenfolgen-Parameterwert ab. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.QueryStringMapping.TryMatchMediaType(System.Net.Http.HttpRequestMessage)">
      <summary> Gibt einen Wert zurück, der angibt, ob die aktuelle <see cref="T:System.Net.Http.Formatting.QueryStringMapping" />-Instanz einen <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> für die Anforderung (request) zurückgeben kann. </summary>
      <returns>Wenn diese Instanz einen <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> aus request erzeugen kann, wird 1.0 zurückgegeben, andernfalls 0.0.</returns>
      <param name="request">Die zu prüfende <see cref="T:System.Net.Http.HttpRequestMessage" />.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.RequestHeaderMapping">
      <summary> Diese Klasse stellt eine Zuordnung zwischen einem beliebigen HTTP-Anforderungsheaderfeld und einem <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> bereit, mit der <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />-Instanzen ausgewählt werden, um den Entitätstextteil einer <see cref="T:System.Net.Http.HttpRequestMessage" /> oder <see cref="T:System.Net.Http.HttpResponseMessage" /> zu verarbeiten. &lt;remarks&gt;Diese Klasse überprüft nur Headerfelder auf Übereinstimmung, die <see cref="M:HttpRequestMessage.Headers" /> zugeordnet sind. Sie überprüft keine Headerfelder, die <see cref="M:HttpResponseMessage.Headers" />- oder <see cref="M:HttpContent.Headers" />-Instanzen zugeordnet sind.&lt;/remarks&gt;</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.RequestHeaderMapping.#ctor(System.String,System.String,System.StringComparison,System.Boolean,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.Formatting.RequestHeaderMapping" />-Klasse. </summary>
      <param name="headerName">Name des abzugleichenden Headers.</param>
      <param name="headerValue">Der abzugleichende Headerwert.</param>
      <param name="valueComparison">Der <see cref="T:System.StringComparison" />, der beim Abgleich von headerValue verwendet werden soll.</param>
      <param name="isValueSubstring">Bei Festlegung auf True wird headerValue als Übereinstimmung bewertet, wenn eine Übereinstimmung mit einer Teilzeichenfolge des tatsächlichen Headerwerts vorliegt.</param>
      <param name="mediaType">Der <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" />, der verwendet werden soll, wenn headerName und headerValue als Übereinstimmung bewertet werden.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.RequestHeaderMapping.#ctor(System.String,System.String,System.StringComparison,System.Boolean,System.String)">
      <summary> Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.Formatting.RequestHeaderMapping" />-Klasse. </summary>
      <param name="headerName">Name des abzugleichenden Headers.</param>
      <param name="headerValue">Der abzugleichende Headerwert.</param>
      <param name="valueComparison">Der Wertevergleich, der beim Abgleich von headerValue verwendet werden soll.</param>
      <param name="isValueSubstring">Bei Festlegung auf True wird headerValue als Übereinstimmung bewertet, wenn eine Übereinstimmung mit einer Teilzeichenfolge des tatsächlichen Headerwerts vorliegt.</param>
      <param name="mediaType">Der Medientyp, der verwendet werden soll, wenn headerName und headerValue als Übereinstimmung bewertet werden.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.RequestHeaderMapping.HeaderName">
      <summary> Ruft den Namen des abzugleichenden Headers ab. </summary>
    </member>
    <member name="P:System.Net.Http.Formatting.RequestHeaderMapping.HeaderValue">
      <summary> Ruft den abzugleichende Headerwert ab. </summary>
    </member>
    <member name="P:System.Net.Http.Formatting.RequestHeaderMapping.HeaderValueComparison">
      <summary> Ruft den <see cref="T:System.StringComparison" /> ab, der beim Abgleich von <see cref="M:HeaderValue" /> verwendet werden soll. </summary>
    </member>
    <member name="P:System.Net.Http.Formatting.RequestHeaderMapping.IsValueSubstring">
      <summary> Ruft einen Wert ab, der angibt, ob für <see cref="M:HeaderValue" /> eine Übereinstimmung mit einer Teilzeichenfolge des tatsächlichen Headerwerts vorliegt. Diese Instanz ist eine Wert-Teilzeichenfolge. </summary>
      <returns>True<see cref="P:System.Net.Http.Formatting.RequestHeaderMapping.HeaderValue" />False</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.RequestHeaderMapping.TryMatchMediaType(System.Net.Http.HttpRequestMessage)">
      <summary> Gibt einen Wert zurück, der angibt, ob die aktuelle <see cref="T:System.Net.Http.Formatting.RequestHeaderMapping" />-Instanz einen <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> für die Anforderung (request) zurückgeben kann. </summary>
      <returns> Die Qualität der Übereinstimmung. Der Wert muss zwischen 0.0 und 1.0 liegen. Ein Wert von 0.0 zeigt an, dass keine Übereinstimmung vorliegt. Ein Wert von 1.0 zeigt eine vollständige Übereinstimmung an. </returns>
      <param name="request">Die zu prüfende <see cref="T:System.Net.Http.HttpRequestMessage" />.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.XmlHttpRequestHeaderMapping">
      <summary> Eine <see cref="T:System.Net.Http.Formatting.RequestHeaderMapping" />, die das durch AJAX XmlHttpRequest (XHR) festgelegte HTTP-Headerfeld X-Requested-With dem Medientyp application/json zuordnet, wenn keine expliziten Accept-Headerfelder in der Anforderung vorhanden sind. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlHttpRequestHeaderMapping.#ctor">
      <summary> Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.Formatting.XmlHttpRequestHeaderMapping" />-Klasse. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlHttpRequestHeaderMapping.TryMatchMediaType(System.Net.Http.HttpRequestMessage)">
      <summary> Gibt einen Wert zurück, der angibt, ob die aktuelle <see cref="T:System.Net.Http.Formatting.RequestHeaderMapping" />-Instanz einen <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> für die Anforderung (request) zurückgeben kann. </summary>
      <returns> Die Qualität der Übereinstimmung. Ein Wert von 0,0 zeigt an, dass keine Übereinstimmung vorliegt. Ein Wert von 1,0 bedeutet eine vollständige Übereinstimmung und zeigt außerdem an, dass die Anforderung mithilfe von XmlHttpRequest ohne einen Accept-Header erfolgt ist. </returns>
      <param name="request">Die zu prüfende <see cref="T:System.Net.Http.HttpRequestMessage" />.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.XmlMediaTypeFormatter">
      <summary>
        <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />-Klasse zur Verarbeitung von Xml. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.Formatting.XmlMediaTypeFormatter" />-Klasse.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.CanReadType(System.Type)">
      <summary>Fragt ab, ob der <see cref="T:System.Net.Http.Formatting.XmlMediaTypeFormatter" /> ein Objekt des angegebenen Typs deserialisieren kann.</summary>
      <returns>true, wenn der <see cref="T:System.Net.Http.Formatting.XmlMediaTypeFormatter" /> den Typ deserialisieren kann, andernfalls false.</returns>
      <param name="type">Der zu deserialisierende Typ.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.CanWriteType(System.Type)">
      <summary>Fragt ab, ob der <see cref="T:System.Net.Http.Formatting.XmlMediaTypeFormatter" /> ein Objekt des angegebenen Typs serialisieren kann.</summary>
      <returns>true, wenn der <see cref="T:System.Net.Http.Formatting.XmlMediaTypeFormatter" /> den Typ serialisieren kann, andernfalls false.</returns>
      <param name="type">Der zu serialisierende Typ.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.XmlMediaTypeFormatter.DefaultMediaType">
      <summary>Ruft den Standardmedientyp für den XML-Formatierer ab.</summary>
      <returns>Der Standardmedientyp, der "application/xml" lautet.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.XmlMediaTypeFormatter.Indent">
      <summary>Ruft einen Wert ab, der angibt, ob Elemente beim Schreiben von Daten eingerückt werden sollen, oder legt diesen fest.</summary>
      <returns>true, um Elemente einzurücken, andernfalls false.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.XmlMediaTypeFormatter.MaxDepth">
      <summary>Ruft die maximal zulässige Tiefe geschachtelter Knoten ab oder legt diese fest.</summary>
      <returns>Die maximal zulässige Tiefe geschachtelter Knoten.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
      <summary> Wird während der Deserialisierung aufgerufen, um ein Objekt des angegebenen Typs aus dem angegebenen readStream zu lesen. </summary>
      <returns>Ein <see cref="T:System.Threading.Tasks.Task" />, dessen Ergebnis die gelesene Objektinstanz ist.</returns>
      <param name="type">Der Typ des zu lesenden Objekts</param>
      <param name="readStream">Der <see cref="T:System.IO.Stream" />, aus dem gelesen werden soll.</param>
      <param name="content">Die <see cref="T:System.Net.Http.HttpContent" /> für den Inhalt, der gelesen wird.</param>
      <param name="formatterLogger">Die <see cref="T:System.Net.Http.Formatting.IFormatterLogger" />, in der Ereignisse protokolliert werden sollen.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.RemoveSerializer(System.Type)">
      <summary>Hebt die Registrierung des Serialisierers auf, der zurzeit dem angegebenen Typ zugeordnet ist.</summary>
      <returns>true, wenn zuvor ein Serialisierer für den Typ registriert war, andernfalls false.</returns>
      <param name="type">Der Objekttyp, dessen Serialisierer entfernt werden soll.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.SetSerializer``1(System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Registriert einen <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />, der zum Lesen oder Schreiben von Objekten eines angegebenen Typs verwendet werden soll.</summary>
      <param name="serializer">Die <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />-Instanz.</param>
      <typeparam name="T">Der Objekttyp, der mit dem <paramref name="serializer" /> serialisiert oder deserialisiert wird.</typeparam>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.SetSerializer(System.Type,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Registriert einen <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />, der zum Lesen oder Schreiben von Objekten eines angegebenen Typs verwendet werden soll.</summary>
      <param name="type">Der Objekttyp, der mit dem <paramref name="serializer" /> serialisiert oder deserialisiert wird.</param>
      <param name="serializer">Die <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />-Instanz.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.SetSerializer(System.Type,System.Xml.Serialization.XmlSerializer)">
      <summary>Registriert einen <see cref="T:System.Xml.Serialization.XmlSerializer" />, der zum Lesen oder Schreiben von Objekten eines angegebenen Typs verwendet werden soll.</summary>
      <param name="type">Der Objekttyp, der mit dem <paramref name="serializer" /> serialisiert oder deserialisiert wird.</param>
      <param name="serializer">Die <see cref="T:System.Xml.Serialization.XmlSerializer" />-Instanz.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.SetSerializer``1(System.Xml.Serialization.XmlSerializer)">
      <summary>Registriert einen <see cref="T:System.Xml.Serialization.XmlSerializer" />, der zum Lesen oder Schreiben von Objekten eines angegebenen Typs verwendet werden soll.</summary>
      <param name="serializer">Die <see cref="T:System.Xml.Serialization.XmlSerializer" />-Instanz.</param>
      <typeparam name="T">Der Objekttyp, der mit dem <paramref name="serializer" /> serialisiert oder deserialisiert wird.</typeparam>
    </member>
    <member name="P:System.Net.Http.Formatting.XmlMediaTypeFormatter.UseXmlSerializer">
      <summary>Ruft einen Wert ab, der angibt, ob der XML-Formatierer <see cref="T:System.Xml.Serialization.XmlSerializer" /> als Standardserialisierer anstelle von <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> verwendet, oder legt diesen fest.</summary>
      <returns>Wenn der Wert true ist, verwendet der Formatierer standardmäßig <see cref="T:System.Xml.Serialization.XmlSerializer" />, andernfalls wird <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> standardmäßig verwendet.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext)">
      <summary> Wird während der Serialisierung aufgerufen, um ein Objekt des angegebenen Typs (type) in den angegebenen Datenstrom (writeStream) zu schreiben. </summary>
      <returns>Eine <see cref="T:System.Threading.Tasks.Task" />, die den Wert in den Datenstrom schreibt.</returns>
      <param name="type">Der Typ des zu schreibenden Objekts.</param>
      <param name="value">Das zu schreibende Objekt.</param>
      <param name="writeStream">Der <see cref="T:System.IO.Stream" />, in den geschrieben werden soll.</param>
      <param name="content">Die <see cref="T:System.Net.Http.HttpContent" /> für den Inhalt, der geschrieben wird.</param>
      <param name="transportContext">Der <see cref="T:System.Net.TransportContext" />.</param>
    </member>
    <member name="T:System.Net.Http.Handlers.HttpProgressEventArgs">
      <summary>Stellt die Ereignisargumente für den HTTP-Status dar.</summary>
    </member>
    <member name="M:System.Net.Http.Handlers.HttpProgressEventArgs.#ctor(System.Int32,System.Object,System.Int32,System.Nullable{System.Int64})">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.Handlers.HttpProgressEventArgs" />-Klasse.</summary>
      <param name="progressPercentage">Der Prozentsatz des Status.</param>
      <param name="userToken">Das Benutzertoken.</param>
      <param name="bytesTransferred">Die Anzahl der übertragenen Bytes.</param>
      <param name="totalBytes">Die Gesamtzahl der übertragenen Bytes.</param>
    </member>
    <member name="P:System.Net.Http.Handlers.HttpProgressEventArgs.BytesTransferred">
      <summary>Ruft die Anzahl der Bytes ab, die im HTTP-Status übertragen werden.</summary>
      <returns>Die Anzahl der Bytes, die im HTTP-Status übertragen werden.</returns>
    </member>
    <member name="P:System.Net.Http.Handlers.HttpProgressEventArgs.TotalBytes">
      <summary>Ruft die Gesamtzahl der Bytes ab, die vom HTTP-Status übertragen werden.</summary>
      <returns>Die Gesamtzahl der Bytes, die vom HTTP-Status übertragen werden.</returns>
    </member>
    <member name="T:System.Net.Http.Handlers.ProgressMessageHandler">
      <summary>Generiert eine Statusbenachrichtigung für Anforderungsentitäten, die hoch- bzw. heruntergeladen werden.</summary>
    </member>
    <member name="M:System.Net.Http.Handlers.ProgressMessageHandler.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.Handlers.ProgressMessageHandler" />-Klasse.</summary>
    </member>
    <member name="M:System.Net.Http.Handlers.ProgressMessageHandler.#ctor(System.Net.Http.HttpMessageHandler)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.Handlers.ProgressMessageHandler" />-Klasse.</summary>
      <param name="innerHandler">Der interne Nachrichtenhandler.</param>
    </member>
    <member name="E:System.Net.Http.Handlers.ProgressMessageHandler.HttpReceiveProgress">
      <summary>Tritt auf, wenn Ereignisentitäten heruntergeladen werden.</summary>
    </member>
    <member name="E:System.Net.Http.Handlers.ProgressMessageHandler.HttpSendProgress">
      <summary>Tritt auf, wenn Ereignisentitäten hochgeladen werden.</summary>
    </member>
    <member name="M:System.Net.Http.Handlers.ProgressMessageHandler.OnHttpRequestProgress(System.Net.Http.HttpRequestMessage,System.Net.Http.Handlers.HttpProgressEventArgs)">
      <summary>Löst das Ereignis aus, das die Anforderung des Status verarbeitet.</summary>
      <param name="request">Die Anforderung.</param>
      <param name="e">Der Ereignishandler für die Anforderung.</param>
    </member>
    <member name="M:System.Net.Http.Handlers.ProgressMessageHandler.OnHttpResponseProgress(System.Net.Http.HttpRequestMessage,System.Net.Http.Handlers.HttpProgressEventArgs)">
      <summary>Löst das Ereignis aus, das die Antwort des Status verarbeitet.</summary>
      <param name="request">Die Anforderung.</param>
      <param name="e">Der Ereignishandler für die Anforderung.</param>
    </member>
    <member name="M:System.Net.Http.Handlers.ProgressMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>Sendet die angegebene Statusnachricht an einen HTTP-Server für die Übermittlung.</summary>
      <returns>Die gesendete Statusnachricht.</returns>
      <param name="request">Die Anforderung.</param>
      <param name="cancellationToken">Das Abbruchtoken.</param>
    </member>
    <member name="T:System.Net.Http.Headers.CookieHeaderValue">
      <summary>Stellt den Wert für den Cookieheader zur Verfügung.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.CookieHeaderValue.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.Headers.CookieHeaderValue" />-Klasse.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.CookieHeaderValue.#ctor(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.Headers.CookieHeaderValue" />-Klasse.</summary>
      <param name="name">Der Wert des Namens.</param>
      <param name="values">Die Werte.</param>
    </member>
    <member name="M:System.Net.Http.Headers.CookieHeaderValue.#ctor(System.String,System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.Headers.CookieHeaderValue" />-Klasse.</summary>
      <param name="name">Der Wert des Namens.</param>
      <param name="value">Der Wert.</param>
    </member>
    <member name="M:System.Net.Http.Headers.CookieHeaderValue.Clone">
      <summary>Erstellt eine flache Kopie des Cookiewerts.</summary>
      <returns>Eine flache Kopie des Cookiewerts.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.Cookies">
      <summary>Ruft eine Auflistung der vom Client gesendeten Cookies ab.</summary>
      <returns>Ein Auflistungsobjekt, das die Cookievariablen des Clients darstellt.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.Domain">
      <summary>Ruft die Domäne ab, der das Cookie zugeordnet werden soll, oder legt diese fest.</summary>
      <returns>Der Name der Domäne, der das Cookie zugeordnet werden soll.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.Expires">
      <summary>Ruft das Ablaufdatum und die -uhrzeit für das Cookie ab oder legt diese Angaben fest.</summary>
      <returns>Die Uhrzeit (auf dem Client), zu der das Cookie abläuft.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.HttpOnly">
      <summary>Ruft einen Wert ab, der angibt, ob auf ein Cookie durch ein clientseitiges Skript zugegriffen werden kann, oder legt diesen Wert fest.</summary>
      <returns>true, wenn das Cookie das Attribut HttpOnly aufweist und kein Zugriff darauf durch ein clientseitiges Skript erfolgen kann, andernfalls false.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.Item(System.String)">
      <summary>Ruft eine Verknüpfung mit der Cookieeigenschaft ab.</summary>
      <returns>Der Cookiewert.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.MaxAge">
      <summary>Ruft das maximal zulässige Alter für eine Ressource ab bzw. legt dieses fest.</summary>
      <returns>Das maximal zulässige Alter für eine Ressource.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.Path">
      <summary>Ruft den virtuellen Pfad ab, der mit dem aktuellen Cookie übertragen werden soll, oder legt diesen fest.</summary>
      <returns>Der virtuelle Pfad, der mit dem Cookie übertragen werden soll.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.Secure">
      <summary>Ruft einen Wert ab, der angibt, ob das Cookie mithilfe von SSL (Secure Sockets Layer) – also nur über HTTPS – übertragen werden soll, oder legt diesen Wert fest.</summary>
      <returns>true, wenn das Cookie über eine SSL-Verbindung (HTTPS) übertragen werden soll, andernfalls false.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.CookieHeaderValue.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt darstellt.</summary>
      <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.CookieHeaderValue.TryParse(System.String,System.Net.Http.Headers.CookieHeaderValue@)">
      <summary>Gibt einen Wert an, der bestimmt, ob die Zeichenfolgendarstellung konvertiert wird.</summary>
      <returns>true, wenn die Zeichenfolgendarstellung konvertiert werden soll, andernfalls false.</returns>
      <param name="input">Der Eingabewert.</param>
      <param name="parsedValue">Der zu konvertierende analysierte Wert.</param>
    </member>
    <member name="T:System.Net.Http.Headers.CookieState">
      <summary>Enthält den Cookienamen und den ihm zugeordneten Cookiestatus.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.CookieState.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.Headers.CookieState" />-Klasse.</summary>
      <param name="name">Der Name des Cookies.</param>
    </member>
    <member name="M:System.Net.Http.Headers.CookieState.#ctor(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.Headers.CookieState" />-Klasse.</summary>
      <param name="name">Der Name des Cookies.</param>
      <param name="values">Die Auflistung der Name-Wert-Paare für den Cookie.</param>
    </member>
    <member name="M:System.Net.Http.Headers.CookieState.#ctor(System.String,System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Net.Http.Headers.CookieState" />-Klasse.</summary>
      <param name="name">Der Name des Cookies.</param>
      <param name="value">Der Wert des Cookies.</param>
    </member>
    <member name="M:System.Net.Http.Headers.CookieState.Clone">
      <summary>Gibt ein neues Objekt zurück, das eine Kopie der aktuellen Instanz ist.</summary>
      <returns>Ein neues Objekt, das eine Kopie der aktuellen Instanz ist.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieState.Item(System.String)">
      <summary>Ruft den Cookiewert mit dem angegebenen Cookienamen ab, wenn die Cookiedaten strukturiert sind, oder legt diesen fest.</summary>
      <returns>Der Cookiewert mit dem angegebenen Cookienamen.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieState.Name">
      <summary>Ruft den Namen des Cookies ab oder legt diesen fest.</summary>
      <returns>Der Name des Cookies.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.CookieState.ToString">
      <summary>Gibt die Zeichenfolgendarstellung des aktuellen Objekts zurück.</summary>
      <returns>Die Zeichenfolgendarstellung des aktuellen Objekts.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieState.Value">
      <summary>Ruft den Cookiewert ab, wenn die Cookiedaten ein einfacher Zeichenfolgenwert sind, oder legt diesen fest.</summary>
      <returns>Der Wert des Cookies. </returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieState.Values">
      <summary>Ruft die Auflistung der Name-Wert-Paare ab, wenn die Cookiedaten strukturiert sind, oder legt diese fest.</summary>
      <returns>Die Auflistung der Name-Wert-Paare für den Cookie.</returns>
    </member>
  </members>
</doc>